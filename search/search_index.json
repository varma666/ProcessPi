{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProcessPI \ud83e\uddea","text":"<p>Welcome to the ProcessPI documentation!</p> <p>ProcessPI is a modular Python toolkit for chemical engineering that enables: - \u2705 Pipeline network simulations - \u2705 Unit conversions across SI, CGS, and Imperial systems - \u2705 Component-based property calculations - \ud83d\udea7 Heat, mass transfer, and reaction modules (in progress)  </p>"},{"location":"#highlights","title":"\u2728 Highlights","text":"<ul> <li>Fast, educational property calculations  </li> <li>Extendable for new fluids, units, and modules  </li> <li>Open-source under MIT License  </li> </ul> <p>\ud83d\udce6 Source code: GitHub Repo \ud83d\udcca PyPI Package: processpi </p>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section documents the main classes and functions in ProcessPI.</p>"},{"location":"api_reference/#units","title":"Units","text":"<ul> <li><code>Velocity(value, unit)</code></li> <li><code>Diameter(value, unit)</code></li> <li><code>Density(value, unit)</code></li> <li><code>Viscosity(value, unit)</code></li> <li><code>Temperature(value, unit)</code></li> <li><code>Pressure(value, unit)</code></li> <li><code>SpecificHeat(value, unit)</code></li> <li><code>ThermalConductivity(value, unit)</code></li> <li><code>HeatFlux(value, unit)</code></li> <li><code>HeatTransferCoefficient(value, unit)</code></li> <li><code>HeatOfVaporization(value, unit)</code></li> <li><code>Time(value, unit)</code></li> <li><code>Mass(value, unit)</code></li> <li><code>MassFlowRate(value, unit)</code></li> <li><code>MolarFlowRate(value, unit)</code></li> <li><code>Volume(value, unit)</code></li> <li><code>VolumetricFlowRate(value, unit)</code></li> </ul>"},{"location":"api_reference/#components","title":"Components","text":"<ul> <li><code>Acetone(temperature=Temperature(...))</code></li> <li><code>Water(temperature=Temperature(...))</code></li> <li><code>Toluene(temperature=Temperature(...))</code></li> <li><code>Methanol(temperature=Temperature(...))</code></li> <li><code>OrganicLiquid(...)</code></li> <li><code>InorganicLiquid(...)</code></li> <li><code>Gas(...)</code></li> <li><code>Oil(...)</code></li> <li><code>Vapor(...)</code></li> </ul>"},{"location":"api_reference/#calculations","title":"Calculations","text":"<ul> <li><code>CalculationEngine()</code></li> <li><code>.calculate(\"fluid_velocity\", volumetric_flow_rate, diameter)</code></li> <li><code>.calculate(\"reynolds_number\", density, velocity, diameter, viscosity)</code></li> <li><code>.calculate(\"friction_factor_colebrookwhite\", diameter, roughness, reynolds_number)</code></li> <li><code>.calculate(\"pressure_drop_darcy\", friction_factor, length, diameter, density, velocity)</code></li> <li><code>.calculate(\"pressure_drop_hazen_williams\", length, flow_rate, diameter, density, coefficient)</code></li> </ul>"},{"location":"api_reference/#pipelines","title":"Pipelines","text":"<ul> <li><code>PipelineNetwork(...)</code></li> <li><code>.add_pipe(start, end, diameter, length, roughness)</code></li> <li><code>.describe()</code></li> <li><code>.schematic()</code></li> <li><code>.visualize_network()</code></li> </ul>"},{"location":"contributing/","title":"Contributing to ProcessPI","text":"<p>We welcome contributions from the community! \ud83c\udf89</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally.</li> <li>Create a new branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and add tests if applicable.</li> <li>Run tests to ensure everything is working.</li> <li>Commit your changes and push:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Open a Pull Request (PR) on the main repository.</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP8 guidelines.</li> <li>Use type hints where possible.</li> <li>Document public functions and classes with docstrings.</li> </ul>"},{"location":"contributing/#issues","title":"Issues","text":"<ul> <li>Found a bug? Open an issue with a clear description and steps to reproduce.</li> <li>Have a feature request? Suggest it via a GitHub issue.</li> </ul> <p>Thank you for helping improve ProcessPI!</p>"},{"location":"installation/","title":"Installation","text":"<p>ProcessPI can be installed from PyPI, set up in a development environment, or used directly in Jupyter Notebooks and Google Colab.</p>"},{"location":"installation/#install-from-pypi","title":"\ud83d\udce6 Install from PyPI","text":"<p>The simplest way to install ProcessPI:</p>"},{"location":"installation/#pip-install-processpi","title":"<pre><code>pip install processpi\n</code></pre>","text":""},{"location":"installation/#development-setup","title":"\ud83d\udee0 Development Setup","text":"<p>If you want to work on the source code:</p>"},{"location":"installation/#git-clone-httpsgithubcomvarma666processpigit-cd-processpi-pip-install-e","title":"<pre><code>git clone https://github.com/varma666/ProcessPi.git\ncd ProcessPi\npip install -e .\n</code></pre>","text":""},{"location":"installation/#using-a-virtual-environment-recommended","title":"\ud83d\udc0d Using a Virtual Environment (Recommended)","text":"<p>To avoid conflicts with other Python packages, use a virtual environment.</p> <p>Create and activate with venv:</p> <p><pre><code>python -m venv .venv\nsource .venv/bin/activate   # Linux / macOS\n.venv\\Scripts\\activate      # Windows\n</code></pre> Install ProcessPI inside it:</p>"},{"location":"installation/#pip-install-processpi_1","title":"<pre><code>pip install processpi\n</code></pre>","text":""},{"location":"installation/#using-in-jupyter-notebook","title":"\ud83d\udcd3 Using in Jupyter Notebook","text":"<p>ProcessPI works inside Jupyter Notebooks. First, install Jupyter:</p> <p><pre><code>pip install jupyter\n</code></pre> Launch</p> <p><pre><code>jupyter notebook\n</code></pre> Inside a notebook, you can import ProcessPI:</p>"},{"location":"installation/#from-processpiunits-import-length-pressure-printlength1-mtoft","title":"<pre><code>from processpi.units import Length, Pressure\nprint(Length(1, \"m\").to(\"ft\"))\n</code></pre>","text":""},{"location":"installation/#using-in-google-colab","title":"\ud83c\udf10 Using in Google Colab","text":"<p>You can use ProcessPI directly in Colab notebooks.</p> <p>At the top of your Colab notebook, run:</p> <pre><code>!pip install processpi\n</code></pre> <p>Then import as usual: <pre><code>from processpi.components import Water\nprint(Water().density())\n</code></pre></p>"},{"location":"installation/#verification","title":"\u2705 Verification","text":"<p>After installation, verify ProcessPI is available: <pre><code>import processpi\nprint(\"ProcessPI version:\", processpi.__version__)\n</code></pre></p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Raviteja Varma Nadimpalli</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#v020-next-release","title":"v0.2.0 (Next Release)","text":"<ul> <li> Expand unit conversions (add missing Imperial/engineering units)</li> <li> Add more built-in components (Ethanol, Benzene, Ammonia, etc.)</li> <li> Extend CalculationEngine with heat transfer correlations</li> <li> Visualization: Add P&amp;ID-style symbols to network plots</li> <li> Improve documentation with tutorials and Colab notebooks</li> </ul>"},{"location":"roadmap/#v030","title":"v0.3.0","text":"<ul> <li> Equipment library (pumps, compressors, heat exchangers)</li> <li> Advanced multiphase calculations</li> <li> Integration with CoolProp for thermophysical properties</li> </ul>"},{"location":"roadmap/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li> Full-fledged process simulation toolkit (open-source alternative to Aspen/HYSYS)</li> <li> Web-based GUI dashboard</li> <li> Plugin ecosystem for custom methods</li> </ul>"},{"location":"usage/calculations/","title":"Calculations Examples","text":"<p>This document shows how to use the ProcessPI <code>CalculationEngine</code> with different unit systems and equations.</p>"},{"location":"usage/calculations/#examples-covered","title":"Examples Covered","text":"<ol> <li>Basic fluid velocity (US units)</li> <li>Basic fluid velocity (Metric units)</li> <li>Velocity and Reynolds number (US units)</li> <li>Velocity and Reynolds number (Metric units)</li> <li>Friction factor using Colebrook-White (US units)</li> <li>Darcy pressure drop (US units)</li> <li>Long pipeline pressure drop (Metric units)</li> <li>Pressure drop using Hazen-Williams (US units)</li> </ol>"},{"location":"usage/calculations/#1-basic-fluid-velocity-us-units","title":"1. Basic fluid velocity (US Units)","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter\n\nengine = CalculationEngine()\n\nvolumetric_flow_rate = VolumetricFlowRate(3000, 'gal/min')\ndiameter = Diameter(15.5, 'in')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\n</code></pre>"},{"location":"usage/calculations/#2-basic-fluid-velocity-metric-units","title":"2. Basic fluid velocity (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(75, 'L/s')\ndiameter = Diameter(180, 'mm')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\nprint(f\"Velocity: {velocity}\")\n</code></pre>"},{"location":"usage/calculations/#3-velocity-and-reynolds-number-us-units","title":"3. Velocity and Reynolds number (US Units)","text":"<pre><code>from processpi.units import Density, Viscosity\n\nvolumetric_flow_rate = VolumetricFlowRate(6000, 'gal/min')\ndiameter = Diameter(19.25, 'in')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\ndensity = Density(998, 'kg/m3')\nviscosity = Viscosity(1.0, 'cSt')\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"usage/calculations/#4-velocity-and-reynolds-number-metric-units","title":"4. Velocity and Reynolds number (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(640, 'm3/h')\ndiameter = Diameter(380, 'mm')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\ndensity = Density(998, 'kg/m3')\nviscosity = Viscosity(1.0, 'cSt')\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"usage/calculations/#5-friction-factor-using-colebrook-white-us-units","title":"5. Friction Factor using Colebrook-White (US Units)","text":"<pre><code>from processpi.units import Length\n\nvolumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\nroughness = Length(0.002, \"in\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\nnre = engine.calculate(\"nre\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\nfriction_factor = engine.calculate(\"friction_factor_colebrookwhite\", diameter=diameter, roughness=roughness, reynolds_number=nre)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\n</code></pre>"},{"location":"usage/calculations/#6-darcy-pressure-drop-us-units","title":"6. Darcy Pressure Drop (US Units)","text":"<pre><code>length = Length(1000, \"ft\")\npressure_drop = engine.calculate(\"pressure_drop_darcy\", friction_factor=friction_factor, length=length,\n                                 diameter=diameter, density=density, velocity=velocity)\n\nprint(f\"Pressure Drop: {pressure_drop.to('psi')}\")\n</code></pre>"},{"location":"usage/calculations/#7-long-pipeline-pressure-drop-metric-units","title":"7. Long Pipeline Pressure Drop (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(34000, \"m3/h\")\ndiameter = Diameter(2, \"m\")\nroughness = Length(0.05, \"mm\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\nnre = engine.calculate(\"nre\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\nfriction_factor = engine.calculate(\"friction_factor_colebrookwhite\", diameter=diameter, roughness=roughness, reynolds_number=nre)\nlength = Length(5, \"km\")\npressure_drop = engine.calculate(\"pressure_drop_darcy\", friction_factor=friction_factor, length=length,\n                                 diameter=diameter, density=density, velocity=velocity)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\nprint(f\"Pressure Drop: {pressure_drop.to('kPa')}\")\n</code></pre>"},{"location":"usage/calculations/#8-pressure-drop-using-hazen-williams-us-units","title":"8. Pressure Drop using Hazen-Williams (US Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\ndensity = Density(998, \"kg/m3\")\nlength = Length(1000, \"ft\")\n\npressure_drop = engine.calculate(\"pressure_drop_hazen_williams\", length=length, flow_rate=volumetric_flow_rate,\n                                 diameter=diameter, density=density, coefficient=120)\n\nprint(f\"Pressure Drop: {pressure_drop.to('psi')}\")\n</code></pre> <p>\u2705 These examples demonstrate how to use the <code>CalculationEngine</code> for fluid mechanics problems in US and Metric units.</p>"},{"location":"usage/components/","title":"Components","text":"<p>Example usage of the ProcessPI <code>Component</code> interface.</p> <p>This guide covers:</p> <ol> <li>Acetone at 35 \u00b0C  </li> <li>Acetone at 60 \u00b0C (unit conversion demo)  </li> <li>Generic Organic Liquid  </li> <li>Generic Inorganic Liquid  </li> <li>Generic Gas  </li> <li>Oil at elevated temperature  </li> <li>Vapor with custom properties override  </li> <li>Quick comparison between two fluids  </li> <li>Water at room temperature  </li> <li>Toluene at 50 \u00b0C  </li> <li>Methanol at 30 \u00b0C  </li> </ol>"},{"location":"usage/components/#1-acetone-at-35-c","title":"1. Acetone at 35 \u00b0C","text":""},{"location":"usage/components/#from-processpicomponentsacetone-import-acetone-from-processpiunits-import-acetone-acetonetemperaturetemperature35-c-printacetonedensitytokgm3-printacetoneviscositytopas-printacetonespecific_heattojkgk-printacetonethermal_conductivitytowmk-printacetonevapor_pressuretopa-printacetoneenthalpytojkg","title":"<pre><code>from processpi.components.acetone import Acetone\nfrom processpi.units import *\n\nacetone = Acetone(temperature=Temperature(35, \"C\"))\nprint(acetone.density().to(\"kg/m3\"))\nprint(acetone.viscosity().to(\"Pa\u00b7s\"))\nprint(acetone.specific_heat().to(\"J/kgK\"))\nprint(acetone.thermal_conductivity().to(\"W/mK\"))\nprint(acetone.vapor_pressure().to(\"Pa\"))\nprint(acetone.enthalpy().to(\"J/kg\"))\n</code></pre>","text":""},{"location":"usage/components/#2-acetone-at-higher-temperature-60-c-with-unit-conversion","title":"2. Acetone at higher temperature (60 \u00b0C) with unit conversion","text":""},{"location":"usage/components/#acetone_high-acetonetemperaturetemperature60-c-printacetone_highdensitytolbft3-printacetone_highviscositytocp","title":"<pre><code>acetone_high = Acetone(temperature=Temperature(60, \"C\"))\nprint(acetone_high.density().to(\"lb/ft3\"))\nprint(acetone_high.viscosity().to(\"cP\"))\n</code></pre>","text":""},{"location":"usage/components/#3-generic-organic-liquid","title":"3. Generic Organic Liquid","text":""},{"location":"usage/components/#from-processpicomponentsorganic_liquid-import-organicliquid-organic-organicliquidtemperaturetemperature40-c-printorganicdensitytokgm3-printorganicviscositytopas-printorganicspecific_heattojkgk","title":"<pre><code>from processpi.components.organic_liquid import OrganicLiquid\n\norganic = OrganicLiquid(temperature=Temperature(40, \"C\"))\nprint(organic.density().to(\"kg/m3\"))\nprint(organic.viscosity().to(\"Pa\u00b7s\"))\nprint(organic.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"usage/components/#4-generic-inorganic-liquid","title":"4. Generic Inorganic Liquid","text":""},{"location":"usage/components/#from-processpicomponentsinorganic_liquid-import-inorganicliquid-inorganic-inorganicliquidtemperaturetemperature50-c-printinorganicdensitytokgm3-printinorganicviscositytopas-printinorganicspecific_heattojkgk","title":"<pre><code>from processpi.components.inorganic_liquid import InorganicLiquid\n\ninorganic = InorganicLiquid(temperature=Temperature(50, \"C\"))\nprint(inorganic.density().to(\"kg/m3\"))\nprint(inorganic.viscosity().to(\"Pa\u00b7s\"))\nprint(inorganic.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"usage/components/#5-generic-gas","title":"5. Generic Gas","text":""},{"location":"usage/components/#from-processpicomponentsgas-import-gas-gas-gastemperaturetemperature100-c-printgasdensitytokgm3-printgasviscositytopas-printgasspecific_heattojkgk","title":"<pre><code>from processpi.components.gas import Gas\n\ngas = Gas(temperature=Temperature(100, \"C\"))\nprint(gas.density().to(\"kg/m3\"))\nprint(gas.viscosity().to(\"Pa\u00b7s\"))\nprint(gas.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"usage/components/#6-oil-at-elevated-temperature","title":"6. Oil at elevated temperature","text":""},{"location":"usage/components/#from-processpicomponentsoil-import-oil-oil-oiltemperaturetemperature150-c-printoildensitytokgm3-printoilviscositytocp-printoilspecific_heattojkgk","title":"<pre><code>from processpi.components.oil import Oil\n\noil = Oil(temperature=Temperature(150, \"C\"))\nprint(oil.density().to(\"kg/m3\"))\nprint(oil.viscosity().to(\"cP\"))\nprint(oil.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"usage/components/#7-vapor-with-custom-overrides","title":"7. Vapor with custom overrides","text":""},{"location":"usage/components/#from-processpicomponentsvapor-import-vapor-from-processpiunits-import-density-viscosity-specificheat-custom_vapor-vapor-temperaturetemperature120-c-densitydensity07-kgm3-viscosityviscosity000002-pas-specific_heatspecificheat1900-jkgk-printcustom_vapordensitytokgm3-printcustom_vaporviscositytopas-printcustom_vaporspecific_heattojkgk","title":"<pre><code>from processpi.components.vapor import Vapor\nfrom processpi.units import Density, Viscosity, SpecificHeat\n\ncustom_vapor = Vapor(\n    temperature=Temperature(120, \"C\"),\n    density=Density(0.7, \"kg/m3\"),\n    viscosity=Viscosity(0.00002, \"Pa\u00b7s\"),\n    specific_heat=SpecificHeat(1900, \"J/kgK\"),\n)\nprint(custom_vapor.density().to(\"kg/m3\"))\nprint(custom_vapor.viscosity().to(\"Pa\u00b7s\"))\nprint(custom_vapor.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"usage/components/#8-quick-comparison-organic-vs-inorganic-liquid","title":"8. Quick comparison: Organic vs. Inorganic Liquid","text":""},{"location":"usage/components/#organic_50-organicliquidtemperaturetemperature50-c-inorganic_50-inorganicliquidtemperaturetemperature50-c-printorganic_50densitytokgm3-printinorganic_50densitytokgm3-printorganic_50viscositytopas-printinorganic_50viscositytopas","title":"<pre><code>organic_50 = OrganicLiquid(temperature=Temperature(50, \"C\"))\ninorganic_50 = InorganicLiquid(temperature=Temperature(50, \"C\"))\n\nprint(organic_50.density().to(\"kg/m3\"))\nprint(inorganic_50.density().to(\"kg/m3\"))\nprint(organic_50.viscosity().to(\"Pa\u00b7s\"))\nprint(inorganic_50.viscosity().to(\"Pa\u00b7s\"))\n</code></pre>","text":""},{"location":"usage/components/#9-water-at-room-temperature","title":"9. Water at room temperature","text":""},{"location":"usage/components/#from-processpicomponentswater-import-water-water-watertemperaturetemperature25-c-printwaterdensitytokgm3-printwaterviscositytopas-printwaterspecific_heattojkgk-printwaterthermal_conductivitytowmk-printwatervapor_pressuretopa","title":"<pre><code>from processpi.components.water import Water\n\nwater = Water(temperature=Temperature(25, \"C\"))\nprint(water.density().to(\"kg/m3\"))\nprint(water.viscosity().to(\"Pa\u00b7s\"))\nprint(water.specific_heat().to(\"J/kgK\"))\nprint(water.thermal_conductivity().to(\"W/mK\"))\nprint(water.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"usage/components/#10-toluene-at-50-c","title":"10. Toluene at 50 \u00b0C","text":""},{"location":"usage/components/#from-processpicomponentstoluene-import-toluene-toluene-toluenetemperaturetemperature50-c-printtoluenedensitytokgm3-printtolueneviscositytopas-printtoluenespecific_heattojkgk-printtoluenevapor_pressuretopa","title":"<pre><code>from processpi.components.toluene import Toluene\n\ntoluene = Toluene(temperature=Temperature(50, \"C\"))\nprint(toluene.density().to(\"kg/m3\"))\nprint(toluene.viscosity().to(\"Pa\u00b7s\"))\nprint(toluene.specific_heat().to(\"J/kgK\"))\nprint(toluene.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"usage/components/#11-methanol-at-30-c","title":"11. Methanol at 30 \u00b0C","text":""},{"location":"usage/components/#from-processpicomponentsmethanol-import-methanol-methanol-methanoltemperaturetemperature30-c-printmethanoldensitytokgm3-printmethanolviscositytopas-printmethanolspecific_heattojkgk-printmethanolthermal_conductivitytowmk-printmethanolvapor_pressuretopa","title":"<pre><code>from processpi.components.methanol import Methanol\n\nmethanol = Methanol(temperature=Temperature(30, \"C\"))\nprint(methanol.density().to(\"kg/m3\"))\nprint(methanol.viscosity().to(\"Pa\u00b7s\"))\nprint(methanol.specific_heat().to(\"J/kgK\"))\nprint(methanol.thermal_conductivity().to(\"W/mK\"))\nprint(methanol.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"usage/components/#summary","title":"\u2705 Summary","text":"<p>Every fluid is represented as a class (e.g., Water, Acetone, Oil, Gas).</p> <p>Properties available: density(), viscosity(), specific_heat(), thermal_conductivity(), vapor_pressure(), enthalpy().</p> <p>Values can be converted to engineering units via .to(\"\"). <p>Custom overrides are supported for flexibility.</p> <p>This system supports realistic chemical &amp; process engineering workflows.</p>"},{"location":"usage/pipelines/","title":"ProcessPI - Pipeline Examples","text":"<p>This document contains worked examples using the ProcessPI pipeline engine and network module.</p>"},{"location":"usage/pipelines/#example-1-chlorine-gas-pipeline","title":"Example 1: Chlorine Gas Pipeline","text":"<p>Estimate the optimum pipe diameter for a flow of dry chlorine gas of 10 000 kg/h at 6 atm and 20\u00b0C through carbon steel pipe.</p> <pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\n\n# Define fluid and mass flow\nfluid = Chlorine(temperature=Temperature(20, \"C\"), pressure=Pressure(6, \"atm\"))\nmass_flow = MassFlowRate(10000, \"kg/h\")\n\nprint(fluid.density())\n\n# Create engine without an explicit network\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow\n)\nresults = model.run()  # auto diameter sizing\nresults.summary()\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>17.685884 kg/m3\n\u2705 Found optimal diameter based on recommended velocity.\n   Selected Diameter: 8.0 in \n   Calculated Pressure Drop: 15.43 Pa\n\u26a0\ufe0f Warning: Final velocity 4.87 m/s outside recommended range (5.00-10.00 m/s) for Chlorine.\n</code></pre>"},{"location":"usage/pipelines/#example-2-co2-transfer-pipeline","title":"Example 2: CO\u2082 Transfer Pipeline","text":"<p>Carbon dioxide is to be conveyed from the top of the stripper of ammonia plant to urea plant.</p> <pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = Carbondioxide(temperature=Temperature(60, \"C\"))\nprint(fluid.density(), fluid.viscosity().to(\"cP\"))\n\nmass_flow = MassFlowRate(1000, \"t/day\")\npipe = Pipe(name=\"Main Pipe\", length=Length(800, \"m\"), material=\"CS\")\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=8)\nvalve = Fitting(fitting_type=\"gate_valve\", quantity=1)\nnozzle = Fitting(fitting_type=\"exit\", quantity=1)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbow, valve, nozzle],\n    available_dp=Pressure(24, \"kPa\")\n)\nresults = model.run()\nmodel.summary()\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>1.609882 kg/m3 0.019523 cP (dynamic)\n\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 22.0 in (0.559 m)\n   Calculated Pressure Drop: 18414.26 Pa (allowed: 24000.00 Pa)\n\u26a0\ufe0f Warning: Final velocity 31.41 m/s outside recommended range (8.00-15.00 m/s) for Carbon Dioxide.\n</code></pre>"},{"location":"usage/pipelines/#example-3-carbon-monoxide-pipeline","title":"Example 3: Carbon Monoxide Pipeline","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = CarbonMonoxide(temperature=Temperature(50, \"C\"))\n\nmass_flow = MassFlowRate(1500, \"kg/h\")\npipe = Pipe(name=\"Main Pipe\", length=Length(4, \"km\"), material=\"CS\")\nvalves = Fitting(fitting_type=\"gate_valve\", quantity=2)\nelbows_45 = Fitting(fitting_type=\"standard_elbow_45_deg\", quantity=3)\nelbows_90 = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=6)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbows_45, elbows_90, valves],\n    available_dp=Pressure(50, \"kPa\"),\n)\nresults = model.run()\nmodel.summary()\nprint(results.total_pressure_drop.to(\"atm\"))\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 8.0 in (0.203 m)\n   Calculated Pressure Drop: 28658.34 Pa (allowed: 50000.00 Pa)\n</code></pre>"},{"location":"usage/pipelines/#example-4-water-transfer-steel-vs-concrete","title":"Example 4: Water Transfer (Steel vs Concrete)","text":"<pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\n\nfluid = Water(temperature=Temperature(40, \"C\"))\nlength = Length(3200, \"m\")\npipe = Pipe(name=\"Main Water Pipe\", length=length, material=\"Concrete\")\npipe2 = Pipe(name=\"Main Water Pipe\", length=length, material=\"CS\")\nallowable_dp = Pressure(0.58, \"atm\")\nflow_rate = MassFlowRate(100000, \"kg/h\")\n\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, pipe=pipe, mass_flow=flow_rate, available_dp=allowable_dp)\n\nmodel2 = PipelineEngine()\nmodel2.fit(fluid=fluid, pipe=pipe2, mass_flow=flow_rate, available_dp=allowable_dp)\n\nresults = model.run()\nresults2 = model2.run()\n\nmodel.summary()\nresults.detailed_summary()\nmodel2.summary()\nresults2.detailed_summary()\n</code></pre>"},{"location":"usage/pipelines/#example-5-organic-liquid-with-valves","title":"Example 5: Organic Liquid with Valves","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = OrganicLiquid(density=Density(930, \"kg/m3\"), viscosity=Viscosity(0.91, \"cP\"))\nmass_flow = MassFlowRate(5000, \"kg/h\")\n\npipe = Pipe(name=\"Main Organic Liquid Pipe\", length=Length(50, \"m\"))\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=6)\ntees = Fitting(fitting_type=\"standard_tee_through_flow\", quantity=2)\ngate_valves = Fitting(fitting_type=\"gate_valve\", quantity=2)\nglobe_valves = Fitting(fitting_type=\"globe_valve\", quantity=2)\norifice = Fitting(fitting_type=\"sudden_contraction\", quantity=1)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbow, tees, gate_valves, globe_valves, orifice],\n)\nresults = model.run()\nmodel.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"usage/pipelines/#example-6-complex-network-chilled-water-loop","title":"Example 6: Complex Network (Chilled Water Loop)","text":"<pre><code>from processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.network import PipelineNetwork\nfrom processpi.pipelines.pumps import Pump\nfrom processpi.pipelines.vessel import Vessel\nfrom processpi.pipelines.equipment import Equipment\nfrom processpi.units import *\nfrom processpi.components import Water\n\n# Build network\nnet = PipelineNetwork(\"Chilled Water Loop\")\n\n# Nodes\nnet.add_node(\"Tank\", elevation=0)\nnet.add_node(\"Pump_In\", elevation=0)\nnet.add_node(\"Pump_Out\", elevation=1)\nnet.add_node(\"Main_In\", elevation=1)\nnet.add_node(\"Main_Out\", elevation=1)\nnet.add_node(\"Return_Tank\", elevation=0)\n\npump = Pump(\"Pump1\", pump_type=\"Centrifugal\", inlet_pressure=Pressure(101325, \"Pa\"), outlet_pressure=Pressure(201325, \"Pa\"))\nvessel = Vessel(\"ExpansionTank\")\nchiller = Equipment(\"Chiller\", pressure_drop=0.2)\n\n# Tank \u2192 Pump\nnet.add_edge(Pipe(\"TankPipe\", length=5), \"Tank\", \"Pump_In\")\nnet.add_edge(pump, \"Pump_In\", \"Pump_Out\")\n\n# Pump \u2192 Main header\nnet.add_edge(Pipe(\"MainPipe\", length=15), \"Pump_Out\", \"Main_In\")\nnet.add_edge(Pipe(\"MainPipe_Out\", length=5), \"Main_In\", \"Main_Out\")\n\n# Returns \u2192 Tank\nnet.add_edge(vessel, \"Main_Out\", \"Return_Tank\")\nnet.add_edge(chiller, \"Return_Tank\", \"Pump_In\")\n\nfluid = Water(temperature=Temperature(10, \"C\"), pressure=Pressure(101325, \"Pa\"))\nflow_rate = VolumetricFlowRate(300, \"m3/h\")\n\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, flow_rate=flow_rate, network=net)\nresults = model.run()\n\nresults.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"usage/units/","title":"\ud83d\udcd0 Units Module","text":"<p>The <code>processpi.units</code> module provides a consistent framework to handle unit conversions across SI, CGS, and Imperial systems. Every physical property is represented as a Python class with built-in <code>.to()</code> methods for easy conversion.</p>"},{"location":"usage/units/#usage-pattern","title":"\ud83d\udd27 Usage Pattern","text":""},{"location":"usage/units/#from-processpiunits-import-length-length-length10-m-define-length-in-meters-printlengthtoft-convert-to-feet","title":"<pre><code>from processpi.units import Length\n\nlength = Length(10, \"m\")     # define length in meters\nprint(length.to(\"ft\"))  # convert to feet\n</code></pre>","text":""},{"location":"usage/units/#examples","title":"\ud83d\ude80 Examples","text":"<p>Below are some examples covering the most common engineering quantities. <pre><code>## 1. Velocity\n```python\nfrom processpi.units import Velocity\n\nv = Velocity(1.55, \"m/s\")\nprint(v.to(\"ft/s\"))\n</code></pre></p>"},{"location":"usage/units/#output-5085-fts","title":"Output: 5.085 ft/s","text":""},{"location":"usage/units/#2-diameter","title":"2. Diameter","text":"<pre><code>from processpi.units import Diameter\n\nd = Diameter(10, \"in\")\nprint(d.to(\"cm\"))\n# Output: 25.4 cm\n## 3. Density\n```python\nfrom processpi.units import Density\n\nden = Density(1000, \"kg/m3\")\nprint(den.to(\"g/cm3\"))\n</code></pre>"},{"location":"usage/units/#output-10-gcm3","title":"Output: 1.0 g/cm3","text":""},{"location":"usage/units/#4-heat-flux","title":"4. Heat Flux","text":"<pre><code>from processpi.units import HeatFlux\n\nq = HeatFlux(5000, \"W/m2\")\nprint(q.to(\"BTU/hft2\"))\n</code></pre>"},{"location":"usage/units/#5-heat-of-vaporization","title":"5. Heat of Vaporization","text":"<pre><code>from processpi.units import HeatOfVaporization\n\nhv = HeatOfVaporization(2260, \"J/kg\")\nprint(hv.to(\"BTU/lb\"))\n</code></pre>"},{"location":"usage/units/#6-heat-transfer-coefficient","title":"6. Heat Transfer Coefficient","text":"<pre><code>from processpi.units import HeatTransferCoefficient\n\nhtc = HeatTransferCoefficient(1000, \"W/m2K\")\nprint(htc.to(\"BTU/hft2F\"))\n</code></pre>"},{"location":"usage/units/#7-length","title":"7. Length","text":"<pre><code>from processpi.units import Length\n\nL = Length(5, \"m\")\nprint(L.to(\"ft\"))\n</code></pre>"},{"location":"usage/units/#8-mass-flow-rate","title":"8. Mass Flow Rate","text":"<pre><code>from processpi.units import MassFlowRate\n\nmf = MassFlowRate(100, \"kg/s\")\nprint(mf.to(\"lb/min\"))\n</code></pre>"},{"location":"usage/units/#9-mass","title":"9. Mass","text":"<pre><code>from processpi.units import Mass\n\nm = Mass(10, \"kg\")\nprint(m.to(\"lb\"))\n</code></pre>"},{"location":"usage/units/#10-power","title":"10. Power","text":"<pre><code>from processpi.units import Power\n\nP = Power(1000, \"W\")\nprint(P.to(\"BTU/h\"))\n</code></pre>"},{"location":"usage/units/#11-pressure","title":"11. Pressure","text":"<pre><code>from processpi.units import Pressure\n\np = Pressure(101325, \"Pa\")\nprint(p.to(\"psi\"))\n</code></pre>"},{"location":"usage/units/#12-specific-heat","title":"12. Specific Heat","text":"<pre><code>from processpi.units import SpecificHeat\n\ncp = SpecificHeat(4184, \"J/kgK\")\nprint(cp.to(\"BTU/lbF\"))\n</code></pre>"},{"location":"usage/units/#13-temperature","title":"13. Temperature","text":"<pre><code>from processpi.units import Temperature\n\nT = Temperature(100, \"C\")\nprint(T.to(\"F\"))\n</code></pre>"},{"location":"usage/units/#14-thermal-conductivity","title":"14. Thermal Conductivity","text":"<pre><code>from processpi.units import ThermalConductivity\n\nk = ThermalConductivity(200, \"W/mK\")\nprint(k.to(\"BTU/hftF\"))\n</code></pre>"},{"location":"usage/units/#15-viscosity","title":"15. Viscosity","text":"<pre><code>from processpi.units import Viscosity\n\nmu = Viscosity(1.55, \"Pa\u00b7s\")\nprint(mu.to(\"cP\"))\n</code></pre>"},{"location":"usage/units/#16-volume","title":"16. Volume","text":"<pre><code>from processpi.units import Volume\n\nV = Volume(1, \"L\")\nprint(V.to(\"m3\"))\n</code></pre>"},{"location":"usage/units/#17-volumetric-flow-rate","title":"17. Volumetric Flow Rate","text":"<pre><code>from processpi.units import VolumetricFlowRate\n\nQ = VolumetricFlowRate(3000, \"gal/min\")\nprint(Q.to(\"m3/s\"))\n</code></pre>"},{"location":"usage/units/#bonus-examples","title":"\u2728 Bonus Examples","text":""},{"location":"usage/units/#18-time","title":"18. Time","text":"<pre><code>from processpi.units import Time\n\nt = Time(3600, \"s\")\nprint(t.to(\"h\"))\n</code></pre>"},{"location":"usage/units/#output-1-h","title":"Output: 1 h","text":""},{"location":"usage/units/#19-molar-flow-rate","title":"19. Molar Flow Rate","text":"<pre><code>from processpi.units import MolarFlowRate\n\nn_dot = MolarFlowRate(100, \"mol/s\")\nprint(n_dot.to(\"kmol/h\"))\n</code></pre>"},{"location":"usage/units/#summary","title":"\u2705 Summary","text":"<p>Every unit is a class (e.g., Length, Pressure, Viscosity).</p> <p>Values can be converted with .to(\"\"). <p>The system supports engineering-friendly units across SI, Imperial, and practical process units.</p> <p>Use this module as the foundation for all your chemical/process engineering calculations in ProcessPI.</p>"}]}