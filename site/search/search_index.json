{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Process PI","text":"Process Modeling &amp; Simulation in Python             Build, simulate, and analyze chemical process systems with an open-source Python toolkit.       From pipelines and pumps to heat exchangers and mixers, Process PI provides engineers        with the tools to model, optimize, and visualize complex process networks with precision and ease.               Get Started                 Learn More"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Pipeline Networks <p>Design, simulate, and analyze fluid flow through pipes, valves, pumps, and splitters.     Optimize your process network with precise pressure drop and flow calculations.</p></p> </li> <li> <p> Heat Transfer <p>Compute heat flux, energy balances, and heat exchanger performance.     Supports a wide range of unit operations for chemical process engineering.</p></p> </li> <li> <p> Components Library <p>Access a curated database of chemicals, mixtures, and equipment properties.     Retrieve physical and thermodynamic data for accurate simulations.</p></p> </li> <li> <p> Visualization &amp; Analysis <p>Generate schematics, performance plots, and interactive charts for process optimization.     Visualize flows, temperatures, and equipment networks in a single interface.</p></p> </li> <li> <p> Process Optimization <p>Run simulations to optimize process parameters, energy efficiency, and system performance.     Explore multiple scenarios with Python scripting.</p></p> </li> <li> <p> Documentation &amp; Examples <p>Follow tutorials, examples, and API reference to get started quickly.     Step-by-step guides help engineers implement Process PI in real projects.</p></p> </li> </ul>"},{"location":"#explore","title":"Explore","text":"<ul> <li> <p> Installation     Quick setup guide to install Process PI and get started with Python.</p> </li> <li> <p> User Guide     Step-by-step tutorials and detailed documentation for all features.</p> </li> <li> <p> Examples     Real-world pipelines, heat transfer, and component simulations you can try immediately.</p> </li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<p>ProcessPI is built on top of powerful open-source libraries and AI tools:</p> <ul> <li> <p>tabulate <code>&gt;=0.9.0</code>     Table formatting for clean console and markdown output.</p> </li> <li> <p>matplotlib <code>&gt;=3.7.0</code>     Static 2D plotting for engineering charts and graphs.</p> </li> <li> <p>networkx <code>&gt;=3.1</code>     Network analysis and graph modeling for pipelines and process flows.</p> </li> <li> <p>CoolProp <code>&gt;=6.5.0</code>     Thermophysical property database for fluids and mixtures.</p> </li> <li> <p>tqdm <code>&gt;=4.65.0</code>     Progress bars for simulations and iterative computations.</p> </li> <li> <p>plotly <code>&gt;=5.18.0</code>     Interactive plots and dashboards for process visualization.</p> </li> <li> <p>ChatGPT     AI assistant for documentation, code generation, and examples.</p> </li> <li> <p>Google Gemini     AI model support for documentation and smart code assistance.</p> </li> </ul>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section documents the main classes and functions in ProcessPI.</p>"},{"location":"api_reference/#units","title":"Units","text":"<ul> <li><code>Velocity(value, unit)</code></li> <li><code>Diameter(value, unit)</code></li> <li><code>Density(value, unit)</code></li> <li><code>Viscosity(value, unit)</code></li> <li><code>Temperature(value, unit)</code></li> <li><code>Pressure(value, unit)</code></li> <li><code>SpecificHeat(value, unit)</code></li> <li><code>ThermalConductivity(value, unit)</code></li> <li><code>HeatFlux(value, unit)</code></li> <li><code>HeatTransferCoefficient(value, unit)</code></li> <li><code>HeatOfVaporization(value, unit)</code></li> <li><code>Time(value, unit)</code></li> <li><code>Mass(value, unit)</code></li> <li><code>MassFlowRate(value, unit)</code></li> <li><code>MolarFlowRate(value, unit)</code></li> <li><code>Volume(value, unit)</code></li> <li><code>VolumetricFlowRate(value, unit)</code></li> </ul>"},{"location":"api_reference/#components","title":"Components","text":"<ul> <li><code>Acetone(temperature=Temperature(...))</code></li> <li><code>Water(temperature=Temperature(...))</code></li> <li><code>Toluene(temperature=Temperature(...))</code></li> <li><code>Methanol(temperature=Temperature(...))</code></li> <li><code>OrganicLiquid(...)</code></li> <li><code>InorganicLiquid(...)</code></li> <li><code>Gas(...)</code></li> <li><code>Oil(...)</code></li> <li><code>Vapor(...)</code></li> </ul>"},{"location":"api_reference/#calculations","title":"Calculations","text":"<ul> <li><code>CalculationEngine()</code></li> <li><code>.calculate(\"fluid_velocity\", volumetric_flow_rate, diameter)</code></li> <li><code>.calculate(\"reynolds_number\", density, velocity, diameter, viscosity)</code></li> <li><code>.calculate(\"friction_factor_colebrookwhite\", diameter, roughness, reynolds_number)</code></li> <li><code>.calculate(\"pressure_drop_darcy\", friction_factor, length, diameter, density, velocity)</code></li> <li><code>.calculate(\"pressure_drop_hazen_williams\", length, flow_rate, diameter, density, coefficient)</code></li> </ul>"},{"location":"api_reference/#pipelines","title":"Pipelines","text":"<ul> <li><code>PipelineNetwork(...)</code></li> <li><code>.add_pipe(start, end, diameter, length, roughness)</code></li> <li><code>.describe()</code></li> <li><code>.schematic()</code></li> <li><code>.visualize_network()</code></li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>ProcessPI is a Python toolkit for process modeling, simulation, and analysis. It allows engineers to design and simulate pipelines, equipment, and networks with real-world accuracy.  </p> <p>We recommend Google Colab for new users because it provides a zero-setup environment, comes pre-installed with common Python packages, and allows you to run simulations instantly without installing anything locally.</p> <ul> <li> <p> Google Colab (Recommended)     Google Colab provides a cloud-based Python environment. You can try ProcessPI without worrying about local installations or dependencies. Install and import in Colab:     <pre><code>!pip install processpi\nfrom processpi.components import Water\nprint(Water().density())\n</code></pre>     Recommended for beginners, testing examples, and sharing notebooks easily.</p> </li> <li> <p> Install from PyPI     Quickest method for installing ProcessPI in your local Python environment. Works for most users:     <pre><code>pip install processpi\n</code></pre>     Best for running scripts locally without cloning the source.</p> </li> <li> <p> Development Setup     If you want to contribute or customize ProcessPI, clone the repository and install in editable mode:     <pre><code>git clone https://github.com/varma666/ProcessPi.git\ncd ProcessPi\npip install -e .\n</code></pre>     Allows live editing of code and testing changes immediately.</p> </li> <li> <p> Using a Virtual Environment (Recommended for Local Setup)     Protect your system Python and avoid dependency conflicts:     <pre><code>python -m venv .venv\n# Linux / macOS\nsource .venv/bin/activate\n# Windows\n.venv\\Scripts\\activate\npip install processpi\n</code></pre>     Recommended for stable development and isolating projects.</p> </li> <li> <p> Using in Jupyter Notebook     Jupyter Notebook allows interactive simulations. Install Jupyter if not available:     <pre><code>pip install jupyter\njupyter notebook\n</code></pre>     Then import ProcessPI:     <pre><code>from processpi.units import Length, Pressure\nprint(Length(1, \"m\").to(\"ft\"))\n</code></pre>     Ideal for step-by-step examples, tutorials, and exploring features.</p> </li> <li> <p> Verification     Ensure ProcessPI is installed correctly:     <pre><code>import processpi\nprint(\"ProcessPI version:\", processpi.__version__)\n</code></pre>     Confirms your environment is ready to run simulations.</p> </li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<ul> <li> <p> v0.2.0 \u2013 Initial Public Release (2025-09-15)     Welcome to the first public release of ProcessPI! This release introduces core pipeline, network, and calculation functionalities. Highlights: </p> <ul> <li>PipelineEngine for sizing and pressure drop calculations  </li> <li>CalculationEngine for fluid velocity, Reynolds number, friction factors, and Darcy/Hazen-Williams pressure drop  </li> <li>Components library: Water, Organic liquids, CO, CO\u2082, Chlorine  </li> <li>Pipeline fittings: elbows, tees, valves, nozzles  </li> <li>Support for branched networks, pumps, vessels, and equipment  </li> <li>Visualization of network schematics and interactive charts  </li> <li>Full documentation and example gallery  </li> </ul> </li> <li> <p> v0.1.0 \u2013 Development Previews     Early internal builds with experimental features (not public).  </p> <ul> <li>Basic pipe and flow calculations  </li> <li>Prototype network representation  </li> <li>Initial components and units  </li> </ul> </li> </ul>"},{"location":"about/contributing/","title":"Contributing to ProcessPI","text":"<p>We welcome contributions from the community! \ud83c\udf89 Help make ProcessPI more powerful and versatile by joining the development process.</p>"},{"location":"about/contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li> <p> Fork &amp; Clone     Fork the repository on GitHub and clone your fork locally to start working.</p> </li> <li> <p>Create a Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre>     Work in a separate branch for your feature or bug fix.</p> </li> <li> <p> Implement Changes     Add your code, unit tests, and documentation updates. Follow PEP8 style and type hints.</p> </li> <li> <p> Run Tests     Ensure all tests pass and your changes integrate cleanly.</p> </li> <li> <p> Push &amp; Pull Request <pre><code>git push origin feature/your-feature-name\n</code></pre>     Open a PR on the main repository with a clear description.</p> </li> <li> <p> Report Issues     Found a bug or have a feature idea? Open an issue on GitHub with steps to reproduce or a detailed proposal.</p> </li> </ul>"},{"location":"about/contributing/#problems-challenges","title":"Problems &amp; Challenges","text":"<ul> <li> <p> Test Existing Examples     Validate pipeline, network, and calculation examples by running them and reporting discrepancies.</p> </li> <li> <p> Submit Real-World Cases     Share process problems, network designs, or calculation scenarios that can enhance our test suite.</p> </li> <li> <p> Enhance Functionality     Propose improvements to the engine, add new fittings, fluids, or calculation methods.</p> </li> <li> <p> Edge Cases &amp; Validation     Test unusual pipe diameters, extreme flow conditions, or multi-branch networks and report outcomes.</p> </li> </ul>"},{"location":"about/contributing/#code-style-guidelines","title":"Code Style &amp; Guidelines","text":"<ul> <li> <p>PEP8 Compliance     Maintain consistent coding standards.</p> </li> <li> <p>Docstrings &amp; Typing     Document public functions and classes with clear docstrings; use type hints when possible.</p> </li> <li> <p>Best Practices     Keep code modular, readable, and maintainable. Write tests for new features.</p> </li> </ul> <p>Thank you for helping improve ProcessPI! \ud83d\udca1</p>"},{"location":"about/license/","title":"License","text":"<ul> <li> <p> MIT License     Copyright (c) 2025 ProcessPI</p> </li> <li> <p>Permission     Permission is hereby granted, free of charge, to any person obtaining a copy     of this software and associated documentation files (the \"Software\"), to deal     in the Software without restriction, including without limitation the rights     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     copies of the Software, and to permit persons to whom the Software is     furnished to do so, subject to the following conditions:</p> </li> <li> <p>Conditions     The above copyright notice and this permission notice shall be included in all     copies or substantial portions of the Software.</p> </li> <li> <p> Disclaimer     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     SOFTWARE.</p> </li> </ul>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>ProcessPI is evolving into a comprehensive Python-based process modeling and simulation toolkit. This roadmap highlights upcoming features, improvements, and long-term vision.</p>"},{"location":"about/roadmap/#upcoming-release-v030","title":"Upcoming Release: v0.3.0","text":"<ul> <li> <p> Expanded Equipment Library     Pumps, compressors, heat exchangers, valves, and flow control devices for complete process modeling.</p> </li> <li> <p> Advanced Multiphase Calculations     Gas-liquid flows, slug/bubbly/stratified regimes, pressure drop, and holdup predictions.</p> </li> <li> <p> Enhanced Thermophysical Integration     Full CoolProp integration for fluid properties, multi-component mixtures, and real-gas behavior.</p> </li> <li> <p> Extended CalculationEngine     New heat transfer and friction factor correlations, modular and fast computational API.</p> </li> <li> <p> Visualization Upgrades     P&amp;ID-style schematics, interactive network plotting with Plotly, flow/pressure/temperature mapping.</p> </li> <li> <p> Documentation &amp; Examples     Real-world case studies, Colab notebooks, and advanced examples for complex networks.</p> </li> </ul>"},{"location":"about/roadmap/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li> <p>Full-Fledged Process Simulation Toolkit     Open-source alternative to Aspen Plus / HYSYS with end-to-end process modeling.</p> </li> <li> <p>Web-Based GUI Dashboard     Drag-and-drop network design, interactive simulations, real-time visualization of flows and pressures.</p> </li> <li> <p>Plugin Ecosystem     Extendable with custom unit operations, property methods, and visualization modules.</p> </li> <li> <p>AI-Enhanced Assistance     Smart pipeline sizing, equipment selection, troubleshooting suggestions integration with ChatGPT and Google Gemini.</p> </li> <li> <p>Open Collaboration &amp; Industry Adoption     Community-driven libraries, templates for standard chemical processes, and verified industry case studies.</p> </li> </ul>"},{"location":"examples/","title":"Examples Gallery","text":"<p>This gallery demonstrates pipeline sizing, pressure drop, and network modeling using ProcessPI.</p>"},{"location":"examples/#pipe-lines","title":"Pipe Lines","text":"<ul> <li> <p>Chlorine Gas Optimum Diameter     Estimate optimum pipe diameter for chlorine gas at 10 000 kg/h, 6 atm, 20 \u00b0C.</p> </li> <li> <p>CO\u2082 Transfer Line     Pipeline design for CO\u2082 transfer line between plants with fittings and pressure drop limits.</p> </li> <li> <p>Carbon Monoxide Pipeline     Pipeline sizing for CO at 1500 kg/h with multiple elbows and valves.</p> </li> <li> <p>Water Transfer (Steel vs Concrete)     Compare carbon steel vs concrete pipe for water transfer over long distances.</p> </li> <li> <p>Organic Liquid Discharge     Discharge line sizing for organic liquid with complex fittings and valves.</p> </li> <li> <p>Complex Network     Demonstration of a branched pipeline network with pumps, vessels, and equipment.</p> </li> <li> <p>Chilled Water Loop     Demonstrates handling large network topologies, fixed diameters, and multiple equipment elements.</p> </li> </ul>"},{"location":"examples/#calculations","title":"Calculations","text":"<ul> <li> <p>Fluid Velocity Calculation 1     Calculate velocity of a fluid from volumetric flow and pipe diameter.</p> </li> <li> <p>Fluid Velocity Calculation 2     Alternative fluid velocity calculation with different conditions.</p> </li> <li> <p>Velocity and Reynolds Number (US Units)     Compute velocity and Reynolds number using US customary units.</p> </li> <li> <p>Velocity and Reynolds Number (Metric Units)     Compute velocity and Reynolds number using SI units.</p> </li> <li> <p>Friction Factor (Colebrook-White, US Units)     Estimate Darcy friction factor with Colebrook-White equation in US units.</p> </li> <li> <p>Darcy Pressure Drop (US Units)     Calculate pressure drop using Darcy\u2013Weisbach equation in US units.</p> </li> <li> <p>Long Pipeline Pressure Drop (Metric Units)     Pressure drop calculation for long pipelines with SI units.</p> </li> <li> <p>Hazen-Williams Pressure Drop (US Units)     Estimate pressure drop using Hazen\u2013Williams formula in US units.</p> </li> </ul>"},{"location":"examples/calculations/fluid_velocity/","title":"Fluid Velocity (US Units)","text":"<p>Problem</p> <p>Calculate the fluid velocity in a pipe given:  </p> <ul> <li>Volumetric flow rate = 3000 gal/min  </li> <li>Pipe diameter = 15.5 in  </li> </ul> <p>This demonstrates the use of the CalculationEngine for simple hydraulic calculations.</p>"},{"location":"examples/calculations/fluid_velocity/#code","title":"Code","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter\n\n# Initialize the engine\nengine = CalculationEngine()\n\n# Inputs\nvolumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.5, \"in\")\n\n# Perform calculation\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=volumetric_flow_rate,\n    diameter=diameter\n)\n\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\n</code></pre>"},{"location":"examples/calculations/fluid_velocity/#output","title":"Output","text":"<pre><code># Output\nVelocity: 5.100918717 ft/s\n</code></pre>"},{"location":"examples/calculations/fluid_velocity_2/","title":"Fluid Velocity (Metric Units)","text":"<p>Problem</p> <p>Calculate the fluid velocity in a pipe given:  </p> <ul> <li>Volumetric flow rate = 75 L/s  </li> <li>Pipe diameter = 180 mm  </li> </ul> <p>This demonstrates the use of the CalculationEngine in SI metric units.</p>"},{"location":"examples/calculations/fluid_velocity_2/#code","title":"Code","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter\n\n# Initialize the engine (reuse from Example 1)\nengine = CalculationEngine()\n\n# Inputs\nvolumetric_flow_rate = VolumetricFlowRate(75, \"L/s\")\ndiameter = Diameter(180, \"mm\")\n\n# Perform calculation\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=volumetric_flow_rate,\n    diameter=diameter\n)\n\n\nprint(f\"Velocity: {velocity}\")\n</code></pre>"},{"location":"examples/calculations/fluid_velocity_2/#output","title":"Output","text":"<pre><code># Output\nVelocity: 2.947313761 m/s\n</code></pre>"},{"location":"examples/calculations/friction_factor_cw/","title":"Friction Factor (Colebrook-White, US Units)","text":"<p>Problem</p> <p>A water flow of 3000 gal/min passes through a 15.25 in diameter pipe with an internal roughness of 0.002 in. Given fluid properties of \u03c1 = 998 kg/m\u00b3 and \u03bc = 1.0 cP, compute:</p> <ul> <li>Fluid velocity  </li> <li>Reynolds number  </li> <li>Friction factor using the Colebrook\u2013White equation</li> </ul>"},{"location":"examples/calculations/friction_factor_cw/#code","title":"Code","text":"<pre><code>from processpi.units import VolumetricFlowRate, Diameter, Density, Viscosity, Length\nfrom processpi.calculations import CalculationEngine\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define flow and pipe conditions (US Units)\nvolumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\nroughness = Length(0.002, \"in\")\n\n# Fluid properties\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\n# Velocity\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\n# Reynolds number\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\n# Friction factor (Colebrook-White)\nfriction_factor = engine.calculate(\n    \"friction_factor_colebrookwhite\",\n    diameter=diameter,\n    roughness=roughness,\n    reynolds_number=nre\n)\n\n# Display results\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\n</code></pre>"},{"location":"examples/calculations/friction_factor_cw/#output","title":"Output","text":"<pre><code># Output\nVelocity: 1.606153597 m/s\nReynolds Number: 620899.308606354 (dimensionless)\nFriction Factor: 0.012658141727742982 (dimensionless)\n</code></pre>"},{"location":"examples/calculations/long_pipe_friction_factor/","title":"Long Pipeline Pressure Drop (Metric Units)","text":"<p>Problem</p> <p>A long water pipeline transports 34,000 m\u00b3/h of liquid water. The pipe has a diameter of 2.0 m, a length of 5 km, and an absolute roughness of 0.05 mm. At 20 \u00b0C, the water has a density of 998 kg/m\u00b3 and a viscosity of 1.0 cP.  </p> <p>We want to calculate: - Flow velocity - Reynolds number - Friction factor (Colebrook\u2013White) - Pressure drop using the Darcy\u2013Weisbach equation  </p>"},{"location":"examples/calculations/long_pipe_friction_factor/#code","title":"Code","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter, Density, Viscosity, Length\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Given parameters\nvolumetric_flow_rate = VolumetricFlowRate(34000, \"m3/h\")\ndiameter = Diameter(2, \"m\")\nroughness = Length(0.05, \"mm\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\nlength = Length(5, \"km\")\n\n# Step 1: Velocity\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=volumetric_flow_rate,\n    diameter=diameter\n)\n\n# Step 2: Reynolds Number\nnre = engine.calculate(\n    \"nre\",\n    density=density,\n    velocity=velocity,\n    diameter=diameter,\n    viscosity=viscosity\n)\n\n# Step 3: Friction Factor (Colebrook-White)\nfriction_factor = engine.calculate(\n    \"friction_factor_colebrookwhite\",\n    diameter=diameter,\n    roughness=roughness,\n    reynolds_number=nre\n)\n\n# Step 4: Darcy\u2013Weisbach Pressure Drop\npressure_drop = engine.calculate(\n    \"pressure_drop_darcy\",\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\n# Results\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\nprint(f\"Pressure Drop: {pressure_drop.to('kPa')}\")\n</code></pre>"},{"location":"examples/calculations/long_pipe_friction_factor/#output","title":"Output","text":"<pre><code># Output\nVelocity: 3.006259895 m/s\nReynolds Number: 6000494.7504199995 (dimensionless)\nFriction Factor: 0.008738971889204653 (dimensionless)\nPressure Drop: 98.526701 kPa\n</code></pre>"},{"location":"examples/calculations/pressure_drop_dracy/","title":"Darcy Pressure Drop (US Units)","text":"<p>Problem </p> <p>Water flows at 3000 gal/min through a 15.25 in diameter pipe of length 1000 ft. The pipe roughness is 0.002 in, and the fluid has \u03c1 = 998 kg/m\u00b3 and \u03bc = 1.0 cP.  </p> <p>Compute the Darcy\u2013Weisbach pressure drop using the previously calculated:</p> <ul> <li>Velocity  </li> <li>Reynolds number  </li> <li>Friction factor (Colebrook\u2013White equation)  </li> </ul>"},{"location":"examples/calculations/pressure_drop_dracy/#code","title":"Code","text":"<pre><code>from processpi.units import VolumetricFlowRate, Diameter, Density, Viscosity, Length\nfrom processpi.calculations import CalculationEngine\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Flow and pipe conditions (US Units)\nvolumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\nroughness = Length(0.002, \"in\")\nlength = Length(1000, \"ft\")\n\n# Fluid properties\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\n# Velocity\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\n# Reynolds number\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\n# Friction factor (Colebrook\u2013White)\nfriction_factor = engine.calculate(\n    \"friction_factor_colebrookwhite\",\n    diameter=diameter,\n    roughness=roughness,\n    reynolds_number=nre\n)\n\n# Darcy pressure drop\npressure_drop = engine.calculate(\n    \"pressure_drop_darcy\",\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\n# Display results\n\nprint(f\"Pressure Drop: {pressure_drop.to('psi')}\")\n</code></pre>"},{"location":"examples/calculations/pressure_drop_dracy/#output","title":"Output","text":"<pre><code># Output\nPressure Drop: 1.859674 psi\n</code></pre>"},{"location":"examples/calculations/pressure_drop_hw_us/","title":"Long Pipeline Pressure Drop (Metric Units)","text":"<p>Problem</p> <p>A long water pipeline transports 34,000 m\u00b3/h of liquid water. The pipe has a diameter of 2.0 m, a length of 5 km, and an absolute roughness of 0.05 mm. At 20 \u00b0C, the water has a density of 998 kg/m\u00b3 and a viscosity of 1.0 cP.  </p> <p>We want to calculate: - Flow velocity - Reynolds number - Friction factor (Colebrook\u2013White) - Pressure drop using the Darcy\u2013Weisbach equation  </p>"},{"location":"examples/calculations/pressure_drop_hw_us/#code","title":"Code","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import *\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Given parameters\nvolumetric_flow_rate = VolumetricFlowRate(34000, \"m3/h\")\ndiameter = Diameter(2, \"m\")\nroughness = Length(0.05, \"mm\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\nlength = Length(5, \"km\")\n\n# Step 1: Velocity\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=volumetric_flow_rate,\n    diameter=diameter\n)\n\n# Step 2: Reynolds Number\nnre = engine.calculate(\n    \"nre\",\n    density=density,\n    velocity=velocity,\n    diameter=diameter,\n    viscosity=viscosity\n)\n\n# Step 3: Friction Factor (Colebrook-White)\nfriction_factor = engine.calculate(\n    \"friction_factor_colebrookwhite\",\n    diameter=diameter,\n    roughness=roughness,\n    reynolds_number=nre\n)\n\n# Step 4: Darcy\u2013Weisbach Pressure Drop\npressure_drop = engine.calculate(\n    \"pressure_drop_darcy\",\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\n# Results\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\nprint(f\"Pressure Drop: {pressure_drop.to('kPa')}\")\n</code></pre>"},{"location":"examples/calculations/pressure_drop_hw_us/#output","title":"Output","text":"<pre><code># Output\nVelocity: 3.006259895 m/s\nReynolds Number: 6000494.7504199995 (dimensionless)\nFriction Factor: 0.008738971889204653 (dimensionless)\nPressure Drop: 98.526701 kPa\n</code></pre>"},{"location":"examples/calculations/velocity_reynolds_si/","title":"Velocity and Reynolds Number (Metric Units)","text":"<p>Problem</p> <p>A pipeline carries 640 m\u00b3/h of water through a pipe with a 380 mm diameter. The water has a density of 998 kg/m\u00b3 and a kinematic viscosity of 1.0 cSt.  </p> <p>We want to calculate the fluid velocity and the Reynolds number to assess the flow regime.</p>"},{"location":"examples/calculations/velocity_reynolds_si/#code","title":"Code","text":"<pre><code>from processpi.units import *\nfrom processpi.calculations import CalculationEngine\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define flow conditions (Metric Units)\nvolumetric_flow_rate = VolumetricFlowRate(640, 'm3/h')\ndiameter = Diameter(380, 'mm')\n\n# Calculate velocity\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\n# Define fluid properties\ndensity = Density(998, 'kg/m3')\nviscosity = Viscosity(1.0, 'cSt')\n\n# Calculate Reynolds number\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\n# Display results\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"examples/calculations/velocity_reynolds_si/#output","title":"Output","text":"<pre><code># Output\nVelocity: 1.567548336 m/s\nReynolds Number: 595668.36768 (dimensionless)\n</code></pre>"},{"location":"examples/calculations/velocity_reynolds_us/","title":"Velocity and Reynolds Number (US Units)","text":"<p>Problem</p> <p>Calculate the fluid velocity and Reynolds number for a flow in US customary units:</p> <ul> <li>Volumetric flow rate = 6000 gal/min  </li> <li>Pipe diameter = 19.25 in  </li> <li>Fluid density = 998 kg/m\u00b3  </li> <li>Kinematic viscosity = 1.0 cSt  </li> </ul> <p>This demonstrates multiple property calculations in a single workflow.</p>"},{"location":"examples/calculations/velocity_reynolds_us/#code","title":"Code","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter, Density, Viscosity\n\n# Initialize the engine\nengine = CalculationEngine()\n\n# Inputs\nvolumetric_flow_rate = VolumetricFlowRate(6000, \"gal/min\")\ndiameter = Diameter(19.25, \"in\")\n\n# Velocity\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=volumetric_flow_rate,\n    diameter=diameter\n)\n\n# Reynolds number\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cSt\")\nnre = engine.calculate(\n    \"reynolds_number\",\n    density=density,\n    velocity=velocity,\n    diameter=diameter,\n    viscosity=viscosity\n)\n\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"examples/calculations/velocity_reynolds_us/#output","title":"Output","text":"<pre><code># Output\nVelocity: 6.614228284 ft/s\nReynolds Number: 985731.40506995 (dimensionless)\n</code></pre>"},{"location":"examples/pipelines/carbon_monoxide_pipeline/","title":"Carbon Monoxide Pipeline","text":"<p>Problem Design a CO pipeline with the following specifications:  </p> <ul> <li>Inlet pressure: 50 kPa(g)  </li> <li>Pipe length: 4 km  </li> <li>Flow rate: 1500 kg/h  </li> <li>Fittings: 2 gate valves, 3 \u00d7 45\u00b0 elbows, 6 \u00d7 90\u00b0 elbows  </li> </ul>"},{"location":"examples/pipelines/carbon_monoxide_pipeline/#code","title":"Code","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\n# Define fluid\nfluid = CarbonMonoxide(temperature=Temperature(50, \"C\"))\n\n# Define flow\nmass_flow = MassFlowRate(1500, \"kg/h\")\n\n# Pipe and fittings\npipe = Pipe(name=\"Main Pipe\", length=Length(4, \"km\"), material=\"CS\")\nvalves = Fitting(fitting_type=\"gate_valve\", quantity=2)\nelbows_45 = Fitting(fitting_type=\"standard_elbow_45_deg\", quantity=3)\nelbows_90 = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=6)\n\n# Build and run model\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbows_45, elbows_90, valves],\n    available_dp=Pressure(50, \"kPa\")\n)\nresults = model.run()\n\n# Summaries\nmodel.summary()\nprint(\"Pressure drop (atm):\", results.total_pressure_drop.to(\"atm\"))\nresults.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/carbon_monoxide_pipeline/#output","title":"Output","text":"<pre><code>\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 8.0 in (0.203 m)\n   Calculated Pressure Drop: 28658.34 Pa (allowed: 50000.00 Pa)\n\n# Summary\n=== Pipeline Result 1 (Main Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 8 in \nInlet Flow: 0.394 m3/s \nOutlet Flow: 0.394 m3/s \nTotal Pressure Drop: 28.66 kPa\nTotal Head Loss: 2766.55 m\nTotal Power Required: 16.15 kW\nVelocity: 12.224 m/s\nReynolds Number: 137230 (dimensionless)\nFriction Factor: 0.0182 (dimensionless)\nPressure drop (atm): 0.282836 atm\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Main Pipe) ===\n+-----------+--------+-----------------+------------+------------+-------------------+------------+\n| Name      | Type   |   Pressure Drop |   Velocity |   Reynolds |   Friction Factor | Diameter   |\n+===========+========+=================+============+============+===================+============+\n| Main Pipe | pipe   |         28658.3 |      12.22 |     137230 |            0.0182 | 8 in       |\n+-----------+--------+-----------------+------------+------------+-------------------+------------+\n</code></pre>"},{"location":"examples/pipelines/chilled_water_loop/","title":"Chilled Water Loop with Branches &amp; AHUs","text":"<p>Problem</p> <p>Design and simulate a chilled water loop with:  </p> <ul> <li>Central pump and expansion tank  </li> <li>Main distribution header  </li> <li>5 branch lines, each feeding 5 AHUs (Air Handling Units)  </li> <li>Return headers combining flow back to the tank  </li> <li>Optional chiller and expansion vessel  </li> </ul> <p>Demonstrates handling large network topologies, fixed diameters, and multiple equipment elements.</p>"},{"location":"examples/pipelines/chilled_water_loop/#code","title":"Code","text":"<pre><code>from processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.network import PipelineNetwork\nfrom processpi.pipelines.pumps import Pump\nfrom processpi.pipelines.vessel import Vessel\nfrom processpi.pipelines.equipment import Equipment\nfrom processpi.units import *\nfrom processpi.components import Water\n\n# ---------------- Create Network ----------------\nnet = PipelineNetwork(\"Chilled Water Loop\")\n\n# ---------------- Nodes ----------------\nnet.add_node(\"Tank\", elevation=0)\nnet.add_node(\"Pump_In\", elevation=0)\nnet.add_node(\"Pump_Out\", elevation=1)\nnet.add_node(\"Main_In\", elevation=1)\nnet.add_node(\"Main_Out\", elevation=1)\n\n# Branch and AHU nodes\nfor b in range(1, 6):\n    net.add_node(f\"Branch_{b}_In\", elevation=1)\n    net.add_node(f\"Branch_{b}_Out\", elevation=1)\n    for a in range(1, 6):\n        net.add_node(f\"AHU_{b}_{a}_PipeOut\", elevation=1)\n        net.add_node(f\"AHU_{b}_{a}_EqOut\", elevation=1)\n    net.add_node(f\"Return_{b}\", elevation=0)\n\nnet.add_node(\"Return_Tank\", elevation=0)\n\n# ---------------- Components ----------------\npump = Pump(\n    name=\"Pump1\",\n    pump_type=\"Centrifugal\",\n    inlet_pressure=Pressure(101325, \"Pa\"),\n    outlet_pressure=Pressure(201325, \"Pa\")\n)\n\nvessel = Vessel(\"ExpansionTank\")\nchiller = Equipment(\"Chiller\", pressure_drop=0.2)\n\n# ---------------- Build Network ----------------\n# Tank \u2192 Pump\nnet.add_edge(Pipe(\"TankPipe\", length=5), \"Tank\", \"Pump_In\")\nnet.add_edge(pump, \"Pump_In\", \"Pump_Out\")\n\n# Pump \u2192 Main header\nnet.add_edge(Pipe(\"MainPipe\", length=15), \"Pump_Out\", \"Main_In\")\nnet.add_edge(Pipe(\"MainPipe_Out\", length=5), \"Main_In\", \"Main_Out\")\n\n# Branch inlets\nfor b in range(1, 6):\n    net.add_edge(Pipe(f\"MainToBranch_{b}\", length=3), \"Main_Out\", f\"Branch_{b}_In\")\n\n# ---------------- AHU pipes (fixed diameters) ----------------\nahu_diameters = [Diameter(3, \"in\"), Diameter(4, \"in\"), Diameter(4, \"in\"),\n                 Diameter(5, \"in\"), Diameter(6, \"in\")]\nahu_flows = [VolumetricFlowRate(8, \"m3/h\"), VolumetricFlowRate(10, \"m3/h\"),\n             VolumetricFlowRate(10, \"m3/h\"), VolumetricFlowRate(12, \"m3/h\"),\n             VolumetricFlowRate(15, \"m3/h\")]\n\nfor b in range(1, 6):\n    for a in range(1, 6):\n        dia = ahu_diameters[(a - 1) % len(ahu_diameters)]\n        in_node = f\"Branch_{b}_In\" if a == 1 else f\"AHU_{b}_{a-1}_EqOut\"\n        pipe_out = f\"AHU_{b}_{a}_PipeOut\"\n        eq_out = f\"AHU_{b}_{a}_EqOut\"\n\n        # Pipe\n        net.add_edge(Pipe(f\"AHUPipe_{b}_{a}\", nominal_diameter=dia, length=5), in_node, pipe_out)\n\n        # AHU equipment\n        pd = 0.05 + 0.01 * (ahu_flows[(a - 1) % len(ahu_flows)].to(\"m3/h\").value / 10)\n        net.add_edge(Equipment(f\"AHU_{b}_{a}\", pressure_drop=pd), pipe_out, eq_out)\n\n# Branch returns\nfor b in range(1, 6):\n    last_ahu_out = f\"AHU_{b}_5_EqOut\"\n    net.add_edge(Pipe(f\"BranchReturnPipe_{b}\", length=5), last_ahu_out, f\"Return_{b}\")\n\n# Returns \u2192 Tank\nfor b in range(1, 6):\n    net.add_edge(Pipe(f\"ReturnPipe_{b}\", length=10), f\"Return_{b}\", \"Return_Tank\")\n\n# Expansion vessel &amp; chiller\nnet.add_edge(vessel, \"Main_Out\", \"Return_Tank\")\nnet.add_edge(chiller, \"Return_Tank\", \"Pump_In\")\n\n# ---------------- Fluid &amp; Flow ----------------\nfluid = Water(temperature=Temperature(10, \"C\"), pressure=Pressure(101325, \"Pa\"))\nflow_rate = VolumetricFlowRate(300, \"m3/h\")\n\n# ---------------- Engine ----------------\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, flow_rate=flow_rate, network=net)\nresults = model.run()\n\n# ---------------- Results ----------------\nresults.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/chilled_water_loop/#output","title":"Output","text":"<pre><code># Summary\n\ud83d\udd04 Auto-sizing network pipe diameters...\n\n=== Pipeline Result 1 (N/A) ===\nMode: Network\nCalculated Pipe Diameter: 10 in \nInlet Flow: 0.000 m3/s \nOutlet Flow: 0.000 m3/s \nTotal Pressure Drop: 0.00 kPa\nTotal Head Loss: 0.00 m\nTotal Power Required: 0.00 kW\nVelocity: 0.000 m/s\nReynolds Number: 0 (dimensionless)\nFriction Factor: 0.0000 (dimensionless)\n\n# Detailed Summary\n\n=== Detailed Components for Result 1 (N/A) ===\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| Name               | Type   |   Pressure Drop |   Velocity |        Reynolds |   Friction Factor | Diameter   |\n+====================+========+=================+============+=================+===================+============+\n| TankPipe           | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainPipe           | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainPipe_Out       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainToBranch_1     | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainToBranch_2     | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainToBranch_3     | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainToBranch_4     | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| MainToBranch_5     | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_1_1        | Pipe   |               0 |      17.48 |      1.0459e+06 |            0.0177 | 3 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_1_2        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_1_3        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_1_4        | Pipe   |               0 |       6.47 | 636031          |            0.0164 | 5 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_1_5        | Pipe   |               0 |       4.47 | 528719          |            0.0161 | 6 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_2_1        | Pipe   |               0 |      17.48 |      1.0459e+06 |            0.0177 | 3 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_2_2        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_2_3        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_2_4        | Pipe   |               0 |       6.47 | 636031          |            0.0164 | 5 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_2_5        | Pipe   |               0 |       4.47 | 528719          |            0.0161 | 6 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_3_1        | Pipe   |               0 |      17.48 |      1.0459e+06 |            0.0177 | 3 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_3_2        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_3_3        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_3_4        | Pipe   |               0 |       6.47 | 636031          |            0.0164 | 5 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_3_5        | Pipe   |               0 |       4.47 | 528719          |            0.0161 | 6 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_4_1        | Pipe   |               0 |      17.48 |      1.0459e+06 |            0.0177 | 3 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_4_2        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_4_3        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_4_4        | Pipe   |               0 |       6.47 | 636031          |            0.0164 | 5 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_4_5        | Pipe   |               0 |       4.47 | 528719          |            0.0161 | 6 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_5_1        | Pipe   |               0 |      17.48 |      1.0459e+06 |            0.0177 | 3 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_5_2        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_5_3        | Pipe   |               0 |      10.14 | 796438          |            0.0169 | 4 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_5_4        | Pipe   |               0 |       6.47 | 636031          |            0.0164 | 5 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| AHUPipe_5_5        | Pipe   |               0 |       4.47 | 528719          |            0.0161 | 6 in       |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| BranchReturnPipe_1 | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| BranchReturnPipe_2 | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| BranchReturnPipe_3 | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| BranchReturnPipe_4 | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| BranchReturnPipe_5 | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| ReturnPipe_1       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| ReturnPipe_2       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| ReturnPipe_3       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| ReturnPipe_4       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n| ReturnPipe_5       | Pipe   |               0 |       1.64 | 320770          |            0.0159 | 10 in      |\n+--------------------+--------+-----------------+------------+-----------------+-------------------+------------+\n</code></pre>"},{"location":"examples/pipelines/chlorine_optimum_diameter/","title":"Optimum Pipe Diameter for Chlorine Gas","text":"<p>Problem Estimate the optimum pipe diameter for a flow of dry chlorine gas of 10 000 kg/h at 6 atm(a) and 20 \u00b0C through a carbon steel pipe.</p>"},{"location":"examples/pipelines/chlorine_optimum_diameter/#code","title":"Code","text":"<pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\n\n# Define fluid and mass flow\nfluid = Chlorine(temperature=Temperature(20, \"C\"), pressure=Pressure(6, \"atm\"))\nmass_flow = MassFlowRate(10000, \"kg/h\")\n\nprint(\"Density:\", fluid.density())\n\n# Create engine without explicit network\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, mass_flow=mass_flow)\nresults = model.run()\n\nresults.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/chlorine_optimum_diameter/#output","title":"Output","text":"<pre><code># Summary\nDensity: 17.685884 kg/m3\n\u2705 Found optimal diameter based on recommended velocity.\n   Selected Diameter: 8.0 in \n   Calculated Pressure Drop: 15.43 Pa\n\u26a0\ufe0f Warning: Final velocity 4.87 m/s outside recommended range (5.00-10.00 m/s) for Chlorine.\n\n=== Pipeline Result 1 (Main Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 8 in \nInlet Flow: 0.157 m3/s \nOutlet Flow: 0.157 m3/s\nTotal Pressure Drop: 0.02 kPa\nTotal Head Loss: 0.09 m\nTotal Power Required: 0.00 kW\nVelocity: 4.867 m/s\nReynolds Number: 987160 (dimensionless)\nFriction Factor: 0.0149 (dimensionless)\n\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Main Pipe) ===\n+-----------+--------+-----------------+------------+------------+-------------------+------------+\n| Name      | Type   |   Pressure Drop |   Velocity |   Reynolds |   Friction Factor | Diameter   |\n+===========+========+=================+============+============+===================+============+\n| Main Pipe | pipe   |           15.43 |       4.87 |     987160 |            0.0149 | 8 in       |\n+-----------+--------+-----------------+------------+------------+-------------------+------------+\n</code></pre>"},{"location":"examples/pipelines/co2_transfer_line/","title":"CO\u2082 Transfer Line Between Plants","text":"<p>Problem Carbon dioxide is to be conveyed from an ammonia plant stripper to a urea plant.</p> <p>Given Data - Flow rate: 1000 t/day - Pipe length: 800 m - Inlet pressure: 24 kPa(g), outlet: atm - 8 \u00d7 90\u00b0 elbows, 1 \u00d7 gate valve, 1 \u00d7 nozzle - Temperature: 60 \u00b0C - Viscosity: 0.016 mPa\u00b7s  </p>"},{"location":"examples/pipelines/co2_transfer_line/#code","title":"Code","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\n# Define fluid\nfluid = Carbondioxide(temperature=Temperature(60, \"C\"))\nprint(\"Density:\", fluid.density(), \"Viscosity:\", fluid.viscosity().to(\"cP\"))\n\n# Define mass flow\nmass_flow = MassFlowRate(1000, \"t/day\")\n\n# Pipe and fittings\npipe = Pipe(name=\"Main Pipe\", length=Length(800, \"m\"), material=\"CS\")\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=8)\nvalve = Fitting(fitting_type=\"gate_valve\", quantity=1)\nnozzle = Fitting(fitting_type=\"exit\", quantity=1)\n\n# Pipeline engine\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbow, valve, nozzle],\n    available_dp=Pressure(24, \"kPa\")\n)\nresults = model.run()\n\n# Summaries\nmodel.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/co2_transfer_line/#output","title":"Output","text":"<pre><code>Density: 1.609882 kg/m3 Viscosity: 0.019523 cP (dynamic)\n\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 22.0 in (0.559 m)\n   Calculated Pressure Drop: 18414.26 Pa (allowed: 24000.00 Pa)\n\u26a0\ufe0f Warning: Final velocity 31.41 m/s outside recommended range (8.00-15.00 m/s) for Carbon Dioxide.\n\n# Summary\n=== Pipeline Result 1 (Main Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 22 in \nInlet Flow: 7.189 m3/s \nOutlet Flow: 7.189 m3/s\nTotal Pressure Drop: 18.41 kPa\nTotal Head Loss: 1166.38 m\nTotal Power Required: 189.12 kW\nVelocity: 31.415 m/s\nReynolds Number: 1398318 (dimensionless)\nFriction Factor: 0.0128 (dimensionless)\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Main Pipe) ===\n+-----------+--------+-----------------+------------+-------------+-------------------+------------+\n| Name      | Type   |   Pressure Drop |   Velocity |    Reynolds |   Friction Factor | Diameter   |\n+===========+========+=================+============+=============+===================+============+\n| Main Pipe | pipe   |         18414.3 |      31.41 | 1.39832e+06 |            0.0128 | 22 in      |\n+-----------+--------+-----------------+------------+-------------+-------------------+------------+\n</code></pre>"},{"location":"examples/pipelines/complex_network/","title":"Complex Network with Pumps, Vessels &amp; Equipment","text":"<p>Problem</p> <p>Build and validate a network with multiple branches, fittings, pumps, vessels, and equipment. This example demonstrates network creation, validation, and visualization of a process pipeline system.</p>"},{"location":"examples/pipelines/complex_network/#code","title":"Code","text":"<pre><code>from processpi.pipelines.network import PipelineNetwork\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.pumps import Pump\nfrom processpi.pipelines.vessel import Vessel\nfrom processpi.pipelines.equipment import Equipment\nfrom processpi.units import Diameter\n\n# Create main network\nnet = PipelineNetwork(\"MainPlantLoop\")\n\n# Define nodes\nfor node in [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"]:\n    net.add_node(node)\n\n# Define elements\npipe1 = Pipe(\"Pipe1\", nominal_diameter=100, length=10)\npipe2 = Pipe(\"Pipe2\", nominal_diameter=150, length=15)\npump1 = Pump(\"Pump1\", pump_type=\"Centrifugal\", head=20)\nvessel1 = Vessel(\"Separator1\")\nequipment1 = Equipment(\"HeatExchanger\", pressure_drop=0.5)\n\n# Connect series and branches\nnet.add_edge(pipe1, \"A\", \"B\")\nnet.add_edge(pipe2, \"B\", \"C\")\nnet.add_edge(pump1, \"C\", \"D\")\nnet.add_edge(Pipe(\"PipeBranch1\", nominal_diameter=80, length=5), \"D\", \"E\")\nnet.add_edge(Pipe(\"PipeBranch2\", nominal_diameter=120, length=8), \"D\", \"F\")\nnet.add_edge(Pipe(\"PipeEG\", nominal_diameter=100, length=12), \"E\", \"G\")\nnet.add_edge(Pipe(\"PipeFH\", nominal_diameter=100, length=12), \"F\", \"H\")\n\n# Validation, description, schematic\nnet.validate()\nprint(net.describe())\nprint(net.schematic())\nnet.visualize_network(compact=True)\n</code></pre>"},{"location":"examples/pipelines/complex_network/#output","title":"Output","text":"<pre><code>Network: MainPlantLoop (connection: series)\n  Nodes:\n    Node(name='A', elevation=0.0 m)\n    Node(name='B', elevation=0.0 m)\n    Node(name='C', elevation=0.0 m)\n    Node(name='D', elevation=0.0 m)\n    Node(name='E', elevation=0.0 m)\n    Node(name='F', elevation=0.0 m)\n    Node(name='G', elevation=0.0 m)\n    Node(name='H', elevation=0.0 m)\n  Elements:\n    Pipe: 100 mm, L=10 m, from A \u2192 B\n    Pipe: 150 mm, L=15 m, from B \u2192 C\n    Pump: Centrifugal, from C \u2192 D\n    Pipe: 80 mm, L=5 m, from D \u2192 E\n    Pipe: 120 mm, L=8 m, from D \u2192 F\n    Pipe: 100 mm, L=12 m, from E \u2192 G\n    Pipe: 100 mm, L=12 m, from F \u2192 H\n\nMainPlantLoop [series]\n  \u2502 \u2514\u25001. Pipe1\n  \u2502 \u2514\u25002. Pipe2\n  \u2502 \u2514\u25003. Pump1\n  \u2502 \u2514\u25004. PipeBranch1\n  \u2502 \u2514\u25005. PipeBranch2\n  \u2502 \u2514\u25006. PipeEG\n    \u2514\u25007. PipeFH\n</code></pre>"},{"location":"examples/pipelines/organic_liquid_discharge/","title":"Organic Liquid Discharge Line","text":"<p>Problem</p> <p>Organic liquid at 5000 kg/h, 50 \u00b0C, \u03c1 = 930 kg/m\u00b3, \u03bc = 0.91 cP. Line includes 50 m pipe, 6 elbows, 2 tees, 4 gate valves, 1 globe valve, 1 orifice meter.</p>"},{"location":"examples/pipelines/organic_liquid_discharge/#code","title":"Code","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\n# Define fluid properties\nfluid = OrganicLiquid(density=Density(930, \"kg/m3\"), viscosity=Viscosity(0.91, \"cP\"))\nmass_flow = MassFlowRate(5000, \"kg/h\")\n\n# Define pipeline\npipe = Pipe(name=\"Organic Liquid Pipe\", length=Length(50, \"m\"))\nfittings = [\n    Fitting(\"standard_elbow_90_deg\", quantity=6),\n    Fitting(\"standard_tee_through_flow\", quantity=2),\n    Fitting(\"gate_valve\", quantity=4),\n    Fitting(\"globe_valve\", quantity=1),\n    Fitting(\"sudden_contraction\", quantity=1),\n]\n\n# Build and run model\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, mass_flow=mass_flow, pipe=pipe, fittings=fittings)\nresults = model.run()\n\n# Display results\nmodel.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/organic_liquid_discharge/#output","title":"Output","text":"<pre><code>\u2705 Found optimal diameter based on recommended velocity.\n   Selected Diameter: 1.5 in \n   Calculated Pressure Drop: 27024.74 Pa\n\u26a0\ufe0f Warning: Final velocity 1.14 m/s outside recommended range (1.80-2.00 m/s) for Organic Liquid.\n\n# Summary\n=== Pipeline Result 1 (Organic Liquid Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 1.5 in \nInlet Flow: 0.001 m3/s \nOutlet Flow: 0.001 m3/s \nTotal Pressure Drop: 27.02 kPa\nTotal Head Loss: 2.96 m\nTotal Power Required: 0.06 kW\nVelocity: 1.139 m/s\nReynolds Number: 47546 (dimensionless)\nFriction Factor: 0.0245 (dimensionless)\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Organic Liquid Pipe) ===\n+---------------------+--------+-----------------+------------+------------+-------------------+------------+\n| Name                | Type   |   Pressure Drop |   Velocity |   Reynolds |   Friction Factor | Diameter   |\n+=====================+========+=================+============+============+===================+============+\n| Organic Liquid Pipe | pipe   |         27024.7 |       1.14 |    47545.9 |            0.0245 | 1.5 in     |\n+---------------------+--------+-----------------+------------+------------+-------------------+------------+\n</code></pre>"},{"location":"examples/pipelines/water_transfer_steel_vs_concrete/","title":"Water Transfer (Steel vs. Concrete Pipe)","text":"<p>Problem Transfer 100 000 kg/h of water at 40 \u00b0C from a canal to a reservoir.  </p> <ul> <li>Static head available: 6 m (0.58 atm)  </li> <li>Compare pipeline performance for carbon steel vs concrete pipe  </li> <li>Pipe length: 3200 m  </li> </ul>"},{"location":"examples/pipelines/water_transfer_steel_vs_concrete/#code","title":"Code","text":"<pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\n\n# Define fluid and flow\nfluid = Water(temperature=Temperature(40, \"C\"))\nflow_rate = MassFlowRate(100000, \"kg/h\")\nallowable_dp = Pressure(0.58, \"atm\")\n\n# Define pipes\npipe_cs = Pipe(name=\"Steel Pipe\", length=Length(3200, \"m\"), material=\"CS\")\npipe_concrete = Pipe(name=\"Concrete Pipe\", length=Length(3200, \"m\"), material=\"Concrete\")\n\n# Carbon steel model\nmodel_cs = PipelineEngine()\nmodel_cs.fit(fluid=fluid, pipe=pipe_cs, mass_flow=flow_rate, available_dp=allowable_dp)\n\n# Concrete model\nmodel_concrete = PipelineEngine()\nmodel_concrete.fit(fluid=fluid, pipe=pipe_concrete, mass_flow=flow_rate, available_dp=allowable_dp)\n\n# Run simulations\nresults_cs = model_cs.run()\nresults_concrete = model_concrete.run()\n\n# Summaries\nmodel_cs.summary()\nresults_cs.detailed_summary()\n\nmodel_concrete.summary()\nresults_concrete.detailed_summary()\n</code></pre>"},{"location":"examples/pipelines/water_transfer_steel_vs_concrete/#output","title":"Output","text":"<pre><code>\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 10.0 in (0.254 m)\n   Calculated Pressure Drop: 31967.63 Pa (allowed: 58768.50 Pa)\n\u26a0\ufe0f Warning: Final velocity 0.55 m/s outside recommended range (1.00-2.50 m/s) for Water.\n\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 10.0 in (0.254 m)\n   Calculated Pressure Drop: 41071.98 Pa (allowed: 58768.50 Pa)\n\u26a0\ufe0f Warning: Final velocity 0.55 m/s outside recommended range (1.00-2.50 m/s) for Water.\n\n# Summary\n=== Pipeline Result 1 (Steel Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 10 in\nInlet Flow: 0.028 m3/s\nOutlet Flow: 0.028 m3/s\nTotal Pressure Drop: 31.97 kPa\nTotal Head Loss: 3.30 m\nTotal Power Required: 1.28 kW\nVelocity: 0.552 m/s\nReynolds Number: 207071 (dimensionless)\nFriction Factor: 0.0169 (dimensionless)\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Steel Pipe) ===\n+------------+--------+-----------------+------------+------------+-------------------+------------+\n| Name       | Type   |   Pressure Drop |   Velocity |   Reynolds |   Friction Factor | Diameter   |\n+============+========+=================+============+============+===================+============+\n| Steel Pipe | pipe   |         31967.6 |       0.55 |     207071 |            0.0169 | 10 in      |\n+------------+--------+-----------------+------------+------------+-------------------+------------+\n\n# Summary\n=== Pipeline Result 1 (Concrete Pipe) ===\nMode: Single_pipe\nCalculated Pipe Diameter: 10 in\nInlet Flow: 0.028 m3/s\nOutlet Flow: 0.028 m3/s\nTotal Pressure Drop: 41.07 kPa\nTotal Head Loss: 4.24 m\nTotal Power Required: 1.65 kW\nVelocity: 0.552 m/s\nReynolds Number: 207071 (dimensionless)\nFriction Factor: 0.0217 (dimensionless)\n\n# Detailed Summary\n=== Detailed Components for Result 1 (Concrete Pipe) ===\n+---------------+--------+-----------------+------------+------------+-------------------+------------+\n| Name          | Type   |   Pressure Drop |   Velocity |   Reynolds |   Friction Factor | Diameter   |\n+===============+========+=================+============+============+===================+============+\n| Concrete Pipe | pipe   |           41072 |       0.55 |     207071 |            0.0217 | 10 in      |\n+---------------+--------+-----------------+------------+------------+-------------------+------------+\n</code></pre>"},{"location":"user-guide/features/","title":"Features","text":"<p>Process PI is built around a modular architecture that covers a wide range of process engineering tasks. Here\u2019s what you can do with it:</p>"},{"location":"user-guide/features/#units-conversions","title":"\ud83d\udd22 Units &amp; Conversions","text":"<ul> <li>Consistent SI and Imperial units support.  </li> <li>Built-in converters for length, pressure, temperature, time, mass, and more.  </li> <li>Error-free calculations with automatic unit checking.</li> </ul>"},{"location":"user-guide/features/#components-properties","title":"\ud83e\uddea Components &amp; Properties","text":"<ul> <li>Library of chemical components (e.g., Acetic Acid, Water, Hydrocarbons).  </li> <li>Physical and thermodynamic properties:</li> <li>Density, viscosity, heat capacity.  </li> <li>Phase change data.  </li> <li>Correlations for engineering use.</li> </ul>"},{"location":"user-guide/features/#pipelines-networks","title":"\ud83d\udd04 Pipelines &amp; Networks","text":"<ul> <li>Pressure drop calculations across pipes.  </li> <li>Pipeline network solver with flow distribution.  </li> <li>Ready for integration with pumps, valves, and control elements.</li> </ul>"},{"location":"user-guide/features/#heat-transfer","title":"\ud83c\udf21\ufe0f Heat Transfer","text":"<ul> <li>Heat flux, thermal conductivity, and temperature profiles.  </li> <li>Support for common heat exchanger calculations.  </li> <li>Extendable to advanced heat transfer modules.</li> </ul>"},{"location":"user-guide/features/#examples-workflows","title":"\ud83d\udcca Examples &amp; Workflows","text":"<ul> <li>Worked examples for pipelines, pumps, and heat flux.  </li> <li>Designed to be Jupyter-friendly for teaching and research.  </li> <li>API reference for advanced customizations.</li> </ul>"},{"location":"user-guide/features/#extensibility","title":"\ud83d\udee0\ufe0f Extensibility","text":"<ul> <li>Add your own components with property data.  </li> <li>Define custom equipment models.  </li> <li>Flexible enough to plug into larger simulation frameworks.</li> </ul> <p>\ud83d\udc49 Browse the Examples to see ProcessPI in action.</p>"},{"location":"user-guide/introduction/","title":"Introduction","text":"<p>Welcome to ProcessPI \u2014 an open-source Python library for chemical and process engineering. Our goal is to provide engineers, researchers, and students with intuitive, reliable, and extensible tools for modeling, simulation, and design.</p> <p>Process PI brings together a collection of units, components, pipelines, and calculation utilities into a consistent and easy-to-use framework. It is designed to be lightweight enough for quick prototyping, yet powerful enough for industrial applications.</p>"},{"location":"user-guide/introduction/#why-process-pi","title":"Why Process PI?","text":"<ul> <li>\ud83c\udf10 Unified platform for physical properties, process units, and engineering calculations.  </li> <li>\u26a1 Fast and accurate \u2014 validated against standard engineering correlations and methods.  </li> <li>\ud83e\udde9 Modular design lets you extend with custom units and property models.  </li> <li>\ud83d\udce6 Open source &amp; community-driven, ensuring transparency and continuous improvement.  </li> </ul>"},{"location":"user-guide/introduction/#getting-started","title":"Getting Started","text":"<p>To install ProcessPI:</p> <pre><code>pip install processpi\nimport processpi\nprint(\"ProcessPI ready!\", processpi.__version__)\n</code></pre>"},{"location":"user-guide/calculations/calculation_engine/","title":"ProcessPI CalculationEngine","text":"<p>The <code>CalculationEngine</code> module acts as the central hub for performing calculations in the ProcessPI library. It provides a unified interface to execute any registered calculation by name, without needing to directly import or instantiate each calculation class.</p> <p>Class: <code>CalculationEngine</code></p> <p>The <code>CalculationEngine</code> class maintains a registry of calculation classes and provides methods to register new calculations or execute existing ones dynamically. It is the main entry point for performing calculations across multiple domains, including fluids, heat transfer, mass transfer, thermodynamics, and reaction engineering.</p>"},{"location":"user-guide/calculations/calculation_engine/#constructor","title":"Constructor","text":"<pre><code>CalculationEngine()\n</code></pre> <p>Description: Initializes a new <code>CalculationEngine</code> instance and loads the default calculations into the registry.</p> <p>Attributes:</p> Attribute Type Description <code>registry</code> <code>Dict[str, Type]</code> Maps calculation names and aliases to their corresponding calculation classes."},{"location":"user-guide/calculations/calculation_engine/#methods","title":"Methods","text":"<p><code>_load_default_calculations()</code></p> <pre><code>_load_default_calculations()\n</code></pre> <p>Description: Private method that populates the registry with the default set of calculation classes and their aliases. Called automatically during initialization.</p> <p><code>register_calculation(name: str, calc_class: Type)</code></p> <pre><code>register_calculation(name: str, calc_class: Type)\n</code></pre> <p>Description: Registers a new calculation dynamically, allowing the engine to be extended at runtime.</p> <p>Parameters:</p> Parameter Type Description <code>name</code> <code>str</code> String name or alias for the calculation. <code>calc_class</code> <code>Type</code> The calculation class to register. <p>Example:</p> <pre><code>from processpi.calculations import FluidVelocity\n\nengine = CalculationEngine()\nengine.register_calculation(\"fluid_velocity\", FluidVelocity)\n</code></pre> <p><code>calculate(name: str, **kwargs) -&gt; Any</code></p> <pre><code>calculate(name: str, **kwargs) -&gt; Any\n</code></pre> <p>Description: Executes a calculation by its registered name. Instantiates the class with the provided keyword arguments and returns the result.</p> <p>Parameters:</p> Parameter Type Description <code>name</code> <code>str</code> Name of the registered calculation. <code>**kwargs</code> <code>Any</code> Inputs to pass to the calculation class. <p>Returns: <code>Any</code> \u2014 Result from the calculation class.</p> <p>Raises:</p> Exception Condition <code>ValueError</code> If the calculation name is not found in the registry."},{"location":"user-guide/calculations/calculation_engine/#example","title":"Example","text":"<pre><code>from processpi.units import VolumetricFlowRate, Diameter\n\nengine = CalculationEngine()\nvelocity = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=VolumetricFlowRate(3000, \"gal/min\"),\n    diameter=Diameter(15.5, \"in\")\n)\n\nprint(velocity)\n</code></pre>"},{"location":"user-guide/calculations/calculation_engine/#default-registered-calculations","title":"Default Registered Calculations","text":"Name / Alias Class <code>fluid_velocity</code>, <code>velocity</code>, <code>v</code>, <code>volumetric_flow_rate</code> <code>FluidVelocity</code> <code>nre</code>, <code>reynolds_number</code>, <code>re</code>, <code>reynoldsnumber</code> <code>ReynoldsNumber</code> <code>colebrook_white</code>, <code>friction_factor_colebrookwhite</code>, <code>friction_factor</code>, <code>ff</code> <code>ColebrookWhite</code> <code>pressure_drop_darcy</code>, <code>pd</code>, <code>pressure_drop</code> <code>PressureDropDarcy</code> <code>pressure_drop_fanning</code> <code>PressureDropFanning</code> <code>pressure_drop_hazen_williams</code> <code>PressureDropHazenWilliams</code> <p>Additional calculations can be registered dynamically as needed.</p>"},{"location":"user-guide/calculations/calculation_engine/#summary","title":"Summary","text":"<p>The <code>CalculationEngine</code> provides:</p> <ul> <li>Centralized API for ProcessPI calculations.</li> <li>Dynamic registry for extension and alias support.</li> <li>Consistent interface for multiple engineering domains: fluids, heat transfer, mass transfer, thermodynamics, and reaction engineering.</li> </ul>"},{"location":"user-guide/calculations/calculations/","title":"ProcessPI Calculations Overview","text":"<p>The ProcessPI <code>CalculationEngine</code> is a comprehensive tool designed for chemical and process engineering calculations. It supports multiple unit systems, handles unit conversions automatically, and provides robust methods for solving a wide range of engineering problems. The engine is modular, allowing computations for individual properties or complex sequences of calculations.</p>"},{"location":"user-guide/calculations/calculations/#capabilities","title":"Capabilities","text":""},{"location":"user-guide/calculations/calculations/#1-fluids","title":"1. Fluids","text":"<ul> <li>Calculate fluid velocities, flow rates, and volumetric/mass flow.</li> <li>Determine Reynolds number and flow regime.</li> <li>Compute friction factors using Colebrook-White, Moody, and other correlations.</li> <li>Evaluate pressure drops in pipelines using Darcy-Weisbach, Hazen-Williams, or custom methods.</li> <li>Analyze complex pipeline networks and branching systems.</li> </ul>"},{"location":"user-guide/calculations/calculations/#2-heat-transfer","title":"2. Heat Transfer","text":"<ul> <li>Evaluate conductive, convective, and radiative heat transfer.</li> <li>Calculate heat fluxes, temperature profiles, and overall heat transfer coefficients.</li> <li>Support for single-phase and multiphase heat exchange calculations.</li> <li>Handle unit conversions for temperature, heat flux, and thermal conductivity.</li> </ul>"},{"location":"user-guide/calculations/calculations/#3-mass-transfer","title":"3. Mass Transfer","text":"<ul> <li>Calculate mass transfer rates in gas-liquid, liquid-liquid, and solid-liquid systems.</li> <li>Determine mass transfer coefficients, Sherwood number, and related dimensionless groups.</li> <li>Model absorption, stripping, distillation, and extraction processes.</li> <li>Include effects of diffusion, convective mass transfer, and reaction-limited scenarios.</li> </ul>"},{"location":"user-guide/calculations/calculations/#4-thermodynamics","title":"4. Thermodynamics","text":"<ul> <li>Compute thermodynamic properties: enthalpy, entropy, Gibbs free energy, and specific heats.</li> <li>Evaluate phase equilibria, vapor-liquid equilibrium (VLE), and mixture properties.</li> <li>Support ideal and non-ideal solutions, using activity coefficients and equations of state.</li> <li>Perform energy balances for closed and open systems.</li> </ul>"},{"location":"user-guide/calculations/calculations/#5-reaction-engineering","title":"5. Reaction Engineering","text":"<ul> <li>Model reaction rates, conversion, and yield for batch, CSTR, and PFR reactors.</li> <li>Include homogeneous and heterogeneous reaction kinetics.</li> <li>Evaluate reactor sizing, residence time, and temperature effects.</li> <li>Integrate with heat and mass transfer for coupled process simulations.</li> </ul>"},{"location":"user-guide/calculations/calculations/#key-features","title":"Key Features","text":"<ul> <li>Automatic handling of US and Metric units.</li> <li>Modular design for step-by-step or sequence-based calculations.</li> <li>Compatible with pipeline design, hydraulic analysis, heat exchangers, and reactor systems.</li> <li>Suitable for educational, industrial, and research applications.</li> </ul> <p>Note: Detailed usage examples for each of these calculation types are provided in the corresponding sub-sections of this document.</p>"},{"location":"user-guide/calculations/comming_soon/","title":"Coming Soon \ud83d\udea7","text":"<p>Welcome to ProcessPI!  </p> <p>This section is currently under development and will include exciting new calculations and features coming in future releases.</p>"},{"location":"user-guide/calculations/comming_soon/#what-to-expect","title":"\ud83d\udd39 What to Expect","text":"<ul> <li>Additional fluid dynamics calculations  </li> <li>Heat transfer and thermodynamics modules  </li> <li>Pipe network analysis and optimization tools </li> <li>User-friendly examples with the <code>CalculationEngine</code> </li> </ul> <p>Stay tuned! We are continuously adding more capabilities to ProcessPI to make process engineering calculations easier, faster, and more accurate.</p>"},{"location":"user-guide/calculations/comming_soon/#stay-updated","title":"\ud83d\udce3 Stay Updated","text":"<p>Follow our updates on:</p> <ul> <li>GitHub: https://github.com/varma666/ProcessPi </li> <li>Official Website: https://processpi.org </li> </ul> <p>New modules will be released soon. Keep an eye on this section for the latest additions.</p>"},{"location":"user-guide/calculations/comming_soon/#feedback","title":"\u26a1 Feedback","text":"<p>Have ideas or suggestions for new calculations? Reach out to us via GitHub Issues or Discussions. We value community contributions and feedback!</p>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/","title":"Class: <code>TypeOfFlow</code>","text":"<p>The <code>TypeOfFlow</code> class determines the type of fluid flow based on the Reynolds number (Re). It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#description","title":"\ud83d\udcd6 Description","text":"<p>The flow regime describes how fluid moves through a pipe or channel. It is classified into Laminar, Transitional, or Turbulent flow, depending on the Reynolds number.  </p> <ul> <li>Laminar Flow \u2192 Smooth, orderly flow with little mixing (<code>Re &lt; 2000</code>)  </li> <li>Transitional Flow \u2192 Unstable regime, switching between laminar &amp; turbulent (<code>2000 \u2264 Re \u2264 4000</code>)  </li> <li>Turbulent Flow \u2192 Chaotic, highly mixed flow (<code>Re &gt; 4000</code>)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#formula-criteria","title":"\ud83d\udcca Formula / Criteria","text":"<p>The classification is based on the Reynolds number:</p> \\[ Re = \\frac{\\rho \\cdot v \\cdot D}{\\mu} \\] <p>Where:</p> Symbol Description Units \\( Re \\) Reynolds number \u2013 (dimensionless) \\( \\rho \\) Fluid density kg/m\u00b3 \\( v \\) Fluid velocity m/s \\( D \\) Pipe diameter m \\( \\mu \\) Dynamic viscosity Pa\u00b7s"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>reynolds_number</code> \u2192 Reynolds number (dimensionless)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#output","title":"\ud83d\udce4 Output","text":"<p>Returns a <code>StringUnit</code> object containing the determined flow type: - <code>\"Laminar\"</code> - <code>\"Transitional\"</code> - <code>\"Turbulent\"</code> </p>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Ensures the required input <code>reynolds_number</code> is provided. Raises <code>ValueError</code> if missing.</p> <p><code>calculate()</code> Classifies the flow regime based on Reynolds number:  </p> <ul> <li>If <code>Re &lt; 2000</code> \u2192 <code>\"Laminar\"</code> </li> <li>If <code>2000 \u2264 Re \u2264 4000</code> \u2192 <code>\"Transitional\"</code> </li> <li>If <code>Re &gt; 4000</code> \u2192 <code>\"Turbulent\"</code> </li> </ul> <p>Returns: <code>StringUnit</code>: The computed flow type.</p>"},{"location":"user-guide/calculations/fluid_mechanics/flow_regime/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>TypeOfFlow</code></p> <pre><code>from processpi.calculations import TypeOfFlow\nfrom processpi.units import Dimensionless\n\n# Example Reynolds number\nRe = Dimensionless(3500)\n\n# Create calculation instance\nflow_calc = TypeOfFlow(reynolds_number=Re)\n\n# Perform calculation\nflow_type = flow_calc.calculate()\n\nprint(f\"Flow Type: {flow_type}\")\n</code></pre> <p>**Using the <code>CalculationEngine</code></p> <pre><code>from processpi.engine import CalculationEngine\nfrom processpi.units import Dimensionless\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Example Reynolds number\nRe = Dimensionless(3500)\n\n# Perform flow type classification using the engine\nflow_type = engine.calculate(\n    \"type_of_flow\",\n    reynolds_number=Re\n)\n\nprint(f\"Flow Type (via Engine): {flow_type}\")\n</code></pre>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/","title":"Class: <code>ReynoldsNumber</code>","text":"<p>The <code>ReynoldsNumber</code> class calculates the Reynolds number (Re) for fluid flow inside a pipe. It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#description","title":"\ud83d\udcd6 Description","text":"<p>The Reynolds number is a dimensionless quantity that predicts fluid flow behavior by comparing inertial forces to viscous forces.  </p> <ul> <li>Laminar flow \u2192 occurs at low Re.  </li> <li>Turbulent flow \u2192 occurs at high Re.  </li> </ul> <p>This class supports calculations using either dynamic viscosity (\u03bc) or kinematic viscosity (\u03bd).</p>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#variables","title":"\ud83d\udcca Variables","text":"Symbol Description Units \u03c1 Fluid density kg/m\u00b3 v Fluid velocity m/s D Pipe diameter m \u03bc Dynamic viscosity Pa\u00b7s \u03bd Kinematic viscosity m\u00b2/s"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>density</code> \u2192 Fluid density  </li> <li><code>velocity</code> \u2192 Fluid velocity  </li> <li><code>diameter</code> \u2192 Pipe internal diameter  </li> <li><code>viscosity</code> \u2192 Fluid viscosity (dynamic or kinematic)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#output","title":"\ud83d\udce4 Output","text":"<ul> <li>Returns a <code>Dimensionless</code> object containing the Reynolds number value.</li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Validates that all required inputs (<code>density</code>, <code>velocity</code>, <code>diameter</code>, <code>viscosity</code>) are provided. Raises <code>ValueError</code> if any input is missing.</p> <p><code>calculate()</code> Performs the Reynolds number calculation:</p> <ul> <li>If dynamic viscosity is provided \u2192 uses:</li> </ul> \\[ Re = \\frac{\\rho \\cdot v \\cdot D}{\\mu} \\] <ul> <li>If kinematic viscosity is provided \u2192 uses:</li> </ul> \\[ Re = \\frac{v \\cdot D}{\\nu} \\] <p>Returns: - <code>Dimensionless</code>: The computed Reynolds number.</p>"},{"location":"user-guide/calculations/fluid_mechanics/reynolds_number/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>ReynoldsNumber</code></p> <pre><code>from processpi.calculations.fluids.reynolds_number import ReynoldsNumber\nfrom processpi.units import Density, Velocity, Diameter, Viscosity\n\n# Define fluid properties\ndensity = Density(998, \"kg/m3\")          # Water density\nvelocity = Velocity(2.5, \"m/s\")          # Flow velocity\ndiameter = Diameter(0.1, \"m\")            # Pipe diameter\nviscosity = Viscosity(1.0, \"cP\")         # Dynamic viscosity\n\n# Create calculation instance\nre_calc = ReynoldsNumber(\n    density=density,\n    velocity=velocity,\n    diameter=diameter,\n    viscosity=viscosity\n)\n\n# Perform calculation\nRe = re_calc.calculate()\n\nprint(f\"Reynolds Number: {Re}\")\n</code></pre> <p>Using the <code>CalculationEngine</code></p> <pre><code>from processpi.engine.calculation_engine import CalculationEngine\nfrom processpi.units import Density, Velocity, Diameter, Viscosity\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define fluid properties\ndensity = Density(998, \"kg/m3\")          # Water density\nvelocity = Velocity(2.5, \"m/s\")          # Flow velocity\ndiameter = Diameter(0.1, \"m\")            # Pipe diameter\nviscosity = Viscosity(1.0, \"cP\")         # Dynamic viscosity\n\n# Perform Reynolds number calculation using the engine\nRe = engine.calculate(\n    \"reynolds_number\",\n    density=density,\n    velocity=velocity,\n    diameter=diameter,\n    viscosity=viscosity\n)\n\nprint(f\"Reynolds Number (via Engine): {Re}\")\n</code></pre>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/","title":"Class: <code>FluidVelocity</code>","text":"<p>The <code>FluidVelocity</code> class calculates the average fluid velocity (v) in a circular pipe. It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#description","title":"\ud83d\udcd6 Description","text":"<p>The fluid velocity determines how fast a fluid moves through a pipe. It is calculated from the volumetric flow rate and the cross-sectional area of the pipe.  </p> <p>This calculation is fundamental in fluid dynamics and is used in many pressure drop and flow analyses.</p>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#formula","title":"\ud83d\udcca Formula","text":"\\[ v = \\frac{Q}{A} = \\frac{4 \\cdot Q}{\\pi \\cdot D^2} \\] <p>Where:</p> Symbol Description Units \\( v \\) Fluid velocity m/s \\( Q \\) Volumetric flow rate m\u00b3/s \\( A \\) Cross-sectional area of pipe m\u00b2 \\( D \\) Pipe diameter m"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>volumetric_flow_rate</code> \u2192 Volumetric flow rate (m\u00b3/s)  </li> <li><code>diameter</code> \u2192 Pipe internal diameter (m)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#output","title":"\ud83d\udce4 Output","text":"<p>Returns a <code>Velocity</code> object containing the fluid velocity in meters per second (m/s).</p>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Ensures the required inputs (<code>volumetric_flow_rate</code>, <code>diameter</code>) are provided. Raises <code>ValueError</code> if any are missing.</p> <p><code>calculate()</code> Performs the fluid velocity calculation:</p> <ol> <li>Computes the cross-sectional area of the pipe: \\( A = \\pi \\cdot D^2 / 4 \\) </li> <li>Calculates the average fluid velocity: \\( v = Q / A \\) </li> </ol> <p>Returns: <code>Velocity</code>: The computed fluid velocity in m/s.</p>"},{"location":"user-guide/calculations/fluid_mechanics/velocity/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>FluidVelocity</code></p> <pre><code>from processpi.calculations import FluidVelocity\nfrom processpi.units import Velocity, FlowRate, Diameter\n\n# Define pipe and flow properties\nQ = FlowRate(0.05, \"m3/s\")   # Volumetric flow rate\nD = Diameter(0.1, \"m\")       # Pipe diameter\n\n# Create calculation instance\nvelocity_calc = FluidVelocity(\n    volumetric_flow_rate=Q,\n    diameter=D\n)\n\n# Perform calculation\nv = velocity_calc.calculate()\n\nprint(f\"Fluid Velocity: {v}\")\n</code></pre> <p>**Using the <code>CalculationEngine</code> <pre><code>from processpi.engine import CalculationEngine\nfrom processpi.units import FlowRate, Diameter\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define pipe and flow properties\nQ = FlowRate(0.05, \"m3/s\")\nD = Diameter(0.1, \"m\")\n\n# Perform fluid velocity calculation using the engine\nv = engine.calculate(\n    \"fluid_velocity\",\n    volumetric_flow_rate=Q,\n    diameter=D\n)\n\nprint(f\"Fluid Velocity (via Engine): {v}\")\n</code></pre></p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/","title":"Class: <code>PressureDropDarcy</code>","text":"<p>The <code>PressureDropDarcy</code> class calculates the pressure drop (\u0394P) in a pipe using the Darcy\u2013Weisbach equation. It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#description","title":"\ud83d\udcd6 Description","text":"<p>The Darcy\u2013Weisbach equation is a fundamental relation in fluid dynamics for estimating pressure loss due to friction in pipes. It is valid for both laminar and turbulent flows, making it more versatile than empirical formulas like Hazen\u2013Williams.  </p> <p>This method requires knowledge of the Darcy friction factor, which may be obtained from correlations such as Moody chart or the Colebrook\u2013White equation.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#formula","title":"\ud83d\udcca Formula","text":""},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#pressure-drop","title":"Pressure Drop:","text":"\\[ \\Delta P = f \\cdot \\frac{L}{D} \\cdot \\frac{\\rho \\cdot v^2}{2} \\] <p>Where:</p> Symbol Description Units \\( \\Delta P \\) Pressure drop Pa \\( f \\) Darcy friction factor \u2013 \\( L \\) Pipe length m \\( D \\) Pipe diameter m \\( \\rho \\) Fluid density kg/m\u00b3 \\( v \\) Fluid velocity m/s"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>friction_factor</code> \u2192 Darcy friction factor (dimensionless)  </li> <li><code>length</code> \u2192 Pipe length (m)  </li> <li><code>diameter</code> \u2192 Pipe internal diameter (m)  </li> <li><code>density</code> \u2192 Fluid density (kg/m\u00b3)  </li> <li><code>velocity</code> \u2192 Fluid velocity (m/s)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#output","title":"\ud83d\udce4 Output","text":"<p>Returns a <code>Pressure</code> object containing the pressure drop in Pascals (Pa).</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Ensures all required inputs (<code>friction_factor</code>, <code>length</code>, <code>diameter</code>, <code>density</code>, <code>velocity</code>) are provided. Raises <code>ValueError</code> if any are missing.</p> <p><code>calculate()</code> Performs the Darcy\u2013Weisbach pressure drop calculation:</p> <ol> <li>Retrieves the inputs  </li> <li>Applies the formula  </li> <li>Returns the result as a <code>Pressure</code> object  </li> </ol> <p>Returns: <code>Pressure</code>: The computed pressure drop in Pascals.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/darcy_weisbach/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>PressureDropDarcy</code></p> <pre><code>from processpi.calculations import PressureDropDarcy\nfrom processpi.units import Pressure, Length, Diameter, Density, Velocity, Dimensionless\n\n# Define pipe and fluid properties\nfriction_factor = Dimensionless(0.02)     # Example Darcy friction factor\nlength = Length(100, \"m\")                 # Pipe length\ndiameter = Diameter(0.15, \"m\")            # Pipe diameter\ndensity = Density(998, \"kg/m3\")           # Water density\nvelocity = Velocity(2.5, \"m/s\")           # Fluid velocity\n\n# Create calculation instance\npd_calc = PressureDropDarcy(\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\n# Perform calculation\ndeltaP = pd_calc.calculate()\n\nprint(f\"Pressure Drop (Darcy\u2013Weisbach): {deltaP}\")\n</code></pre> <p>**Using the <code>CalculationEngine</code> <pre><code>from processpi.engine import CalculationEngine\nfrom processpi.units import Pressure, Length, Diameter, Density, Velocity, Dimensionless\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define pipe and fluid properties\nfriction_factor = Dimensionless(0.02)\nlength = Length(100, \"m\")\ndiameter = Diameter(0.15, \"m\")\ndensity = Density(998, \"kg/m3\")\nvelocity = Velocity(2.5, \"m/s\")\n\n# Perform Darcy\u2013Weisbach pressure drop calculation using the engine\ndeltaP = engine.calculate(\n    \"pressure_drop_darcy\",\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\nprint(f\"Pressure Drop (via Engine): {deltaP}\")\n</code></pre></p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/","title":"Class: <code>PressureDropFanning</code>","text":"<p>The <code>PressureDropFanning</code> class calculates the pressure drop (\u0394P) in a pipe using the Fanning equation. It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#description","title":"\ud83d\udcd6 Description","text":"<p>The Fanning friction factor is a dimensionless number that relates the shear stress at the pipe wall to the kinetic energy of the fluid. The Fanning equation is widely used in chemical and process engineering to calculate pipe pressure drops.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#formula","title":"\ud83d\udcca Formula","text":"<p>The pressure drop is given by:</p> \\[ \\Delta P = 4 \\cdot f_F \\cdot \\frac{L}{D} \\cdot \\frac{\\rho \\cdot v^2}{2} \\] <p>Where:</p> Symbol Description Units \u0394P Pressure drop Pa f<sub>F</sub> Fanning friction factor \u2013 L Pipe length m D Pipe diameter m \u03c1 Fluid density kg/m\u00b3 v Fluid velocity m/s"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>friction_factor</code> \u2192 Fanning friction factor (dimensionless)  </li> <li><code>length</code> \u2192 Pipe length  </li> <li><code>diameter</code> \u2192 Pipe internal diameter  </li> <li><code>density</code> \u2192 Fluid density  </li> <li><code>velocity</code> \u2192 Fluid velocity  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#output","title":"\ud83d\udce4 Output","text":"<p>Returns a <code>Pressure</code> object containing the pressure drop in Pascals (Pa).</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Ensures all required inputs (<code>friction_factor</code>, <code>length</code>, <code>diameter</code>, <code>density</code>, <code>velocity</code>) are provided. Raises <code>ValueError</code> if any are missing.</p> <p><code>calculate()</code> Performs the Fanning pressure drop calculation:</p> \\[ \\Delta P = 4 \\cdot f_F \\cdot \\frac{L}{D} \\cdot \\frac{\\rho \\cdot v^2}{2} \\] <p>Returns: <code>Pressure</code>: The computed pressure drop in Pascals.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/fanning/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>PressureDropFanning</code></p> <pre><code>from processpi.calculations import PressureDropFanning\nfrom processpi.units import Pressure, Length, Diameter, Density, Velocity, Dimensionless\n\n# Define fluid and pipe properties\nfriction_factor = Dimensionless(0.005)    # Example fanning friction factor\nlength = Length(50, \"m\")                  # Pipe length\ndiameter = Diameter(0.1, \"m\")             # Pipe diameter\ndensity = Density(998, \"kg/m3\")           # Water density\nvelocity = Velocity(2.5, \"m/s\")           # Flow velocity\n\n# Create calculation instance\npd_calc = PressureDropFanning(\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\n# Perform calculation\ndeltaP = pd_calc.calculate()\n\nprint(f\"Pressure Drop (Fanning): {deltaP}\")\n</code></pre> <p>Using the <code>CalculationEngine</code></p> <pre><code>from processpi.engine import CalculationEngine\nfrom processpi.units import Pressure, Length, Diameter, Density, Velocity, Dimensionless\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define fluid and pipe properties\nfriction_factor = Dimensionless(0.005)    # Example fanning friction factor\nlength = Length(50, \"m\")                  # Pipe length\ndiameter = Diameter(0.1, \"m\")             # Pipe diameter\ndensity = Density(998, \"kg/m3\")           # Water density\nvelocity = Velocity(2.5, \"m/s\")           # Flow velocity\n\n# Perform Fanning pressure drop calculation using the engine\ndeltaP = engine.calculate(\n    \"pressure_drop_fanning\",\n    friction_factor=friction_factor,\n    length=length,\n    diameter=diameter,\n    density=density,\n    velocity=velocity\n)\n\nprint(f\"Pressure Drop (via Engine): {deltaP}\")\n</code></pre>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/","title":"Class: <code>PressureDropHazenWilliams</code>","text":"<p>The <code>PressureDropHazenWilliams</code> class calculates the pressure drop (\u0394P) in a pipe using the Hazen\u2013Williams equation. It is part of the ProcessPI Calculations module and inherits from <code>CalculationBase</code>.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#description","title":"\ud83d\udcd6 Description","text":"<p>The Hazen\u2013Williams equation is an empirical formula for estimating head loss due to friction in water distribution systems. It is simpler than the Darcy\u2013Weisbach equation since it avoids iterative calculations for friction factors.  </p> <p>This method is mainly used for water flow in pipes.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#formula","title":"\ud83d\udcca Formula","text":""},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#head-loss-si-units","title":"Head Loss (SI Units):","text":"\\[ h_f = 10.67 \\cdot \\frac{L \\cdot Q^{1.852}}{C^{1.852} \\cdot D^{4.87}} \\]"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#pressure-drop","title":"Pressure Drop:","text":"\\[ \\Delta P = \\rho \\cdot g \\cdot h_f \\] <p>Where:</p> Symbol Description Units \\( h_f \\) Head loss m \\( \\Delta P \\) Pressure drop Pa \\( L \\) Pipe length m \\( Q \\) Volumetric flow rate m\u00b3/s \\( C \\) Hazen\u2013Williams roughness coefficient \u2013 \\( D \\) Pipe diameter m \\( \\rho \\) Fluid density kg/m\u00b3 \\( g \\) Gravitational acceleration 9.81 m/s\u00b2"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#inputs","title":"\u2699\ufe0f Inputs","text":"<ul> <li><code>length</code> \u2192 Pipe length (m)  </li> <li><code>flow_rate</code> \u2192 Volumetric flow rate (m\u00b3/s)  </li> <li><code>coefficient</code> \u2192 Hazen\u2013Williams roughness coefficient (dimensionless)  </li> <li><code>diameter</code> \u2192 Pipe internal diameter (m)  </li> <li><code>density</code> \u2192 Fluid density (kg/m\u00b3)  </li> </ul>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#output","title":"\ud83d\udce4 Output","text":"<p>Returns a <code>Pressure</code> object containing the pressure drop in Pascals (Pa).</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#methods","title":"\ud83d\udee0\ufe0f Methods","text":"<p><code>validate_inputs()</code> Ensures all required inputs (<code>length</code>, <code>flow_rate</code>, <code>coefficient</code>, <code>diameter</code>, <code>density</code>) are provided. Raises <code>ValueError</code> if any are missing.</p> <p><code>calculate()</code> Performs the Hazen\u2013Williams pressure drop calculation:</p> <ol> <li>Computes head loss (\\(h_f\\))  </li> <li>Converts \\(h_f\\) into pressure drop using \\( \\Delta P = \\rho \\cdot g \\cdot h_f \\) </li> </ol> <p>Returns: <code>Pressure</code>: The computed pressure drop in Pascals.</p>"},{"location":"user-guide/calculations/fluid_mechanics/pressure_drop/hazen_williams/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Using the <code>PressureDropHazenWilliams</code></p> <pre><code>from processpi.calculations import PressureDropHazenWilliams\nfrom processpi.units import Pressure, Length, Diameter, Density, FlowRate, Dimensionless\n\n# Define pipe and fluid properties\nlength = Length(100, \"m\")                 # Pipe length\nflow_rate = FlowRate(0.05, \"m3/s\")        # Volumetric flow rate\ncoefficient = Dimensionless(130)          # Hazen\u2013Williams coefficient for water\ndiameter = Diameter(0.15, \"m\")            # Pipe diameter\ndensity = Density(998, \"kg/m3\")           # Water density\n\n# Create calculation instance\npd_calc = PressureDropHazenWilliams(\n    length=length,\n    flow_rate=flow_rate,\n    coefficient=coefficient,\n    diameter=diameter,\n    density=density\n)\n\n# Perform calculation\ndeltaP = pd_calc.calculate()\n\nprint(f\"Pressure Drop (Hazen-Williams): {deltaP}\")\n</code></pre> <p>**Using the <code>CalculationEngine</code> <pre><code>from processpi.engine import CalculationEngine\nfrom processpi.units import Pressure, Length, Diameter, Density, FlowRate, Dimensionless\n\n# Initialize engine\nengine = CalculationEngine()\n\n# Define pipe and fluid properties\nlength = Length(100, \"m\")\nflow_rate = FlowRate(0.05, \"m3/s\")\ncoefficient = Dimensionless(130)\ndiameter = Diameter(0.15, \"m\")\ndensity = Density(998, \"kg/m3\")\n\n# Perform Hazen-Williams pressure drop calculation using the engine\ndeltaP = engine.calculate(\n    \"pressure_drop_hazen_williams\",\n    length=length,\n    flow_rate=flow_rate,\n    coefficient=coefficient,\n    diameter=diameter,\n    density=density\n)\n\nprint(f\"Pressure Drop (via Engine): {deltaP}\")\n</code></pre></p>"},{"location":"user-guide/components/acetic_acid/","title":"Class: <code>AceticAcid</code>","text":""},{"location":"user-guide/components/acetic_acid/#description","title":"Description","text":"<p>The <code>AceticAcid</code> class represents the properties and constants for Acetic Acid (CH<sub>3</sub>\u200bCOOH).</p> <p>This class provides a comprehensive set of physical and thermodynamic properties for Acetic Acid, which are essential for various process engineering calculations. These properties are stored as class attributes and are available for use by other calculation modules within the ProcessPI library.</p>"},{"location":"user-guide/components/acetic_acid/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): The common name of the compound.  </li> <li><code>formula</code> (string): The chemical formula (CH<sub>3</sub>\u200bCOOH).  </li> <li><code>molecular_weight</code> (float): The molar mass in g/mol.</li> </ul>"},{"location":"user-guide/components/acetic_acid/#class-reference","title":"Class Reference","text":"<p><code>class AecticAcid()</code></p> <p>A class for handling Acetic Acid properties.</p> <p>Parameters:</p> <ul> <li><code>temperature</code> : <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code></li> <li><code>pressure</code> : <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code></li> <li><code>density</code> : <code>Density</code>, default = <code>None</code></li> <li><code>specific_heat</code> : <code>SpecificHeat</code>, default = <code>None</code></li> <li><code>viscosity</code> : <code>Viscosity</code>, default = <code>None</code> </li> <li><code>thermal_conductivity</code> : <code>ThermalConductivity</code>, default = <code>None</code></li> <li><code>vapor_pressure</code> : <code>Pressure</code>, default = <code>None</code> </li> <li><code>enthalpy</code> : <code>HeatOfVaporization</code>, default = <code>None</code> </li> </ul>"},{"location":"user-guide/components/acetic_acid/#methods","title":"Methods","text":"<p>The properties of the <code>AceticAcid</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure. The rule is: <code>\"gas\"</code> if P &lt; P<sub>vap</sub>,\u200b otherwise <code>\"liquid\"</code>.  </li> <li> <p><code>density()</code>:  </p> <ul> <li> <p>Gas Phase: Calculates density using the Ideal Gas Law</p> </li> <li> <p>Liquid Phase: Calculates density using the DIPPR correlation  </p> </li> </ul> </li> <li> <p><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </p> </li> <li> <p><code>viscosity()</code>:  </p> <ul> <li> <p>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation:  </p> </li> <li> <p>Gas Phase: Calculates viscosity using Sutherland's Law. </p> </li> </ul> </li> <li> <p><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </p> </li> <li> <p><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation  </p> </li> <li> <p><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature   \u200b</p> </li> </ul>"},{"location":"user-guide/components/acetic_acid/#examples","title":"Examples","text":"<p>1. Acetone at 35 \u00b0C</p> <pre><code># Importing Acetone\n&gt;&gt;&gt; from processpi.components import Acetone\n# Importing Units\n&gt;&gt;&gt; from processpi.units import *\n# Creating Acetone at 35 C Temperature\n&gt;&gt;&gt; acetone = Acetone(temperature=Temperature(35, \"C\"))\n&gt;&gt;&gt; print(acetone.density().to(\"kg/m3\"))\n\n&gt;&gt;&gt; print(acetone.viscosity().to(\"Pa\u00b7s\"))\n\n&gt;&gt;&gt; print(acetone.specific_heat().to(\"J/kgK\"))\n\n&gt;&gt;&gt; print(acetone.thermal_conductivity().to(\"W/mK\"))\n\n&gt;&gt;&gt; print(acetone.vapor_pressure().to(\"Pa\"))\n\n&gt;&gt;&gt; print(acetone.enthalpy().to(\"J/kg\"))\n</code></pre> <p>2. Acetone at higher temperature (60 \u00b0C) with unit conversion <pre><code># Creating Acetone at 60 C Temperature\n&gt;&gt;&gt; acetone_high = Acetone(temperature=Temperature(60, \"C\"))\n&gt;&gt;&gt; print(acetone_high.density().to(\"lb/ft3\"))\n\n&gt;&gt;&gt; print(acetone_high.viscosity().to(\"cP\"))\n</code></pre></p>"},{"location":"user-guide/components/acetone/","title":"Class: <code>Acetone</code>","text":""},{"location":"user-guide/components/acetone/#description","title":"Description","text":"<p>The <code>Acetone</code> class represents the properties and constants for Acetone (C\u2083H\u2086O). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/acetone/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Acetone  </li> <li><code>formula</code> (string): C\u2083H\u2086O  </li> <li><code>molecular_weight</code> (float): Molar mass in g/mol  </li> </ul>"},{"location":"user-guide/components/acetone/#class-reference","title":"Class Reference","text":"<p><code>class Acetone()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/acetone/#methods","title":"Methods","text":"<p>The properties of the <code>AceticAcid</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure. The rule is: <code>\"gas\"</code> if P &lt; P<sub>vap</sub>,\u200b otherwise <code>\"liquid\"</code>.  </li> <li> <p><code>density()</code>:  </p> <ul> <li> <p>Gas Phase: Calculates density using the Ideal Gas Law</p> </li> <li> <p>Liquid Phase: Calculates density using the DIPPR correlation  </p> </li> </ul> </li> <li> <p><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </p> </li> <li> <p><code>viscosity()</code>:  </p> <ul> <li> <p>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation:  </p> </li> <li> <p>Gas Phase: Calculates viscosity using Sutherland's Law. </p> </li> </ul> </li> <li> <p><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </p> </li> <li> <p><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation  </p> </li> <li> <p><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature </p> </li> </ul>"},{"location":"user-guide/components/acetone/#examples","title":"Examples","text":"<pre><code>from processpi.components import Acetone\nfrom processpi.units import *\n\nacetone = Acetone(temperature=Temperature(35, \"C\"))\nprint(acetone.density().to(\"kg/m3\"))\nprint(acetone.viscosity().to(\"Pa\u00b7s\"))\nprint(acetone.specific_heat().to(\"J/kgK\"))\nprint(acetone.thermal_conductivity().to(\"W/mK\"))\nprint(acetone.vapor_pressure().to(\"Pa\"))\nprint(acetone.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/acrylic_acid/","title":"Class: <code>AcrylicAcid</code>","text":""},{"location":"user-guide/components/acrylic_acid/#description","title":"Description","text":"<p>The <code>AcrylicAcid</code> class represents the properties and constants for Acrylic Acid (C\u2083H\u2084O\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/acrylic_acid/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Acrylic Acid  </li> <li><code>formula</code> (string): C\u2083H\u2084O\u2082  </li> <li><code>molecular_weight</code> (float): 72.06 g/mol  </li> </ul>"},{"location":"user-guide/components/acrylic_acid/#class-reference","title":"Class Reference","text":"<p><code>class AcrylicAcid()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/acrylic_acid/#methods","title":"Methods","text":"<p>The properties of the <code>AcrylicAcid</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure. The rule is: <code>\"gas\"</code> if P &lt; P<sub>vap</sub>,\u200b otherwise <code>\"liquid\"</code>.  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Calculates density using the DIPPR correlation  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation  </li> <li>Gas Phase: Calculates viscosity using Sutherland's Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/acrylic_acid/#examples","title":"Examples","text":"<pre><code>from processpi.components import AcrylicAcid\nfrom processpi.units import *\n\nacrylic = AcrylicAcid(temperature=Temperature(35, \"C\"))\nprint(acrylic.density().to(\"kg/m3\"))\nprint(acrylic.viscosity().to(\"Pa\u00b7s\"))\nprint(acrylic.specific_heat().to(\"J/kgK\"))\nprint(acrylic.thermal_conductivity().to(\"W/mK\"))\nprint(acrylic.vapor_pressure().to(\"Pa\"))\nprint(acrylic.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/air/","title":"Class: <code>Air</code>","text":""},{"location":"user-guide/components/air/#description","title":"Description","text":"<p>The <code>Air</code> class represents the properties and constants for Air (approximate composition: 78% N\u2082, 21% O\u2082, 1% Ar/others). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/air/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Air  </li> <li><code>formula</code> (string): Mixture (\u2248 N\u2082\u2080.\u2087\u2088 O\u2082\u2080.\u2082\u2081 Ar\u2080.\u2080\u2081)  </li> <li><code>molecular_weight</code> (float): 28.97 g/mol  </li> </ul>"},{"location":"user-guide/components/air/#class-reference","title":"Class Reference","text":"<p><code>class Air()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/air/#methods","title":"Methods","text":"<p>The properties of the <code>Air</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure. (For air, this generally indicates <code>\"gas\"</code> at standard conditions.)  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Approximations possible under cryogenic conditions  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Gas Phase: Calculates viscosity using Sutherland's Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Not typically applicable to air (mixture) but correlation can be used at cryogenic temperatures  </li> <li><code>enthalpy()</code>: Calculates enthalpy using correlations based on temperature and reference state  </li> </ul>"},{"location":"user-guide/components/air/#examples","title":"Examples","text":"<pre><code>from processpi.components import Air\nfrom processpi.units import *\n\nair = Air(temperature=Temperature(35, \"C\"))\nprint(air.density().to(\"kg/m3\"))\nprint(air.viscosity().to(\"Pa\u00b7s\"))\nprint(air.specific_heat().to(\"J/kgK\"))\nprint(air.thermal_conductivity().to(\"W/mK\"))\nprint(air.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/ammonia/","title":"Class: <code>Ammonia</code>","text":""},{"location":"user-guide/components/ammonia/#description","title":"Description","text":"<p>The <code>Ammonia</code> class represents the properties and constants for Ammonia (NH\u2083). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/ammonia/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Ammonia  </li> <li><code>formula</code> (string): NH\u2083  </li> <li><code>molecular_weight</code> (float): 17.03 g/mol  </li> </ul>"},{"location":"user-guide/components/ammonia/#class-reference","title":"Class Reference","text":"<p><code>class Ammonia()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/ammonia/#methods","title":"Methods","text":"<p>The properties of the <code>Ammonia</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Calculates density using the DIPPR correlation  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation  </li> <li>Gas Phase: Calculates viscosity using Sutherland's Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/ammonia/#examples","title":"Examples","text":"<pre><code>from processpi.components import Ammonia\nfrom processpi.units import *\n\nammonia = Ammonia(temperature=Temperature(35, \"C\"))\nprint(ammonia.density().to(\"kg/m3\"))\nprint(ammonia.viscosity().to(\"Pa\u00b7s\"))\nprint(ammonia.specific_heat().to(\"J/kgK\"))\nprint(ammonia.thermal_conductivity().to(\"W/mK\"))\nprint(ammonia.vapor_pressure().to(\"Pa\"))\nprint(ammonia.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/benzene/","title":"Class: <code>Benzene</code>","text":""},{"location":"user-guide/components/benzene/#description","title":"Description","text":"<p>The <code>Benzene</code> class represents the properties and constants for Benzene (C\u2086H\u2086). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/benzene/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Benzene  </li> <li><code>formula</code> (string): C\u2086H\u2086  </li> <li><code>molecular_weight</code> (float): 78.11 g/mol  </li> </ul>"},{"location":"user-guide/components/benzene/#class-reference","title":"Class Reference","text":"<p><code>class Benzene()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/benzene/#methods","title":"Methods","text":"<p>The properties of the <code>Benzene</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Calculates density using the DIPPR correlation  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation  </li> <li>Gas Phase: Calculates viscosity using Sutherland's Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/benzene/#examples","title":"Examples","text":"<pre><code>from processpi.components import Benzene\nfrom processpi.units import *\n\nbenzene = Benzene(temperature=Temperature(35, \"C\"))\nprint(benzene.density().to(\"kg/m3\"))\nprint(benzene.viscosity().to(\"Pa\u00b7s\"))\nprint(benzene.specific_heat().to(\"J/kgK\"))\nprint(benzene.thermal_conductivity().to(\"W/mK\"))\nprint(benzene.vapor_pressure().to(\"Pa\"))\nprint(benzene.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/benzoic_acid/","title":"Class: <code>BenzoicAcid</code>","text":""},{"location":"user-guide/components/benzoic_acid/#description","title":"Description","text":"<p>The <code>BenzoicAcid</code> class represents the properties and constants for Benzoic Acid (C\u2086H\u2085COOH). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/benzoic_acid/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Benzoic Acid  </li> <li><code>formula</code> (string): C\u2086H\u2085COOH  </li> <li><code>molecular_weight</code> (float): 122.12 g/mol  </li> </ul>"},{"location":"user-guide/components/benzoic_acid/#class-reference","title":"Class Reference","text":"<p><code>class BenzoicAcid()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/benzoic_acid/#methods","title":"Methods","text":"<p>The properties of the <code>BenzoicAcid</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"solid\"</code>, <code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Solid/Liquid Phase: Uses DIPPR or empirical correlations  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/benzoic_acid/#examples","title":"Examples","text":"<pre><code>from processpi.components import BenzoicAcid\nfrom processpi.units import *\n\nba = BenzoicAcid(temperature=Temperature(25, \"C\"))\nprint(ba.density().to(\"kg/m3\"))\nprint(ba.viscosity().to(\"Pa\u00b7s\"))\nprint(ba.specific_heat().to(\"J/kgK\"))\nprint(ba.thermal_conductivity().to(\"W/mK\"))\nprint(ba.vapor_pressure().to(\"Pa\"))\nprint(ba.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/bromine/","title":"Class: <code>Bromine</code>","text":""},{"location":"user-guide/components/bromine/#description","title":"Description","text":"<p>The <code>Bromine</code> class represents the properties and constants for Bromine (Br\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/bromine/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Bromine  </li> <li><code>formula</code> (string): Br\u2082  </li> <li><code>molecular_weight</code> (float): 159.81 g/mol  </li> </ul>"},{"location":"user-guide/components/bromine/#class-reference","title":"Class Reference","text":"<p><code>class Bromine()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/bromine/#methods","title":"Methods","text":"<p>The properties of the <code>Bromine</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Liquid Phase: Uses DIPPR or empirical correlations  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/bromine/#examples","title":"Examples","text":"<pre><code>from processpi.components import Bromine\nfrom processpi.units import *\n\nbr = Bromine(temperature=Temperature(25, \"C\"))\nprint(br.density().to(\"kg/m3\"))\nprint(br.viscosity().to(\"Pa\u00b7s\"))\nprint(br.specific_heat().to(\"J/kgK\"))\nprint(br.thermal_conductivity().to(\"W/mK\"))\nprint(br.vapor_pressure().to(\"Pa\"))\nprint(br.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/butane/","title":"Class: <code>Butane</code>","text":""},{"location":"user-guide/components/butane/#description","title":"Description","text":"<p>The <code>Butane</code> class represents the properties and constants for Butane (C\u2084H\u2081\u2080). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/butane/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Butane  </li> <li><code>formula</code> (string): C\u2084H\u2081\u2080  </li> <li><code>molecular_weight</code> (float): 58.12 g/mol  </li> </ul>"},{"location":"user-guide/components/butane/#class-reference","title":"Class Reference","text":"<p><code>class Butane()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/butane/#methods","title":"Methods","text":"<p>The properties of the <code>Butane</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Calculates density using the DIPPR correlation  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Calculates viscosity (\u03bc) using DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/butane/#examples","title":"Examples","text":"<pre><code>from processpi.components import Butane\nfrom processpi.units import *\n\nc4 = Butane(temperature=Temperature(25, \"C\"))\nprint(c4.density().to(\"kg/m3\"))\nprint(c4.viscosity().to(\"Pa\u00b7s\"))\nprint(c4.specific_heat().to(\"J/kgK\"))\nprint(c4.thermal_conductivity().to(\"W/mK\"))\nprint(c4.vapor_pressure().to(\"Pa\"))\nprint(c4.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/carbon_dioxide/","title":"Class: <code>CarbonDioxide</code>","text":""},{"location":"user-guide/components/carbon_dioxide/#description","title":"Description","text":"<p>The <code>CarbonDioxide</code> class represents the properties and constants for Carbon Dioxide (CO\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/carbon_dioxide/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Carbon Dioxide  </li> <li><code>formula</code> (string): CO\u2082  </li> <li><code>molecular_weight</code> (float): 44.01 g/mol  </li> </ul>"},{"location":"user-guide/components/carbon_dioxide/#class-reference","title":"Class Reference","text":"<p><code>class CarbonDioxide()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/carbon_dioxide/#methods","title":"Methods","text":"<p>The properties of the <code>CarbonDioxide</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"solid\"</code>, <code>\"gas\"</code>, or <code>\"liquid\"</code>) by comparing the system temperature and pressure to sublimation/vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates sublimation or vapor pressure (Pvap\u200b) using Antoine-type correlations  </li> <li><code>enthalpy()</code>: Calculates enthalpy of vaporization or sublimation (\u0394Hvap/\u0394Hsub\u200b) depending on phase  </li> </ul>"},{"location":"user-guide/components/carbon_dioxide/#examples","title":"Examples","text":"<pre><code>from processpi.components import CarbonDioxide\nfrom processpi.units import *\n\nco2 = CarbonDioxide(temperature=Temperature(25, \"C\"))\nprint(co2.density().to(\"kg/m3\"))\nprint(co2.viscosity().to(\"Pa\u00b7s\"))\nprint(co2.specific_heat().to(\"J/kgK\"))\nprint(co2.thermal_conductivity().to(\"W/mK\"))\nprint(co2.vapor_pressure().to(\"Pa\"))\nprint(co2.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/carbon_monoxide/","title":"Class: <code>CarbonMonoxide</code>","text":""},{"location":"user-guide/components/carbon_monoxide/#description","title":"Description","text":"<p>The <code>CarbonMonoxide</code> class represents the properties and constants for Carbon Monoxide (CO). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/carbon_monoxide/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Carbon Monoxide  </li> <li><code>formula</code> (string): CO  </li> <li><code>molecular_weight</code> (float): 28.01 g/mol  </li> </ul>"},{"location":"user-guide/components/carbon_monoxide/#class-reference","title":"Class Reference","text":"<p><code>class CarbonMonoxide()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/carbon_monoxide/#methods","title":"Methods","text":"<p>The properties of the <code>CarbonMonoxide</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the vapor pressure. (At standard conditions, CO is a gas.)  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR correlation (cryogenic conditions)  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure using Antoine-type correlations (applicable in cryogenic range)  </li> <li><code>enthalpy()</code>: Calculates enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/carbon_monoxide/#examples","title":"Examples","text":"<pre><code>from processpi.components import CarbonMonoxide\nfrom processpi.units import *\n\nco = CarbonMonoxide(temperature=Temperature(25, \"C\"))\nprint(co.density().to(\"kg/m3\"))\nprint(co.viscosity().to(\"Pa\u00b7s\"))\nprint(co.specific_heat().to(\"J/kgK\"))\nprint(co.thermal_conductivity().to(\"W/mK\"))\nprint(co.vapor_pressure().to(\"Pa\"))\nprint(co.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/carbon_tetrachloride/","title":"Class: <code>CarbonTetrachloride</code>","text":""},{"location":"user-guide/components/carbon_tetrachloride/#description","title":"Description","text":"<p>The <code>CarbonTetrachloride</code> class represents the properties and constants for Carbon Tetrachloride (CCl\u2084). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/carbon_tetrachloride/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Carbon Tetrachloride  </li> <li><code>formula</code> (string): CCl\u2084  </li> <li><code>molecular_weight</code> (float): 153.82 g/mol  </li> </ul>"},{"location":"user-guide/components/carbon_tetrachloride/#class-reference","title":"Class Reference","text":"<p><code>class CarbonTetrachloride()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/carbon_tetrachloride/#methods","title":"Methods","text":"<p>The properties of the <code>CarbonTetrachloride</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Uses DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/carbon_tetrachloride/#examples","title":"Examples","text":"<pre><code>from processpi.components import CarbonTetrachloride\nfrom processpi.units import *\n\nccl4 = CarbonTetrachloride(temperature=Temperature(25, \"C\"))\nprint(ccl4.density().to(\"kg/m3\"))\nprint(ccl4.viscosity().to(\"Pa\u00b7s\"))\nprint(ccl4.specific_heat().to(\"J/kgK\"))\nprint(ccl4.thermal_conductivity().to(\"W/mK\"))\nprint(ccl4.vapor_pressure().to(\"Pa\"))\nprint(ccl4.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/chlorine/","title":"Class: <code>Chlorine</code>","text":""},{"location":"user-guide/components/chlorine/#description","title":"Description","text":"<p>The <code>Chlorine</code> class represents the properties and constants for Chlorine (Cl\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/chlorine/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Chlorine  </li> <li><code>formula</code> (string): Cl\u2082  </li> <li><code>molecular_weight</code> (float): 70.90 g/mol  </li> </ul>"},{"location":"user-guide/components/chlorine/#class-reference","title":"Class Reference","text":"<p><code>class Chlorine()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/chlorine/#methods","title":"Methods","text":"<p>The properties of the <code>Chlorine</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing system temperature and pressure to chlorine\u2019s vapor pressure. (At standard conditions, chlorine is a gas.)  </li> <li><code>density()</code>:  <ul> <li>Gas Phase: Calculates density using the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR correlation (cryogenic/refrigerated conditions)  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure using Antoine-type correlations  </li> <li><code>enthalpy()</code>: Calculates enthalpy of vaporization (\u0394Hvap\u200b) using correlations based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/chlorine/#examples","title":"Examples","text":"<pre><code>from processpi.components import Chlorine\nfrom processpi.units import *\n\ncl2 = Chlorine(temperature=Temperature(25, \"C\"))\nprint(cl2.density().to(\"kg/m3\"))\nprint(cl2.viscosity().to(\"Pa\u00b7s\"))\nprint(cl2.specific_heat().to(\"J/kgK\"))\nprint(cl2.thermal_conductivity().to(\"W/mK\"))\nprint(cl2.vapor_pressure().to(\"Pa\"))\nprint(cl2.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/chloroform/","title":"Class: <code>Chloroform</code>","text":""},{"location":"user-guide/components/chloroform/#description","title":"Description","text":"<p>The <code>Chloroform</code> class represents the properties and constants for Chloroform (CHCl\u2083). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/chloroform/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Chloroform  </li> <li><code>formula</code> (string): CHCl\u2083  </li> <li><code>molecular_weight</code> (float): 119.38 g/mol  </li> </ul>"},{"location":"user-guide/components/chloroform/#class-reference","title":"Class Reference","text":"<p><code>class Chloroform()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/chloroform/#methods","title":"Methods","text":"<p>The properties of the <code>Chloroform</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  <ul> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> </ul> </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  <ul> <li>Liquid Phase: Uses DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> </ul> </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/chloroform/#examples","title":"Examples","text":"<pre><code>from processpi.components import Chloroform\nfrom processpi.units import *\n\nchcl3 = Chloroform(temperature=Temperature(25, \"C\"))\nprint(chcl3.density().to(\"kg/m3\"))\nprint(chcl3.viscosity().to(\"Pa\u00b7s\"))\nprint(chcl3.specific_heat().to(\"J/kgK\"))\nprint(chcl3.thermal_conductivity().to(\"W/mK\"))\nprint(chcl3.vapor_pressure().to(\"Pa\"))\nprint(chcl3.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/chloromethane/","title":"Class: <code>Chloromethane</code>","text":""},{"location":"user-guide/components/chloromethane/#description","title":"Description","text":"<p>The <code>Chloromethane</code> class represents the properties and constants for Chloromethane (CH\u2083Cl). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/chloromethane/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Chloromethane  </li> <li><code>formula</code> (string): CH\u2083Cl  </li> <li><code>molecular_weight</code> (float): 50.49 g/mol  </li> </ul>"},{"location":"user-guide/components/chloromethane/#class-reference","title":"Class Reference","text":"<p><code>class Chloromethane()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/chloromethane/#methods","title":"Methods","text":"<p>The properties of the <code>Chloromethane</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/chloromethane/#examples","title":"Examples","text":"<pre><code>from processpi.components import Chloromethane\nfrom processpi.units import *\n\nch3cl = Chloromethane(temperature=Temperature(25, \"C\"))\nprint(ch3cl.density().to(\"kg/m3\"))\nprint(ch3cl.viscosity().to(\"Pa\u00b7s\"))\nprint(ch3cl.specific_heat().to(\"J/kgK\"))\nprint(ch3cl.thermal_conductivity().to(\"W/mK\"))\nprint(ch3cl.vapor_pressure().to(\"Pa\"))\nprint(ch3cl.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/components/","title":"Components Overview","text":"<p>The Process PI Components Library provides physical and chemical property data for a wide range of common industrial substances. These components can be used in calculations, simulations, and design workflows throughout the toolkit.  </p>"},{"location":"user-guide/components/components/#available-components","title":"\ud83d\udcd6 Available Components","text":""},{"location":"user-guide/components/components/#organic-compounds","title":"Organic Compounds","text":"<ul> <li>Acetic Acid </li> <li>Acetone </li> <li>Acrylic Acid </li> <li>Benzene </li> <li>Benzoic Acid </li> <li>Butane </li> <li>Chloroform </li> <li>Carbon Tetrachloride </li> <li>Chloro Methane </li> <li>Cyclobenzene </li> <li>Cyclohexane </li> <li>Ethane </li> <li>Ethanol </li> <li>Ethyl Acetate </li> <li>Methanol </li> <li>Toluene </li> </ul>"},{"location":"user-guide/components/components/#inorganic-compounds-elements","title":"Inorganic Compounds &amp; Elements","text":"<ul> <li>Air </li> <li>Ammonia </li> <li>Bromine </li> <li>Carbon Dioxide </li> <li>Carbon Monoxide </li> <li>Chlorine </li> <li>Cynogen </li> <li>Steam </li> <li>Water </li> </ul>"},{"location":"user-guide/components/components/#mixtures-general-categories","title":"Mixtures &amp; General Categories","text":"<ul> <li>Gas </li> <li>Oil </li> <li>Vapor </li> <li>Organic Liquids </li> <li>Inorganic Liquids </li> </ul>"},{"location":"user-guide/components/components/#coming-soon","title":"\ud83d\ude80 Coming Soon","text":"<p>The Components Library is continuously expanding. Future releases will include additional hydrocarbons, refrigerants, solvents, and specialty chemicals commonly used in process industries.  </p> <p>Stay tuned for updates in the changelog and contribute your requests via the GitHub repository.  </p>"},{"location":"user-guide/components/cyclohexene/","title":"Class: <code>Cyclohexane</code>","text":""},{"location":"user-guide/components/cyclohexene/#description","title":"Description","text":"<p>The <code>Cyclohexane</code> class represents the properties and constants for Cyclohexane (C\u2086H\u2081\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/cyclohexene/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Cyclohexane  </li> <li><code>formula</code> (string): C\u2086H\u2081\u2082  </li> <li><code>molecular_weight</code> (float): 84.16 g/mol  </li> </ul>"},{"location":"user-guide/components/cyclohexene/#class-reference","title":"Class Reference","text":"<p><code>class Cyclohexane()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/cyclohexene/#methods","title":"Methods","text":"<p>The properties of the <code>Cyclohexane</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure.  </li> <li><code>density()</code>:  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/cyclohexene/#examples","title":"Examples","text":"<pre><code>from processpi.components import Cyclohexane\nfrom processpi.units import *\n\nc6h12 = Cyclohexane(temperature=Temperature(25, \"C\"))\nprint(c6h12.density().to(\"kg/m3\"))\nprint(c6h12.viscosity().to(\"Pa\u00b7s\"))\nprint(c6h12.specific_heat().to(\"J/kgK\"))\nprint(c6h12.thermal_conductivity().to(\"W/mK\"))\nprint(c6h12.vapor_pressure().to(\"Pa\"))\nprint(c6h12.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/cynogen/","title":"Class: <code>Cyanogen</code>","text":""},{"location":"user-guide/components/cynogen/#description","title":"Description","text":"<p>The <code>Cyanogen</code> class represents the properties and constants for Cyanogen (C\u2082N\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/cynogen/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Cyanogen  </li> <li><code>formula</code> (string): C\u2082N\u2082  </li> <li><code>molecular_weight</code> (float): 52.04 g/mol  </li> </ul>"},{"location":"user-guide/components/cynogen/#class-reference","title":"Class Reference","text":"<p><code>class Cyanogen()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/cynogen/#methods","title":"Methods","text":"<p>The properties of the <code>Cyanogen</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system temperature and vapor pressure. (At standard conditions, cyanogen is a gas.)  </li> <li><code>density()</code>:  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/cynogen/#examples","title":"Examples","text":"<pre><code>from processpi.components import Cyanogen\nfrom processpi.units import *\n\nc2n2 = Cyanogen(temperature=Temperature(25, \"C\"))\nprint(c2n2.density().to(\"kg/m3\"))\nprint(c2n2.viscosity().to(\"Pa\u00b7s\"))\nprint(c2n2.specific_heat().to(\"J/kgK\"))\nprint(c2n2.thermal_conductivity().to(\"W/mK\"))\nprint(c2n2.vapor_pressure().to(\"Pa\"))\nprint(c2n2.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/ethane/","title":"Class: <code>Ethane</code>","text":""},{"location":"user-guide/components/ethane/#description","title":"Description","text":"<p>The <code>Ethane</code> class represents the properties and constants for Ethane (C\u2082H\u2086). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/ethane/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Ethane  </li> <li><code>formula</code> (string): C\u2082H\u2086  </li> <li><code>molecular_weight</code> (float): 30.07 g/mol  </li> </ul>"},{"location":"user-guide/components/ethane/#class-reference","title":"Class Reference","text":"<p><code>class Ethane()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/ethane/#methods","title":"Methods","text":"<p>The properties of the <code>Ethane</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system temperature and vapor pressure. (At standard conditions, ethane is a gas.)  </li> <li><code>density()</code>:  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/ethane/#examples","title":"Examples","text":"<pre><code>from processpi.components import Ethane\nfrom processpi.units import *\n\nc2h6 = Ethane(temperature=Temperature(25, \"C\"))\nprint(c2h6.density().to(\"kg/m3\"))\nprint(c2h6.viscosity().to(\"Pa\u00b7s\"))\nprint(c2h6.specific_heat().to(\"J/kgK\"))\nprint(c2h6.thermal_conductivity().to(\"W/mK\"))\nprint(c2h6.vapor_pressure().to(\"Pa\"))\nprint(c2h6.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/ethanol/","title":"Class: <code>Ethanol</code>","text":""},{"location":"user-guide/components/ethanol/#description","title":"Description","text":"<p>The <code>Ethanol</code> class represents the properties and constants for Ethanol (C\u2082H\u2085OH). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/ethanol/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Ethanol  </li> <li><code>formula</code> (string): C\u2082H\u2085OH  </li> <li><code>molecular_weight</code> (float): 46.07 g/mol  </li> </ul>"},{"location":"user-guide/components/ethanol/#class-reference","title":"Class Reference","text":"<p><code>class Ethanol()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/ethanol/#methods","title":"Methods","text":"<p>The properties of the <code>Ethanol</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system temperature and vapor pressure. (At standard conditions, ethanol is a liquid.)  </li> <li><code>density()</code>:  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/ethanol/#examples","title":"Examples","text":"<pre><code>from processpi.components import Ethanol\nfrom processpi.units import *\n\nc2h5oh = Ethanol(temperature=Temperature(25, \"C\"))\nprint(c2h5oh.density().to(\"kg/m3\"))\nprint(c2h5oh.viscosity().to(\"Pa\u00b7s\"))\nprint(c2h5oh.specific_heat().to(\"J/kgK\"))\nprint(c2h5oh.thermal_conductivity().to(\"W/mK\"))\nprint(c2h5oh.vapor_pressure().to(\"Pa\"))\nprint(c2h5oh.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/ethylacetate/","title":"Class: <code>EthylAcetate</code>","text":""},{"location":"user-guide/components/ethylacetate/#description","title":"Description","text":"<p>The <code>EthylAcetate</code> class represents the properties and constants for Ethyl Acetate (C\u2084H\u2088O\u2082). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/ethylacetate/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Ethyl Acetate  </li> <li><code>formula</code> (string): C\u2084H\u2088O\u2082  </li> <li><code>molecular_weight</code> (float): 88.11 g/mol  </li> </ul>"},{"location":"user-guide/components/ethylacetate/#class-reference","title":"Class Reference","text":"<p><code>class EthylAcetate()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/ethylacetate/#methods","title":"Methods","text":"<p>The properties of the <code>EthylAcetate</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system temperature and vapor pressure. (At standard conditions, ethyl acetate is a liquid.)  </li> <li><code>density()</code>:  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/ethylacetate/#examples","title":"Examples","text":"<pre><code>from processpi.components import EthylAcetate\nfrom processpi.units import *\n\nc4h8o2 = EthylAcetate(temperature=Temperature(25, \"C\"))\nprint(c4h8o2.density().to(\"kg/m3\"))\nprint(c4h8o2.viscosity().to(\"Pa\u00b7s\"))\nprint(c4h8o2.specific_heat().to(\"J/kgK\"))\nprint(c4h8o2.thermal_conductivity().to(\"W/mK\"))\nprint(c4h8o2.vapor_pressure().to(\"Pa\"))\nprint(c4h8o2.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/gas/","title":"Class: <code>Gas</code>","text":""},{"location":"user-guide/components/gas/#description","title":"Description","text":"<p>The <code>Gas</code> class represents the properties and constants for a generic gas mixture. It provides physical and thermodynamic properties required in process engineering simulations and calculations. This class is typically used as a placeholder or for defining user-specified gases in simulations.</p>"},{"location":"user-guide/components/gas/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Gas  </li> <li><code>formula</code> (string): N/A (mixture or undefined)  </li> <li><code>molecular_weight</code> (float): User-defined (default = None)  </li> </ul>"},{"location":"user-guide/components/gas/#class-reference","title":"Class Reference","text":"<p><code>class Gas()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>molecular_weight</code>: <code>float</code>, default = <code>None</code> (must be set for calculations) <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> * <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/gas/#methods","title":"Methods","text":"<p>The properties of the <code>Gas</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Always <code>\"gas\"</code> under standard simulation conditions.  </li> <li><code>density()</code>: Uses the Ideal Gas Law with user-provided molecular weight.  </li> <li><code>specific_heat()</code>: User-defined or estimated based on empirical correlations.  </li> <li><code>viscosity()</code>: Uses Sutherland\u2019s Law or user input.  </li> <li><code>thermal_conductivity()</code>: User-defined or estimated with polynomial correlation.  </li> <li><code>vapor_pressure()</code>: Not typically applicable for gas mixtures (default = None).  </li> <li><code>enthalpy()</code>: Estimated from heat capacity correlation and integration over temperature range.  </li> </ul>"},{"location":"user-guide/components/gas/#examples","title":"Examples","text":"<pre><code>from processpi.components import Gas\nfrom processpi.units import *\n\n# Define a gas with approximate molecular weight (example: Nitrogen ~28.0 g/mol)\ncustom_gas = Gas(temperature=Temperature(25, \"C\"), pressure=Pressure(1, \"atm\"), molecular_weight=28.0)\n\nprint(custom_gas.density().to(\"kg/m3\"))\nprint(custom_gas.viscosity().to(\"Pa\u00b7s\"))\nprint(custom_gas.specific_heat().to(\"J/kgK\"))\nprint(custom_gas.thermal_conductivity().to(\"W/mK\"))\nprint(custom_gas.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/inorganic_liquids/","title":"Class: <code>InorganicLiquid</code>","text":""},{"location":"user-guide/components/inorganic_liquids/#description","title":"Description","text":"<p>The <code>InorganicLiquid</code> class represents the properties and constants for generic inorganic liquids. It provides physical and thermodynamic properties required in process engineering simulations and calculations. This class is typically used as a placeholder or for defining user-specified inorganic liquids in simulations.</p>"},{"location":"user-guide/components/inorganic_liquids/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Inorganic Liquid  </li> <li><code>formula</code> (string): N/A (mixture or undefined)  </li> <li><code>molecular_weight</code> (float): User-defined (default = None)  </li> </ul>"},{"location":"user-guide/components/inorganic_liquids/#class-reference","title":"Class Reference","text":"<p><code>class InorganicLiquid()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>molecular_weight</code>: <code>float</code>, default = <code>None</code> (must be set for calculations) <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> * <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/inorganic_liquids/#methods","title":"Methods","text":"<p>The properties of the <code>InorganicLiquid</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Always <code>\"liquid\"</code> under standard simulation conditions.  </li> <li><code>density()</code>: User-defined or calculated from empirical correlations.  </li> <li><code>specific_heat()</code>: User-defined or estimated based on empirical correlations.  </li> <li><code>viscosity()</code>: User-defined or estimated using DIPPR correlations.  </li> <li><code>thermal_conductivity()</code>: User-defined or estimated using polynomial correlation.  </li> <li><code>vapor_pressure()</code>: Calculated using Antoine-type correlation (if applicable).  </li> <li><code>enthalpy()</code>: Estimated from heat capacity correlation and integration over temperature range.  </li> </ul>"},{"location":"user-guide/components/inorganic_liquids/#examples","title":"Examples","text":"<pre><code>from processpi.components import InorganicLiquid\nfrom processpi.units import *\n\n# Define a generic inorganic liquid (example: water)\nwater_liquid = InorganicLiquid(\n    temperature=Temperature(25, \"C\"),\n    pressure=Pressure(1, \"atm\"),\n    molecular_weight=18.015\n)\n\nprint(water_liquid.density().to(\"kg/m3\"))\nprint(water_liquid.viscosity().to(\"Pa\u00b7s\"))\nprint(water_liquid.specific_heat().to(\"J/kgK\"))\nprint(water_liquid.thermal_conductivity().to(\"W/mK\"))\nprint(water_liquid.vapor_pressure().to(\"Pa\"))\nprint(water_liquid.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/methanol/","title":"Class: <code>Methanol</code>","text":""},{"location":"user-guide/components/methanol/#description","title":"Description","text":"<p>The <code>Methanol</code> class represents the properties and constants for Methanol (CH\u2083OH). It provides physical and thermodynamic properties required in process engineering simulations and calculations.</p>"},{"location":"user-guide/components/methanol/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Methanol  </li> <li><code>formula</code> (string): CH\u2083OH  </li> <li><code>molecular_weight</code> (float): 32.04 g/mol  </li> </ul>"},{"location":"user-guide/components/methanol/#class-reference","title":"Class Reference","text":"<p><code>class Methanol()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/methanol/#methods","title":"Methods","text":"<p>The properties of the <code>Methanol</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"liquid\"</code> or <code>\"gas\"</code>) by comparing the system temperature and vapor pressure. (At standard conditions, methanol is a liquid.)  </li> <li><code>density()</code>:  </li> <li>Liquid Phase: Uses DIPPR or experimental correlation  </li> <li>Gas Phase: Uses the Ideal Gas Law  </li> <li><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature  </li> <li><code>viscosity()</code>:  </li> <li>Liquid Phase: Uses DIPPR correlation  </li> <li>Gas Phase: Uses Sutherland\u2019s Law  </li> <li><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature  </li> <li><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using an Antoine-type correlation  </li> <li><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature  </li> </ul>"},{"location":"user-guide/components/methanol/#examples","title":"Examples","text":"<pre><code>from processpi.components import Methanol\nfrom processpi.units import *\n\nch3oh = Methanol(temperature=Temperature(25, \"C\"))\nprint(ch3oh.density().to(\"kg/m3\"))\nprint(ch3oh.viscosity().to(\"Pa\u00b7s\"))\nprint(ch3oh.specific_heat().to(\"J/kgK\"))\nprint(ch3oh.thermal_conductivity().to(\"W/mK\"))\nprint(ch3oh.vapor_pressure().to(\"Pa\"))\nprint(ch3oh.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/oil/","title":"Class: <code>Oil</code>","text":""},{"location":"user-guide/components/oil/#description","title":"Description","text":"<p>The <code>Oil</code> class represents the properties and constants for a generic oil. It provides physical and thermodynamic properties required in process engineering simulations and calculations. This class is typically used for crude oils, lubricating oils, or user-specified oils in simulations.</p>"},{"location":"user-guide/components/oil/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Oil  </li> <li><code>formula</code> (string): N/A (mixture or undefined)  </li> <li><code>molecular_weight</code> (float): User-defined (default = None)  </li> </ul>"},{"location":"user-guide/components/oil/#class-reference","title":"Class Reference","text":"<p><code>class Oil()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/oil/#methods","title":"Methods","text":"<p>The properties of the <code>Oil</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Always <code>\"liquid\"</code> under standard conditions.  </li> <li><code>density()</code>: User-defined or calculated from empirical correlations.  </li> <li><code>specific_heat()</code>: User-defined or estimated based on empirical correlations.  </li> <li><code>viscosity()</code>: User-defined or estimated using DIPPR or polynomial correlations.  </li> <li><code>thermal_conductivity()</code>: User-defined or estimated using polynomial correlation.  </li> <li><code>vapor_pressure()</code>: Calculated using Antoine-type correlation (if applicable).  </li> <li><code>enthalpy()</code>: Estimated from heat capacity correlation and integration over temperature range.  </li> </ul>"},{"location":"user-guide/components/oil/#examples","title":"Examples","text":"<pre><code>from processpi.components import Oil\nfrom processpi.units import *\n\n# Define a generic oil\ngeneric_oil = Oil(\n    temperature=Temperature(25, \"C\"),\n    pressure=Pressure(1, \"atm\"),\n    density=900  # Example density in kg/m3\n)\n\nprint(generic_oil.density().to(\"kg/m3\"))\nprint(generic_oil.viscosity().to(\"Pa\u00b7s\"))\nprint(generic_oil.specific_heat().to(\"J/kgK\"))\nprint(generic_oil.thermal_conductivity().to(\"W/mK\"))\nprint(generic_oil.vapor_pressure().to(\"Pa\"))\nprint(generic_oil.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/organic_liquids/","title":"Class: <code>OrganicLiquid</code>","text":""},{"location":"user-guide/components/organic_liquids/#description","title":"Description","text":"<p>The <code>OrganicLiquid</code> class represents the properties and constants for generic organic liquids. It provides physical and thermodynamic properties required in process engineering simulations and calculations. This class is typically used for alcohols, ketones, esters, or user-defined organic liquids in simulations.</p>"},{"location":"user-guide/components/organic_liquids/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Organic Liquid  </li> <li><code>formula</code> (string): N/A (mixture or undefined)  </li> <li><code>molecular_weight</code> (float): User-defined (default = None)  </li> </ul>"},{"location":"user-guide/components/organic_liquids/#class-reference","title":"Class Reference","text":"<p><code>class OrganicLiquid()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/organic_liquids/#methods","title":"Methods","text":"<p>The properties of the <code>OrganicLiquid</code> class are calculated using the following methods, inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Always <code>\"liquid\"</code> under standard conditions.  </li> <li><code>density()</code>: User-defined or calculated from empirical correlations.  </li> <li><code>specific_heat()</code>: User-defined or estimated based on empirical correlations.  </li> <li><code>viscosity()</code>: User-defined or estimated using DIPPR or polynomial correlations.  </li> <li><code>thermal_conductivity()</code>: User-defined or estimated using polynomial correlation.  </li> <li><code>vapor_pressure()</code>: Calculated using Antoine-type correlation (if applicable).  </li> <li><code>enthalpy()</code>: Estimated from heat capacity correlation and integration over temperature range.  </li> </ul>"},{"location":"user-guide/components/organic_liquids/#examples","title":"Examples","text":"<pre><code>from processpi.components import OrganicLiquid\nfrom processpi.units import *\n\n# Define a generic organic liquid (example: acetic acid)\norganic_liquid = OrganicLiquid(\n    temperature=Temperature(25, \"C\"),\n    pressure=Pressure(1, \"atm\"),\n    molecular_weight=60.05  # Example molecular weight\n)\n\nprint(organic_liquid.density().to(\"kg/m3\"))\nprint(organic_liquid.viscosity().to(\"Pa\u00b7s\"))\nprint(organic_liquid.specific_heat().to(\"J/kgK\"))\nprint(organic_liquid.thermal_conductivity().to(\"W/mK\"))\nprint(organic_liquid.vapor_pressure().to(\"Pa\"))\nprint(organic_liquid.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/steam/","title":"Class: <code>Steam</code>","text":""},{"location":"user-guide/components/steam/#description","title":"Description","text":"<p>The <code>Steam</code> class represents water vapor (steam) and provides physical and thermodynamic properties required in process engineering simulations and calculations. All properties are retrieved from CoolProp, ensuring accurate and temperature/pressure-dependent values.</p>"},{"location":"user-guide/components/steam/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Steam  </li> <li><code>formula</code> (string): H\u2082O  </li> <li><code>molecular_weight</code> (float): 18.015 g/mol  </li> </ul>"},{"location":"user-guide/components/steam/#class-reference","title":"Class Reference","text":"<p><code>class Steam()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(100,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> </p>"},{"location":"user-guide/components/steam/#methods","title":"Methods","text":"<p>The properties of the <code>Steam</code> class are obtained using CoolProp:</p> <ul> <li><code>phase()</code>: Returns <code>\"gas\"</code>, <code>\"liquid\"</code>, or <code>\"two-phase\"</code> depending on temperature and pressure.  </li> <li><code>density()</code>: Returns the density (\u03c1) of steam at the given temperature and pressure.  </li> <li><code>specific_heat()</code>: Returns the specific heat capacity at constant pressure (Cp).  </li> <li><code>viscosity()</code>: Returns the dynamic viscosity (\u03bc).  </li> <li><code>thermal_conductivity()</code>: Returns the thermal conductivity (k).  </li> <li><code>vapor_pressure()</code>: Returns the saturation pressure at the given temperature.  </li> <li><code>enthalpy()</code>: Returns the enthalpy (h) per unit mass.  </li> </ul> <p>All calculations are accurate and sourced directly from CoolProp for water.</p>"},{"location":"user-guide/components/steam/#examples","title":"Examples","text":"<pre><code>from processpi.components import Steam\nfrom processpi.units import *\n\n# Create a Steam object at 150\u00b0C\nsteam = Steam(temperature=Temperature(150, \"C\"))\n\nprint(\"Density:\", steam.density().to(\"kg/m3\"))\nprint(\"Viscosity:\", steam.viscosity().to(\"Pa\u00b7s\"))\nprint(\"Specific Heat:\", steam.specific_heat().to(\"J/kgK\"))\nprint(\"Thermal Conductivity:\", steam.thermal_conductivity().to(\"W/mK\"))\nprint(\"Vapor Pressure:\", steam.vapor_pressure().to(\"Pa\"))\nprint(\"Enthalpy:\", steam.enthalpy().to(\"J/kg\"))\nprint(\"Phase:\", steam.phase())\n</code></pre>"},{"location":"user-guide/components/toluene/","title":"Class: <code>Toluene</code>","text":""},{"location":"user-guide/components/toluene/#description","title":"Description","text":"<p>The <code>Toluene</code> class represents the properties and constants for Toluene (C\u2087H\u2088). It provides physical and thermodynamic properties required in process engineering simulations and calculations. Properties can be obtained using correlations or CoolProp for accurate results.</p>"},{"location":"user-guide/components/toluene/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Toluene  </li> <li><code>formula</code> (string): C\u2087H\u2088  </li> <li><code>molecular_weight</code> (float): 92.14 g/mol  </li> </ul>"},{"location":"user-guide/components/toluene/#class-reference","title":"Class Reference","text":"<p><code>class Toluene()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/toluene/#methods","title":"Methods","text":"<p>The properties of the <code>Toluene</code> class are calculated using correlations or CoolProp:</p> <ul> <li><code>phase()</code>: Returns <code>\"liquid\"</code> or <code>\"gas\"</code> depending on temperature and pressure.  </li> <li><code>density()</code>: Returns the density (\u03c1) of Toluene.  </li> <li><code>specific_heat()</code>: Returns specific heat capacity (Cp) as a function of temperature.  </li> <li><code>viscosity()</code>: Returns dynamic viscosity (\u03bc) using empirical correlations.  </li> <li><code>thermal_conductivity()</code>: Returns thermal conductivity (k).  </li> <li><code>vapor_pressure()</code>: Returns the vapor pressure at the given temperature using Antoine correlation.  </li> <li><code>enthalpy()</code>: Returns enthalpy (h) or enthalpy of vaporization (\u0394Hvap) based on temperature.  </li> </ul>"},{"location":"user-guide/components/toluene/#examples","title":"Examples","text":"<pre><code>from processpi.components import Toluene\nfrom processpi.units import *\n\ntoluene = Toluene(temperature=Temperature(25, \"C\"))\n\nprint(\"Density:\", toluene.density().to(\"kg/m3\"))\nprint(\"Viscosity:\", toluene.viscosity().to(\"Pa\u00b7s\"))\nprint(\"Specific Heat:\", toluene.specific_heat().to(\"J/kgK\"))\nprint(\"Thermal Conductivity:\", toluene.thermal_conductivity().to(\"W/mK\"))\nprint(\"Vapor Pressure:\", toluene.vapor_pressure().to(\"Pa\"))\nprint(\"Enthalpy:\", toluene.enthalpy().to(\"J/kg\"))\nprint(\"Phase:\", toluene.phase())\n</code></pre>"},{"location":"user-guide/components/vapor/","title":"Class: <code>Vapor</code>","text":""},{"location":"user-guide/components/vapor/#description","title":"Description","text":"<p>The <code>Vapor</code> class represents the properties and constants for a generic vapor or gas phase substance. It provides physical and thermodynamic properties required in process engineering simulations and calculations. This class is typically used for vapors of liquids, process gases, or user-defined gas mixtures.  </p>"},{"location":"user-guide/components/vapor/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Vapor  </li> <li><code>formula</code> (string): N/A (mixture or undefined)  </li> <li><code>molecular_weight</code> (float): User-defined (default = None)  </li> </ul>"},{"location":"user-guide/components/vapor/#class-reference","title":"Class Reference","text":"<p><code>class Vapor()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> <code>molecular_weight</code>: <code>float</code>, default = <code>None</code> (required for calculations) <code>density</code>: <code>Density</code>, default = <code>None</code> <code>specific_heat</code>: <code>SpecificHeat</code>, default = <code>None</code> <code>viscosity</code>: <code>Viscosity</code>, default = <code>None</code> <code>thermal_conductivity</code>: <code>ThermalConductivity</code>, default = <code>None</code> <code>vapor_pressure</code>: <code>Pressure</code>, default = <code>None</code> * <code>enthalpy</code>: <code>HeatOfVaporization</code>, default = <code>None</code> </p>"},{"location":"user-guide/components/vapor/#methods","title":"Methods","text":"<p>The properties of the <code>Vapor</code> class are calculated using the following methods:</p> <ul> <li><code>phase()</code>: Always returns <code>\"gas\"</code> under standard simulation conditions.  </li> <li><code>density()</code>: Uses the Ideal Gas Law with user-provided molecular weight.  </li> <li><code>specific_heat()</code>: User-defined or estimated using empirical correlations.  </li> <li><code>viscosity()</code>: Uses Sutherland\u2019s Law or user input.  </li> <li><code>thermal_conductivity()</code>: User-defined or estimated using polynomial correlations.  </li> <li><code>vapor_pressure()</code>: Not typically applicable for gases (default = None).  </li> <li><code>enthalpy()</code>: Calculated using heat capacity correlation over temperature range.  </li> </ul>"},{"location":"user-guide/components/vapor/#examples","title":"Examples","text":"<pre><code>from processpi.components import Vapor\nfrom processpi.units import *\n\n# Define a vapor with approximate molecular weight (example: water vapor ~18.015 g/mol)\nwater_vapor = Vapor(\n    temperature=Temperature(100, \"C\"),\n    pressure=Pressure(1, \"atm\"),\n    molecular_weight=18.015\n)\n\nprint(\"Density:\", water_vapor.density().to(\"kg/m3\"))\nprint(\"Viscosity:\", water_vapor.viscosity().to(\"Pa\u00b7s\"))\nprint(\"Specific Heat:\", water_vapor.specific_heat().to(\"J/kgK\"))\nprint(\"Thermal Conductivity:\", water_vapor.thermal_conductivity().to(\"W/mK\"))\nprint(\"Enthalpy:\", water_vapor.enthalpy().to(\"J/kg\"))\nprint(\"Phase:\", water_vapor.phase())\n</code></pre>"},{"location":"user-guide/components/water/","title":"Class: <code>Water</code>","text":""},{"location":"user-guide/components/water/#description","title":"Description","text":"<p>The <code>Water</code> class represents water in liquid or vapor (steam) phase. It provides physical and thermodynamic properties required in process engineering simulations and calculations. All properties can be retrieved from CoolProp for accurate temperature- and pressure-dependent values.</p>"},{"location":"user-guide/components/water/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): Water  </li> <li><code>formula</code> (string): H\u2082O  </li> <li><code>molecular_weight</code> (float): 18.015 g/mol  </li> </ul>"},{"location":"user-guide/components/water/#class-reference","title":"Class Reference","text":"<p><code>class Water()</code></p> <p>Parameters: <code>temperature</code>: <code>Temperature</code>, default = <code>Temperature(25,\"C\")</code> <code>pressure</code>: <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code> </p>"},{"location":"user-guide/components/water/#methods","title":"Methods","text":"<p>The properties of the <code>Water</code> class are obtained using CoolProp:</p> <ul> <li><code>phase()</code>: Returns <code>\"liquid\"</code>, <code>\"gas\"</code>, or <code>\"two-phase\"</code> depending on temperature and pressure.  </li> <li><code>density()</code>: Returns the density (\u03c1) at the given temperature and pressure.  </li> <li><code>specific_heat()</code>: Returns the specific heat capacity at constant pressure (Cp).  </li> <li><code>viscosity()</code>: Returns the dynamic viscosity (\u03bc).  </li> <li><code>thermal_conductivity()</code>: Returns the thermal conductivity (k).  </li> <li><code>vapor_pressure()</code>: Returns the saturation pressure at the given temperature.  </li> <li><code>enthalpy()</code>: Returns the enthalpy (h) per unit mass.  </li> </ul> <p>All calculations are accurate and sourced directly from CoolProp.</p>"},{"location":"user-guide/components/water/#examples","title":"Examples","text":"<pre><code>from processpi.components import Water\nfrom processpi.units import *\n\n# Create a Water object at 150\u00b0C\nwater = Water(temperature=Temperature(150, \"C\"))\n\nprint(\"Density:\", water.density().to(\"kg/m3\"))\nprint(\"Viscosity:\", water.viscosity().to(\"Pa\u00b7s\"))\nprint(\"Specific Heat:\", water.specific_heat().to(\"J/kgK\"))\nprint(\"Thermal Conductivity:\", water.thermal_conductivity().to(\"W/mK\"))\nprint(\"Vapor Pressure:\", water.vapor_pressure().to(\"Pa\"))\nprint(\"Enthalpy:\", water.enthalpy().to(\"J/kg\"))\nprint(\"Phase:\", water.phase())\n</code></pre>"},{"location":"user-guide/pipe_lines/engine/","title":"Class: <code>PipelineEngine</code>","text":"<p>The <code>PipelineEngine</code> is the main interface for pipeline network analysis in ProcessPI. It performs component-wise and network-wide calculations, including pressure drops, velocities, Reynolds numbers, friction factors, and optimum pipe sizing.</p>"},{"location":"user-guide/pipe_lines/engine/#methods","title":"Methods","text":"<p><code>fit()</code> Configures the <code>PipelineEngine</code> instance by processing input parameters, converting units, normalizing keys, and setting default values.</p> <p>Parameters - <code>**kwargs</code>: Keyword arguments representing pipeline properties (<code>flowrate</code>, <code>diameter</code>, <code>velocity</code>, <code>length</code>) and solver configuration (<code>method</code>, <code>solver</code>).</p> <p>Functionality - Data Initialization: Stores inputs in <code>data</code> dictionary. - Alias Mapping: Normalizes input keys using a predefined <code>alias_map</code>.</p> Key Aliases <code>flowrate</code> <code>flow_rate</code>, <code>q</code>, <code>Q</code>, <code>flowrate</code> <code>mass_flowrate</code> <code>mass_flow</code>, <code>m_dot</code>, <code>mdot</code> <code>velocity</code> <code>v</code> <code>diameter</code> <code>dia</code>, <code>D</code>, <code>nominal_diameter</code>, <code>internal_diameter</code> <code>length</code> <code>len</code>, <code>L</code> <code>inlet_pressure</code> <code>in_pressure</code>, <code>pin</code>, <code>p_in</code> <code>outlet_pressure</code> <code>out_pressure</code>, <code>pout</code>, <code>p_out</code> <ul> <li>Default Values: Applies defaults for <code>assume_mm_for_numbers</code>, <code>flow_split</code>, <code>tolerance_m3s</code>, <code>pump_efficiency</code>, <code>method</code>, <code>hw_coefficient</code>, and <code>solver</code>.  </li> <li>Network Validation: Validates that <code>network</code> is a <code>PipelineNetwork</code> instance.  </li> <li>Attribute Binding: Binds normalized parameters (<code>flowrate</code>, <code>mass_flowrate</code>, <code>velocity</code>, <code>diameter</code>) as instance attributes.</li> </ul> <p>Returns - <code>PipelineEngine</code>: Configured instance for method chaining.</p> <p>Raises - <code>TypeError</code>: If <code>network</code> is not a <code>PipelineNetwork</code>.</p> <p><code>run()</code> Executes the pipeline simulation based on inputs from <code>fit()</code>. Chooses between Network Mode or Single Pipe Mode.</p> <p>Parameters - None (relies on <code>data</code> populated by <code>fit()</code>).</p> <p>Returns - <code>PipelineResults</code>: Encapsulates simulation results.</p> <p>Core Logic - Network Mode (with <code>network</code> object):   - Diameter Check \u2192 Auto-sizing if missing   - Flowrate Assignment \u2192 Distributes flow   - Network Solving \u2192 Pressure drop, head, pump power  </p> <ul> <li>Single Pipe Mode (without <code>network</code>):  </li> <li>If no diameter \u2192 Solves for optimum diameter  </li> <li>If diameter present \u2192 Standard hydraulic calculation  </li> </ul> <p>Results Output - Consolidates into <code>results_out</code> \u2192 returned as <code>PipelineResults</code>.</p> <p><code>summary()</code> Retrieves a summary of the most recent simulation.</p> <p>Parameters - None  </p> <p>Functionality - Checks if <code>_results</code> exists - Returns summary from <code>PipelineResults</code> or <code>None</code></p> <p>Returns - <code>PipelineResults</code> (summary) or <code>None</code></p>"},{"location":"user-guide/pipe_lines/engine/#engine-helper-functions","title":"Engine Helper Functions","text":"<p>These private helper methods are used internally by the <code>PipelineEngine</code> class to retrieve properties and perform the core hydraulic calculations for both single pipes and entire networks.</p>"},{"location":"user-guide/pipe_lines/engine/#property-resolvers","title":"Property Resolvers","text":"<p><code>_get_density</code> - Retrieves or infers fluid density. - Returns: <code>Density</code> - Raises: <code>ValueError</code> if not available.</p> <p><code>_get_viscosity</code> - Retrieves or infers viscosity. - Returns: <code>Viscosity</code> - Raises: <code>ValueError</code> if not available.</p> <p><code>_infer_flowrate</code> - Infers volumetric flow rate from:   - Direct <code>flowrate</code>   - <code>mass_flowrate</code> + density   - <code>velocity</code> + <code>diameter</code> - Returns: <code>VolumetricFlowRate</code> - Raises: <code>ValueError</code> if inference fails.</p> <p><code>_maybe_velocity</code> - Ensures velocity is available. - Calculates from <code>flowrate</code> and <code>diameter</code> if missing. - Returns: <code>Velocity</code> - Raises: <code>ValueError</code> if data is insufficient.</p> <p><code>_resolve_internal_diameter</code> Determines the internal diameter of a pipe using a priority order: 1. <code>pipe.internal_diameter</code> (explicitly defined) 2. <code>pipe.nominal_diameter</code> (nominal size) 3. <code>engine.diameter</code> (default from <code>fit</code>) 4. Fallback: Calculates hydraulically optimum diameter  </p> <ul> <li>Parameters: <code>pipe (Optional[Pipe])</code> </li> <li>Returns: <code>Diameter</code> </li> </ul>"},{"location":"user-guide/pipe_lines/engine/#primitive-calculators","title":"Primitive Calculators","text":"<p><code>_velocity</code> - Purpose: Calculates fluid velocity. - Parameters: <code>q (VolumetricFlowRate)</code>, <code>d (Diameter)</code> - Returns: <code>Velocity</code> </p> <p><code>_reynolds</code> - Purpose: Computes Reynolds number to determine flow regime. - Parameters: <code>v (Velocity)</code>, <code>d (Diameter)</code> - Returns: <code>float</code> </p> <p><code>_friction_factor</code> - Purpose: Friction factor using Colebrook-White correlation. - Parameters: <code>Re (float)</code>, <code>d (Diameter)</code>, <code>material (Optional[str])</code> - Returns: <code>float</code> </p> <p><code>_major_dp_pa</code> - Purpose: Major pressure drop due to friction. - Parameters: <code>f (float)</code>, <code>L (Length)</code>, <code>d (Diameter)</code>, <code>v (Velocity)</code> - Returns: <code>Pressure (Pa)</code> </p> <p><code>_minor_dp_pa</code> - Purpose: Minor losses due to fittings (elbows, valves, etc.). - Priority Order:   1. K-Factor (explicit)   2. Equivalent Length   3. Standards Lookup (fallback)  </p> <ul> <li>Parameters: <code>fitting (Fitting)</code>, <code>v (Velocity)</code>, <code>f (Optional[float])</code>, <code>d (Diameter)</code> </li> <li>Returns: <code>Pressure (Pa)</code> </li> </ul>"},{"location":"user-guide/pipe_lines/engine/#composite-calculator","title":"Composite Calculator","text":"<p><code>_pipe_calculation</code> Orchestrates all primitives to perform full pipe analysis.</p> <p>Functionality 1. Resolves diameter &amp; flow (via <code>_resolve_internal_diameter</code>, <code>_infer_flowrate</code>). 2. Computes Reynolds number &amp; friction factor. 3. Calculates major losses, minor losses, and elevation effects. 4. Aggregates results into a structured output.  </p> <p>Parameters: <code>pipe (Pipe)</code>, <code>flow_rate (Optional[VolumetricFlowRate])</code> Returns: <code>Dict[str, Any]</code> \u2192 Includes: - Diameter - Velocity - Reynolds number - Major losses - Minor losses - Elevation losses - Total pressure drop  </p>"},{"location":"user-guide/pipe_lines/engine/#series-and-network-evaluation","title":"Series and Network Evaluation","text":"<p><code>_compute_series</code> - Purpose: Calculates the total pressure drop for a series of pipes. In a series, the flow rate is constant, and the total pressure drop is the sum of the pressure drops of each individual pipe and its fittings. - Normalization: It intelligently handles various inputs (a single Pipe, a list of Pipes, or a list of branches) by flattening them into a single series of pipes before calculation. - Returns: A tuple containing the total pressure drop, a list of detailed reports for each pipe, and a summary of the series.  </p> <p><code>_compute_network</code> - Purpose: Serves as a high-level function for calculating the total pressure drop of a more complex network. It normalizes the network structure into a list of branches before performing calculations. - Logic: It iterates through each branch and calls <code>_pipe_calculation</code> to get the pressure drop for each pipe within that branch. It then aggregates these results to provide a comprehensive report for the entire network. - Returns: A tuple containing the total network pressure drop, a list of all element reports, and a network summary.  </p>"},{"location":"user-guide/pipe_lines/engine/#network-solvers","title":"Network Solvers","text":"<p><code>_resolve_parallel_flows</code> - Purpose: This is an iterative solver for parallel networks. It balances the flow rates between parallel branches until the pressure drop across all branches converges to a single value within a specified tolerance. - Logic: It starts with an initial guess (usually an equal flow split), calculates the pressure drop for each branch, and then adjusts the flow rates to reduce the difference in pressure drops. This process repeats until a stable solution is found.  </p> <p><code>_hardy_cross</code> - Purpose: Implements the Hardy-Cross method, a classic iterative approach for solving flow and pressure problems in pipe networks, especially those with loops. - Logic: It computes the flow corrections needed for each loop to satisfy the principle that the sum of head losses around any closed loop must be zero. This is a robust method for complex, interconnected systems.  </p> <p><code>_matrix_solver</code> and <code>_solve_network_dual</code> - Purpose: These functions provide alternative, iterative methods for solving complex parallel networks. They use a similar principle to the Hardy-Cross method, iteratively adjusting branch flow rates to balance the pressure drops until the solution converges.  </p>"},{"location":"user-guide/pipe_lines/engine/#utility-helpers","title":"Utility Helpers","text":"<ul> <li><code>_select_standard_diameter</code>: Maps an ideal calculated diameter to the nearest available standard pipe size.  </li> <li><code>_as_pressure</code>: Ensures that a given input is correctly converted to a Pressure object with a specified unit.  </li> <li><code>_pump_gain_pa</code>: Calculates the pressure gain provided by a pump, converting from either head or inlet/outlet pressure values.  </li> <li><code>_equipment_dp_pa</code>: Handles the pressure drop of non-pipe equipment, such as filters or heat exchangers, converting units as needed.  </li> <li><code>_fitting_dp_pa</code>: A specialized helper for calculating the pressure drop of a single fitting using K-factors or equivalent lengths.  </li> <li><code>_normalize_branches</code>: A crucial function for preparing network data. It takes various network inputs and flattens them into a consistent, nested list structure (<code>list[list[Pipe]]</code>), making them ready for the solvers.  </li> </ul>"},{"location":"user-guide/pipe_lines/engine/#key-features","title":"\u2705 Key Features","text":"<p>Single Pipeline Analysis - Pressure drop &amp; flow rate via:   - Darcy\u2013Weisbach (precise)   - Hazen\u2013Williams (quick for water) - Accounts for elevation, roughness, fittings, valves.</p> <p>Network Analysis - Branched/looped networks using:   - Hardy\u2013Cross iteration   - Direct matrix solver - Supports plant utility networks, firewater loops, cooling systems.</p> <p>Component Loss Modeling - Inline equipment &amp; fittings (valves, bends, tees, orifices). - Uses K-factor data for accurate modeling.</p> <p>Elevation &amp; Static Head - Includes elevation effects. - Suitable for tanks, hilly terrains, sump transfers.</p> <p>Multiple Solver Options</p> Solver Best For Notes Darcy\u2013Weisbach Precise engineering calcs Custom fluid properties supported Hazen\u2013Williams Quick water line checks Assumes low viscosity Hardy\u2013Cross Small networks (\u226410 pipes) Simple, easy debugging Matrix Solver Moderate networks with loops Robust, faster <p>Typical Use Cases - Utility water networks - Chemical transfer lines - Cooling water loops - Firewater ring mains - Static head studies  </p> <p>Current Limitations - Steady-state only - Single-phase only - Constant density/viscosity - No pump curves - Limited to ~50 pipes  </p> <p>Planned Roadmap</p> Stage Feature Short-term Newton\u2013Raphson solver for larger networks Mid-term Pump curve integration + auto pump point Mid-term Compressible (gas) network support Long-term Dynamic/transient (surge, water hammer) Long-term Two-phase and slurry flow models"},{"location":"user-guide/pipe_lines/engine/#example-usage","title":"\ud83d\udcbb Example Usage","text":"<p>Dry Chlorine Gas Pipeline</p> <pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\n\n# Define fluid and mass flow\nfluid = Chlorine(temperature=Temperature(20, \"C\"), pressure=Pressure(6, \"atm\"))\nmass_flow = MassFlowRate(10000, \"kg/h\")\n\nprint(fluid.density())\n\n# Create engine without an explicit network\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow\n    # realistic pipe length can be added\n)\nresults = model.run()  # auto diameter sizing\nresults.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"user-guide/pipe_lines/fittings/","title":"Class: <code>Fitting</code>","text":"<p>The <code>Fitting</code> class represents a pipe fitting used in hydraulic calculations. It provides access to equivalent length (Le) and K-factor values for fittings, which are essential in computing minor losses in pipelines.</p>"},{"location":"user-guide/pipe_lines/fittings/#parameters","title":"Parameters","text":"<ul> <li> <p><code>fitting_type</code> (<code>str</code>)   The type of fitting (e.g., <code>\"elbow_90\"</code>, <code>\"tee_branch\"</code>, <code>\"valve_gate\"</code>).   Must be recognized by the standards database (<code>processpi.pipelines.standards</code>).   Standard Fitting Strings</p> <p>The following <code>fitting_type</code> are supported in ProcessPI:</p> <ul> <li><code>gate_valve</code> </li> <li><code>globe_valve</code> </li> <li><code>angle_valve</code> </li> <li><code>ball_valve</code> </li> <li><code>plug_valve_straightway</code> </li> <li><code>plug_valve_3_way_through_flow</code> </li> <li><code>plug_valve_branch_flow</code> </li> <li><code>swing_check_valve</code> </li> <li><code>lift_check_valve</code> </li> <li><code>standard_elbow_90_deg</code> </li> <li><code>standard_elbow_45_deg</code> </li> <li><code>long_radius_90_deg</code> </li> <li><code>standard_tee_through_flow</code> </li> <li><code>standard_tee_through_branch</code> </li> <li><code>miter_bends_alpha_0</code> </li> <li><code>miter_bends_alpha_30</code> </li> <li><code>miter_bends_alpha_60</code> </li> <li><code>miter_bends_alpha_90</code> </li> <li><code>sudden_contraction</code> </li> <li><code>sudden_expansion</code> </li> <li><code>entrance_sharp</code> </li> <li><code>entrance_rounded</code> </li> <li><code>exit</code> </li> </ul> </li> <li> <p><code>diameter</code> (<code>Optional[Diameter]</code>, default=<code>None</code>)   Internal diameter of the pipe associated with this fitting.   Required for fittings where loss coefficients depend on pipe size.  </p> </li> <li> <p><code>quantity</code> (<code>int</code>, default=<code>1</code>)   Number of identical fittings of this type.   Must be a positive integer.  </p> </li> </ul>"},{"location":"user-guide/pipe_lines/fittings/#attributes","title":"Attributes","text":"<ul> <li><code>fitting_type</code> (<code>str</code>) \u2013 Name/type of fitting.  </li> <li><code>diameter</code> (<code>Optional[Diameter]</code>) \u2013 Pipe diameter associated with the fitting.  </li> <li><code>quantity</code> (<code>int</code>) \u2013 Count of fittings.  </li> </ul>"},{"location":"user-guide/pipe_lines/fittings/#methods","title":"Methods","text":"<p><code>equivalent_length()</code> Computes the equivalent length (Le) of the fitting. This is the effective pipe length that produces the same pressure drop as the fitting.</p> <p>Returns - <code>Length</code> (in meters) if available. - <code>None</code> if not applicable.  </p> <p>Raises - <code>ValueError</code>: If the equivalent length requires a diameter but none is provided.  </p> <p><code>k_factor()</code> Retrieves the K-factor (dimensionless loss coefficient) of the fitting.  </p> <p>Returns - <code>float</code>: K-factor value. - <code>None</code>: If not applicable.  </p> <p>Raises - <code>ValueError</code>: If diameter is required but not provided.  </p> <p><code>calculate()</code> Returns a dictionary summary of the fitting, including geometry and loss data.</p> <p>Returns <pre><code>{\n  \"fitting_type\": str,\n  \"quantity\": int,\n  \"diameter_in\": float or None,       # diameter in inches\n  \"diameter_m\": float or None,        # diameter in meters\n  \"equivalent_length_m\": float or None,\n  \"k_factor\": float or None\n}\n</code></pre></p> <p>\u2705 Example Usage <pre><code>from processpi.units import Diameter\nfrom processpi.pipelines.fittings import Fitting\n\n# Define a 90-degree elbow fitting for a 4-inch pipe\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", diameter=Diameter(4, \"in\"), quantity=2)\n\n# Get equivalent length and K-factor\nprint(elbow.equivalent_length())\nprint(elbow.k_factor())\n\n# Export fitting details\nprint(elbow.calculate())\n</code></pre></p>"},{"location":"user-guide/pipe_lines/network/","title":"Pipe Line Networks","text":"<p>The Pipeline Network module provides a flexible framework for modeling process piping systems. It supports both graph-based networks (nodes &amp; edges) and hierarchical block construction (series/parallel), making it compatible with the <code>PipelineEngine</code>.</p>"},{"location":"user-guide/pipe_lines/network/#classes-and-types","title":"Classes and Types","text":"<p><code>Node</code> Represents a junction or endpoint in the network.</p> <ul> <li>Attributes:</li> <li><code>name</code> (str): Unique identifier.</li> <li><code>elevation</code> (float): Node elevation (m).</li> <li><code>pressure</code> (Pressure, optional).</li> <li><code>flow_rate</code> (VolumetricFlowRate, optional).</li> <li><code>connected_components</code> (List[Any]): Components linked to this node.</li> </ul> <p><code>Branch</code></p> <p>A branch in a parallel block can be one of: - <code>PipelineNetwork</code> - <code>Pipe</code> - <code>Fitting</code> - <code>Pump</code> - <code>Vessel</code> - <code>Equipment</code></p> <p><code>PipelineNetwork</code> Defines the structure of a pipeline network.</p> <ul> <li>Attributes:</li> <li><code>name</code> (str): Identifier for the network.</li> <li><code>nodes</code> (Dict[str, Node]): Dictionary of nodes.</li> <li><code>elements</code> (List[Branch]): Contained components.</li> <li><code>connection_type</code> (str): <code>\"series\"</code> or <code>\"parallel\"</code>.</li> </ul>"},{"location":"user-guide/pipe_lines/network/#key-methods","title":"Key Methods","text":"Method Purpose <code>series(name, *elements)</code> Create a series block with elements. <code>parallel(name, *branches)</code> Create a parallel block with branches. <code>add(*elements)</code> Add elements directly. <code>add_series(*elements)</code> Add elements as a series group. <code>add_parallel(*branches)</code> Add elements as a parallel group. <code>add_node(name, elevation=0.0)</code> Add a new node. <code>get_node(name)</code> Fetch an existing node. <code>add_edge(component, start_node, end_node)</code> Connect two nodes via a component. <code>add_fitting(fitting, at_node)</code> Add a fitting at a node. <code>add_subnetwork(subnetwork)</code> Add a nested PipelineNetwork. <code>validate()</code> Perform error checks (unconnected nodes, missing data). <code>describe(level=0)</code> Hierarchical description of the network. <code>schematic()</code> ASCII schematic diagram. <code>get_all_pipes()</code> Returns all <code>Pipe</code> objects recursively. <code>visualize_network(compact=False)</code> Interactive visualization (Plotly)."},{"location":"user-guide/pipe_lines/network/#validation","title":"Validation","text":"<p>The <code>validate()</code> method checks for: - Unconnected nodes. - Missing diameter/K/L data in fittings. - Pumps with missing head/pressures. - Equipment with missing pressure drop.</p>"},{"location":"user-guide/pipe_lines/network/#ascii-schematic-example","title":"ASCII Schematic Example","text":"<pre><code>MainNet [series]\n  \u2514\u25001. Pipe-1\n  \u2514\u25002. Pump-A\n  \u2514\u2500SubNet [parallel]\n      \u250c\u2500(branch 1)\n      \u2502   \u2514\u2500 Pipe-2\n      \u250c\u2500(branch 2)\n      \u2502   \u2514\u2500 Pipe-3\n</code></pre>"},{"location":"user-guide/pipe_lines/network/#example-usage","title":"Example Usage","text":"<pre><code>from processpi.pipelines.network import PipelineNetwork, Node\nfrom processpi.pipelines.pipes import Pipe\n\n# Create nodes\nnet = PipelineNetwork(\"MainNet\")\nnet.add_node(\"A\", elevation=0.0)\nnet.add_node(\"B\", elevation=5.0)\n\n# Add a pipe between nodes\npipe = Pipe(diameter=\"100 mm\", length=20)\nnet.add_edge(pipe, \"A\", \"B\")\n\n# Validate\nnet.validate()\n\n# Describe structure\nprint(net.describe())\n\n# Show ASCII schematic\nprint(net.schematic())\n</code></pre>"},{"location":"user-guide/pipe_lines/pipes/","title":"Class: <code>Pipe</code>","text":""},{"location":"user-guide/pipe_lines/pipes/#description","title":"Description","text":"<p>The <code>Pipe</code> class represents a straight section of a process pipeline. It encapsulates geometry (diameter, length), material properties (roughness), and state (inlet/outlet pressure). This class is central to flow and pressure drop calculations and is compatible with optimization workflows.</p>"},{"location":"user-guide/pipe_lines/pipes/#initialization","title":"Initialization","text":"<pre><code>Pipe(\n    name: str,\n    nominal_diameter: Optional[Diameter] = None,\n    schedule: str = \"STD\",\n    material: str = \"CS\",\n    length: Optional[Length] = None,\n    inlet_pressure: Optional[Pressure] = None,\n    outlet_pressure: Optional[Pressure] = None,\n    internal_diameter: Optional[Diameter] = None,\n    flow_rate: Optional[VolumetricFlowRate] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Parameters - <code>name</code> (<code>str</code>): Unique name of the pipe. - <code>nominal_diameter</code> (<code>Optional[Diameter]</code>): Nominal pipe size. If <code>None</code>, the pipe is considered a candidate for optimization. - <code>schedule</code> (<code>str</code>, default=<code>\"STD\"</code>): Pipe schedule. - <code>material</code> (<code>str</code>, default=<code>\"CS\"</code>): Pipe material. - <code>length</code> (<code>Optional[Length]</code>): Pipe length. Defaults to <code>1.0 m</code> if not provided. - <code>inlet_pressure</code> (<code>Optional[Pressure]</code>): Inlet pressure of the pipe. - <code>outlet_pressure</code> (<code>Optional[Pressure]</code>): Outlet pressure of the pipe. - <code>internal_diameter</code> (<code>Optional[Diameter]</code>): Explicit internal diameter. Overrides calculated internal diameter if given. - <code>flow_rate</code> (<code>Optional[VolumetricFlowRate]</code>): Initial flow rate for solver. Defaults to <code>0.001 m\u00b3/s</code>. - <code>**kwargs</code> (<code>Any</code>): Additional custom parameters stored in the base class.  </p> <p>Attributes - <code>is_optimization_target</code> (<code>bool</code>): Whether this pipe is flagged for optimization (true if no diameter was provided). - <code>nominal_diameter</code> (<code>Optional[Diameter]</code>): Nominal pipe diameter. - <code>schedule</code> (<code>str</code>): Pipe schedule. - <code>material</code> (<code>str</code>): Pipe material. - <code>length</code> (<code>Length</code>): Pipe length. - <code>roughness</code> (<code>Variable</code>): Material roughness (from standards). - <code>internal_diameter</code> (<code>Optional[Diameter]</code>): Internal diameter. - <code>inlet_pressure</code> (<code>Optional[Pressure]</code>): Inlet pressure. - <code>outlet_pressure</code> (<code>Optional[Pressure]</code>): Outlet pressure. - <code>flow_rate</code> (<code>VolumetricFlowRate</code>): Flow rate through the pipe. - <code>start_node</code> (<code>Optional[Any]</code>): Start node (set externally in networks). - <code>end_node</code> (<code>Optional[Any]</code>): End node (set externally in networks).  </p>"},{"location":"user-guide/pipe_lines/pipes/#methods","title":"Methods","text":"<p><code>cross_sectional_area()</code> Returns the internal cross-sectional area of the pipe.  </p> <p>Returns: - <code>Variable</code>: Area in square meters (<code>m\u00b2</code>), or <code>None</code> if no internal diameter is defined.</p> <p><code>surface_area()</code> Returns the external surface area of the pipe.  </p> <p>Returns: - <code>Variable</code>: Surface area in square meters (<code>m\u00b2</code>), or <code>None</code> if no nominal diameter is defined.</p> <p><code>pressure_difference()</code> Computes the pressure difference between inlet and outlet.  </p> <p>Returns: - <code>Pressure</code>: \u0394P = Inlet - Outlet, or <code>None</code> if pressures are not defined.</p> <p><code>to_dict()</code> Exports all key pipe data as a dictionary.  </p> <p>Returns: - <code>Dict[str, Any]</code>: Dictionary of all pipe attributes and calculated values.</p> <p><code>calculate()</code> Compatibility hook for PipelineEngine. Returns the pipe data dictionary.  </p> <p>Returns: - <code>Dict[str, Any]</code>: Same as <code>to_dict()</code>.</p>"},{"location":"user-guide/pipe_lines/pipes/#examples","title":"Examples","text":"<pre><code>from processpi.pipelines.pipes import Pipe\nfrom processpi.units import Diameter, Length, Pressure, VolumetricFlowRate\n\n# Create a pipe with specified dimensions and pressures\npipe = Pipe(\n    name=\"P-101\",\n    nominal_diameter=Diameter(0.1, \"m\"),\n    length=Length(5.0, \"m\"),\n    inlet_pressure=Pressure(3.0, \"bar\"),\n    outlet_pressure=Pressure(2.8, \"bar\"),\n    flow_rate=VolumetricFlowRate(0.01, \"m3/s\")\n)\n\nprint(pipe.cross_sectional_area())\nprint(pipe.pressure_difference())\nprint(pipe.to_dict())\n</code></pre>"},{"location":"user-guide/units/area/","title":"Class: <code>Area</code>","text":"<p>The <code>Area</code> class is a subclass of <code>Variable</code> designed to represent a two-dimensional quantity with unit-aware capabilities. It ensures accurate calculations by storing all values internally in its base SI unit, square meters (m<sup>2</sup>).</p>"},{"location":"user-guide/units/area/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Square Meters (m<sup>2</sup>) square meters m2 1 square centimeters cm2 0.0001 square millimeters mm2 0.000001 square kilometers km2 1,000,000 square inches in2 0.00064516 square feet ft2 0.092903 square yards yd2 0.836127 acres acre 4046.86 hectares ha 10000"},{"location":"user-guide/units/area/#class-reference","title":"Class Reference","text":"<p><code>class Area(value, units='m2')</code></p> <p>A class for handling area measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the area. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m2'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create an Area object of 100 square centimeters  \n&gt;&gt;&gt; a1 = Area(100, \"cm2\")\n\n# Create an Area object of 0.5 square meters  \n&gt;&gt;&gt; a2 = Area(0.5, \"m2\")\n</code></pre></p>"},{"location":"user-guide/units/area/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the area, always in square meters (m2). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/area/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Area</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Area</code>   A new <code>Area</code> object with the same <code>value</code>, represented in the target <code>units</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize an area of 100 square meters  \n&gt;&gt;&gt; house_area_m2 = Area(100)\n\n# Convert to square feet  \n&gt;&gt;&gt; house_area_ft2 = house_area_m2.to(\"ft2\")\n\n&gt;&gt;&gt; print(house_area_ft2)  \n1076.391 ft2\n</code></pre></p>"},{"location":"user-guide/units/area/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The <code>Area</code> class supports addition (<code>+</code>) and comparison (<code>==</code>).</p> <ul> <li><code>__add__(self, other)</code>   Adds two Area objects. The result is a new Area object with the unit of the first operand.  </li> <li><code>__eq__(self, other)</code>   Compares two Area objects for equality based on their internal meter values.</li> </ul> <p>Examples:</p> <pre><code># Create two Area objects  \n&gt;&gt;&gt; area1 = Area(1, \"m2\")  \n&gt;&gt;&gt; area2 = Area(500, \"cm2\")\n\n# Add them together  \n&gt;&gt;&gt; total_area = area1 + area2\n\n&gt;&gt;&gt; print(total_area)  \n1.05 m2\n</code></pre>"},{"location":"user-guide/units/area/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the area, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/density/","title":"Class: <code>Density</code>","text":"<p>The <code>Density</code> class is a subclass of <code>Variable</code> designed to represent the mass per unit volume of a substance. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms per cubic meter (kg/m<sup>3</sup>).</p>"},{"location":"user-guide/units/density/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Kilograms per Cubic Meter (kg/m<sup>3</sup>) kilograms per cubic meter kg/m3 1 grams per cubic centimeter g/cm3 1000 grams per milliliter g/mL 1000 pounds per cubic foot lb/ft3 16.0185 pounds per cubic inch lb/in3 27679.9"},{"location":"user-guide/units/density/#class-reference","title":"Class Reference","text":"<p><code>class Density(value, units='kg/m3')</code></p> <p>A class for handling density measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the density. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'kg/m3'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Density object of 1000 kg/m^3 (the density of water)  \n&gt;&gt;&gt; d1 = Density(1000)\n\n# Create a Density object of 1 g/cm^3  \n&gt;&gt;&gt; d2 = Density(1, \"g/cm3\")\n</code></pre></p>"},{"location":"user-guide/units/density/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the density, always in kilograms per cubic meter (kg/m3). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/density/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Density</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Density</code>   A new <code>Density</code> object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a density of 1000 kg/m^3  \n&gt;&gt;&gt; water_density_kg = Density(1000)\n\n# Convert to g/cm^3  \n&gt;&gt;&gt; water_density_g = water_density_kg.to(\"g/cm3\")\n\n&gt;&gt;&gt; print(water_density_g)  \n1.0 g/cm3\n</code></pre></p>"},{"location":"user-guide/units/density/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the density, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/diameter/","title":"Class: <code>Diameter</code>","text":"<p>The <code>Diameter</code> class is a subclass of <code>Variable</code> designed to represent the length of a diameter. It ensures accurate calculations by storing all values internally in its base SI unit, meters (m).</p>"},{"location":"user-guide/units/diameter/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Meters (m) meters m 1 centimeters cm 0.01 millimeters mm 0.001 inches in 0.0254 feet ft 0.3048"},{"location":"user-guide/units/diameter/#class-reference","title":"Class Reference","text":"<p><code>class Diameter(value, units='m')</code></p> <p>A class for handling diameter measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the diameter. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>ypeError</code> : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Diameter object of 10 meters  \n&gt;&gt;&gt; d1 = Diameter(10)\n\n# Create a Diameter object of 12 inches  \n&gt;&gt;&gt; d2 = Diameter(12, \"in\")\n</code></pre></p>"},{"location":"user-guide/units/diameter/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the diameter, always in meters (m). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/diameter/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Diameter</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Diameter</code>   A new <code>Diameter</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a diameter of 5 meters  \n&gt;&gt;&gt; pipe_diameter_m = Diameter(5)\n\n# Convert to feet  \n&gt;&gt;&gt; pipe_diameter_ft = pipe_diameter_m.to(\"ft\")\n\n&gt;&gt;&gt; print(pipe_diameter_ft)  \n16.4042 ft\n</code></pre></p>"},{"location":"user-guide/units/diameter/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the diameter, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object, suitable for debugging.</li> </ul>"},{"location":"user-guide/units/dimensionless/","title":"Class: <code>Dimensionless</code>","text":"<p>The <code>Dimensionless</code> class is a subclass of <code>Variable</code> designed to represent quantities that do not have physical units. These are often ratios of other quantities, such as Reynolds number, friction factor, or efficiency. The class provides a foundation for performing arithmetic operations on these numbers while maintaining clarity about their unitless nature.</p>"},{"location":"user-guide/units/dimensionless/#supported-units","title":"Supported Units","text":"<p>By definition, dimensionless quantities are unitless. No units are supported for this class.</p>"},{"location":"user-guide/units/dimensionless/#class-reference","title":"Class Reference","text":"<p><code>class Dimensionless(value)</code></p> <p>A class for handling dimensionless quantities. It ensures that the value is a number and provides standard arithmetic operations.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the dimensionless quantity.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>value</code> is not a numeric type (<code>int</code> or <code>float</code>).</li> </ul> <p>Examples: <pre><code># Create a Dimensionless object for Reynolds number  \n&gt;&gt;&gt; Re = Dimensionless(5000)\n\n# Create a Dimensionless object for friction factor  \n&gt;&gt;&gt; f = Dimensionless(0.02)\n</code></pre></p>"},{"location":"user-guide/units/dimensionless/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the dimensionless quantity. This is the internal representation. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization."},{"location":"user-guide/units/dimensionless/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the dimensionless quantity, rounded to six decimal places, followed by (dimensionless).  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging, such as 5000 (dimensionless).  </li> <li><code>__format__(self, format_spec)</code>   Allows for custom string formatting of the numeric value, such as with f-strings.</li> </ul>"},{"location":"user-guide/units/heat_flow/","title":"Class: <code>HeatFlow</code>","text":"<p>The <code>HeatFlow</code> class is a subclass of <code>Variable</code> designed to represent the total heat transfer rate. It ensures accurate calculations by storing all values internally in its base SI unit, Watts (W).</p>"},{"location":"user-guide/units/heat_flow/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Watts (W) Watts W 1 kilowatts kW 1000 megawatts MW 106 British Thermal Units per hour BTU/h 0.293071 calories per second cal/s 4.184 kilocalories per hour kcal/h 1.163"},{"location":"user-guide/units/heat_flow/#class-reference","title":"Class Reference","text":"<p><code>class HeatFlow(value, units='W')</code></p> <p>A class for handling heat flow measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the heat flow. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'W'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeErro</code>r : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a HeatFlow object of 5000 Watts  \n&gt;&gt;&gt; Q1 = HeatFlow(5000, \"W\")\n\n# Create a HeatFlow object of 5 kilowatts  \n&gt;&gt;&gt; Q2 = HeatFlow(5, \"kW\")\n</code></pre></p>"},{"location":"user-guide/units/heat_flow/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the heat flow, always in Watts (W). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/heat_flow/#methods","title":"Methods","text":"<p><code>to(target_unit</code>)</p> <p>Returns a new <code>HeatFlow</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The <code>unit</code> to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>HeatFlow</code>   A new <code>HeatFlow</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a heat flow of 5000 Watts  \n&gt;&gt;&gt; heat_flow_W = HeatFlow(5000)\n\n# Convert to kilowatts  \n&gt;&gt;&gt; heat_flow_kW = heat_flow_W.to(\"kW\")\n\n&gt;&gt;&gt; print(heat_flow_kW)  \n5.0 kW\n</code></pre></p>"},{"location":"user-guide/units/heat_flow/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the heat flow, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_flux/","title":"Class: <code>HeatFlux</code>","text":"<p>The <code>HeatFlux</code> class is a subclass of <code>Variable</code> designed to represent heat transfer rate per unit area. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per square meter (W/m<sup>2</sup>).</p>"},{"location":"user-guide/units/heat_flux/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Watts per Square Meter (W/m<sup>2</sup>) Watts per square meter W/m2 1 kilowatts per square meter kW/m2 1000 Watts per square centimeter W/cm2 10000 British Thermal Units per hour per square foot BTU/hft2 3.1546 calories per second per square centimeter cal/scm2 41840"},{"location":"user-guide/units/heat_flux/#class-reference","title":"Class Reference","text":"<p><code>class HeatFlux(value, units='W/m2')</code></p> <p>A class for handling heat flux measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the heat flux. Must be a non-negative number.  </li> <li><code>units</code> : <code>st</code>r, default=<code>'W/m2'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a HeatFlux object of 300 W/m\u00b2  \n&gt;&gt;&gt; q1 = HeatFlux(300)\n\n# Create a HeatFlux object of 0.3 kW/m\u00b2  \n&gt;&gt;&gt; q2 = HeatFlux(0.3, \"kW/m2\")\n</code></pre></p>"},{"location":"user-guide/units/heat_flux/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the heat flux, always in Watts per square meter (W/m<sup>2</sup>). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/heat_flux/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>HeatFlux</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>HeatFlux</code>   A new <code>HeatFlux</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a heat flux of 1000 W/m\u00b2  \n&gt;&gt;&gt; heat_flux_W = HeatFlux(1000)\n\n# Convert to kW/m\u00b2  \n&gt;&gt;&gt; heat_flux_kW = heat_flux_W.to(\"kW/m2\")\n\n&gt;&gt;&gt; print(heat_flux_kW)  \n1.0 kW/m2\n</code></pre></p>"},{"location":"user-guide/units/heat_flux/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the heat flux, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_of_vapouraization/","title":"Class: <code>HeatOfVaporization</code>","text":"<p>The <code>HeatOfVaporization</code> class is a subclass of <code>Variable</code> designed to represent the heat required to change a unit mass of a substance from liquid to gas at a given pressure. It ensures accurate calculations by storing all values internally in its base SI unit, Joules per kilogram (J/kg).</p>"},{"location":"user-guide/units/heat_of_vapouraization/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Joules per Kilogram (J/kg) Joules per kilogram J/kg 1 kilojoules per kilogram kJ/kg 103 megajoules per kilogram MJ/kg 106 calories per gram cal/g 4184 British Thermal Units per pound BTU/lb 2326"},{"location":"user-guide/units/heat_of_vapouraization/#class-reference","title":"Class Reference","text":"<p><code>class HeatOfVaporization(value, units='J/kg')</code></p> <p>A class for handling heat of vaporization measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the heat of vaporization. Must be a non-negative number.  </li> <li><code>units</code> : <code>st</code>r, default=<code>'J/kg'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a HeatOfVaporization object of 2.257 MJ/kg  \n&gt;&gt;&gt; hv1 = HeatOfVaporization(2257000)\n\n# Create a HeatOfVaporization object of 540 cal/g  \n&gt;&gt;&gt; hv2 = HeatOfVaporization(540, \"cal/g\")\n</code></pre></p>"},{"location":"user-guide/units/heat_of_vapouraization/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the heat of vaporization, always in Joules per kilogram (J/kg). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/heat_of_vapouraization/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>HeatOfVaporization</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>HeatOfVaporization</code>   A new <code>HeatOfVaporization</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueErro</code>r : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a heat of vaporization of 2257000 J/kg  \n&gt;&gt;&gt; water_hv = HeatOfVaporization(2257000, \"J/kg\")\n\n# Convert to cal/g  \n&gt;&gt;&gt; water_hv_cal = water_hv.to(\"cal/g\")\n\n&gt;&gt;&gt; print(water_hv_cal)  \n540.057352 cal/g\n</code></pre></p>"},{"location":"user-guide/units/heat_of_vapouraization/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the heat of vaporization, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_transfer_coefficient/","title":"Class: <code>HeatTransferCoefficient</code>","text":"<p>The <code>HeatTransferCoefficient</code> class is a subclass of <code>Variable</code> designed to represent the heat transfer rate per unit area per unit temperature difference. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per square meter-Kelvin (W/m<sup>2</sup>.K).</p>"},{"location":"user-guide/units/heat_transfer_coefficient/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Watts per Square Meter-Kelvin (W/m<sup>2</sup>.K) Watts per square meter-Kelvin W/m2K 1 kilowatts per square meter-Kelvin kW/m2K 1000 calories per second per square centimeter-degree Celsius cal/scm2C 41840 British Thermal Units per hour per square foot-degree Fahrenheit BTU/hft2F 5.678263"},{"location":"user-guide/units/heat_transfer_coefficient/#class-reference","title":"Class Reference","text":"<p><code>class HeatTransferCoefficient(value, units='W/m2K')</code></p> <p>A class for handling heat transfer coefficient measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the heat transfer coefficient. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'W/m2K'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a HeatTransferCoefficient object of 200 W/m\u00b2K  \n&gt;&gt;&gt; h1 = HeatTransferCoefficient(200)\n\n# Create a HeatTransferCoefficient object of 0.2 kW/m\u00b2K  \n&gt;&gt;&gt; h2 = HeatTransferCoefficient(0.2, \"kW/m2K\")\n</code></pre></p>"},{"location":"user-guide/units/heat_transfer_coefficient/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the heat transfer coefficient, always in Watts per square meter-Kelvin (W/m<sup>2</sup>.K). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/heat_transfer_coefficient/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>HeatTransferCoefficient</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>HeatTransferCoefficient</code>   A new <code>HeatTransferCoefficient</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a heat transfer coefficient of 500 W/m\u00b2K  \n&gt;&gt;&gt; h_W = HeatTransferCoefficient(500)\n\n# Convert to BTU/hft\u00b2F  \n&gt;&gt;&gt; h_BTU = h_W.to(\"BTU/hft2F\")\n\n&gt;&gt;&gt; print(h_BTU)  \n88.058309 BTU/hft2F\n</code></pre></p>"},{"location":"user-guide/units/heat_transfer_coefficient/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the heat transfer coefficient, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/length/","title":"Class: <code>Length</code>","text":"<p>The <code>Length</code> class is a subclass of <code>Variable</code> designed to represent a one-dimensional quantity with unit-aware capabilities. It ensures accurate calculations by storing all values internally in its base unit, meters (m).</p>"},{"location":"user-guide/units/length/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Meters (m) meters m 1 centimeters cm 0.01 millimeters mm 0.001 inches in 0.0254 feet ft 0.3048 kilometers km 1000"},{"location":"user-guide/units/length/#class-reference","title":"Class Reference","text":"<p><code>class Length(value, units='m')</code></p> <p>A class for handling length measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the length. Must be a positive number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Length object of 30 meters  \n&gt;&gt;&gt; length1 = Length(30)\n\n# Create a Length object of 30 inches  \n&gt;&gt;&gt; length2 = Length(30, \"in\")\n</code></pre></p>"},{"location":"user-guide/units/length/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the length, always in meters (m). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/length/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Length</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the [supported units]</li> </ul> <p>Returns:</p> <ul> <li><code>Length</code>   A new <code>Length</code> object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a length of 5 meters  \n&gt;&gt;&gt; distance_m = Length(5)\n\n# Convert to feet  \n&gt;&gt;&gt; distance_ft = distance_m.to(\"ft\")\n\n&gt;&gt;&gt; print(distance_ft)  \n16.4042 ft\n</code></pre> Arithmetic Operations</p> <p>The <code>Length</code> class supports addition (<code>+</code>) and comparison (<code>==</code>).</p> <ul> <li><code>__add__(self, other)</code>   Adds two Length objects. The result is a new Length object with the unit of the first operand.  </li> <li><code>__eq__(self, other)</code>   Compares two Length objects for equality based on their internal meter values.</li> </ul> <p>Examples: <pre><code># Create two Length objects  \n&gt;&gt;&gt; length1 = Length(1, \"m\")  \n&gt;&gt;&gt; length2 = Length(10, \"cm\")\n\n# Add them together  \n&gt;&gt;&gt; total_length = length1 + length2\n\n&gt;&gt;&gt; print(total_length)  \n1.1 m\n</code></pre> String Representation</p> <ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the length, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/mass/","title":"Class: <code>Mass</code>","text":"<p>The <code>Mass</code> class is a subclass of <code>Variable</code> designed to represent a quantity of mass. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms (kg).</p>"},{"location":"user-guide/units/mass/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Kilograms (kg) kilograms kg 1 grams g 0.001 milligrams mg 0.000001 ton ton 1000 pounds lb 0.453592 ounces oz 0.0283495 metric tons mt 1000 micrograms ug 10\u22129"},{"location":"user-guide/units/mass/#class-reference","title":"Class Reference","text":"<p><code>class Mass(value, units='kg')</code></p> <p>A class for handling mass measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the mass. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'kg'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a Mass object of 500 grams  \n&gt;&gt;&gt; m1 = Mass(500, \"g\")\n\n# Create a Mass object of 2 kilograms  \n&gt;&gt;&gt; m2 = Mass(2, \"kg\")\n</code></pre></p>"},{"location":"user-guide/units/mass/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the mass, always in kilograms (kg). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/mass/#methods","title":"Methods","text":"<p><code>to(target\\_unit)</code></p> <p>Returns a new <code>Mass</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Mass</code>   A new <code>Mass</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Initialize a mass of 500 grams  \n&gt;&gt;&gt; mass_g = Mass(500, \"g\")\n\n# Convert to pounds  \n&gt;&gt;&gt; mass_lb = mass_g.to(\"lb\")\n\n&gt;&gt;&gt; print(mass_lb)  \n1.102312 lb\n</code></pre></p>"},{"location":"user-guide/units/mass/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>    Returns a human-readable string representation of the mass, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/mass_flowrate/","title":"Class: <code>MassFlowRate</code>","text":"<p>The <code>MassFlowRate</code> class is a subclass of <code>Variable</code> designed to represent the mass of a substance passing per unit of time. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms per second (kg/s).</p>"},{"location":"user-guide/units/mass_flowrate/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Kilograms per Second (kg/s) kilograms per second kg/s 1 kilograms per hour kg/h 1/3600 grams per second g/s 0.001 grams per minute g/min 0.001/60 grams per hour g/h 0.001/3600 pounds per second lb/s 0.453592 pounds per minute lb/min 0.453592/60 pounds per hour lb/h 0.453592/3600 kilograms per day kg/day 1/86400 tons per day t/day 0.0115740741"},{"location":"user-guide/units/mass_flowrate/#class-reference","title":"Class Reference","text":"<p><code>class MassFlowRate(value, units='kg/s')</code></p> <p>A class for handling mass flow rate measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the mass flow rate. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'kg/s'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a MassFlowRate object of 100 kg/h  \n&gt;&gt;&gt; mfr1 = MassFlowRate(100, \"kg/h\")\n\n# Create a MassFlowRate object of 0.5 lb/s  \n&gt;&gt;&gt; mfr2 = MassFlowRate(0.5, \"lb/s\")\n</code></pre></p>"},{"location":"user-guide/units/mass_flowrate/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the mass flow rate, always in kilograms per second (kg/s). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/mass_flowrate/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>MassFlowRate</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>MassFlowRate</code>   A new <code>MassFlowRate</code> object with the same <code>value</code>, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a mass flow rate of 100 kg/h  \n&gt;&gt;&gt; flow_kg_h = MassFlowRate(100, \"kg/h\")\n\n# Convert to kg/s  \n&gt;&gt;&gt; flow_kg_s = flow_kg_h.to(\"kg/s\")\n\n&gt;&gt;&gt; print(flow_kg_s)  \n0.027778 kg/s\n</code></pre></p>"},{"location":"user-guide/units/mass_flowrate/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>    Returns a human-readable string representation of the mass flow rate, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/overview/","title":"Units Overview","text":"<p>The Process PI Units Module provides a consistent framework for handling physical and chemical units commonly used in process and chemical engineering. This section gives an overview of all supported quantities, conversion rules, and their role in engineering calculations.</p>"},{"location":"user-guide/units/overview/#fundamental-units","title":"\ud83d\udccf Fundamental Units","text":"<ul> <li>Length: Handles different units of distance such as meters, centimeters, inches, and feet.  </li> <li>Pressure: Conversion between Pascal, bar, atm, psi, and other industrial units.  </li> <li>Temperature: Celsius, Kelvin, Fahrenheit, and Rankine conversions.  </li> <li>Mass: Mass measurements in kg, g, lb, ton, etc.  </li> <li>Volume: Cubic meters, liters, gallons, barrels, and more.  </li> <li>Area: 2D measurements such as m\u00b2, cm\u00b2, and ft\u00b2.  </li> <li>Diameter: Specialized length property for circular geometries.</li> </ul>"},{"location":"user-guide/units/overview/#flow-density","title":"\ud83d\udca8 Flow &amp; Density","text":"<ul> <li>Volumetric Flow Rate: Volume per unit time (m\u00b3/s, L/min, gpm).  </li> <li>Mass Flow Rate: Mass per unit time (kg/s, lb/h).  </li> <li>Density: Mass per volume (kg/m\u00b3, g/cm\u00b3, lb/ft\u00b3).  </li> <li>Velocity: Flow velocity in pipes and ducts.</li> </ul>"},{"location":"user-guide/units/overview/#fluid-thermal-properties","title":"\ud83d\udee0\ufe0f Fluid &amp; Thermal Properties","text":"<ul> <li>Viscosity: Dynamic and kinematic viscosity in Pa\u00b7s, cP, and stokes.  </li> <li>Dimensionless Numbers: Key process numbers like Reynolds, Nusselt, and Prandtl.  </li> <li>Heat Flow: Total heat transfer rate (W, kW, Btu/h).  </li> <li>Heat Flux: Heat transfer rate per unit area (W/m\u00b2).  </li> <li>Heat Transfer Coefficient: Surface heat transfer coefficient.  </li> <li>Heat of Vaporization: Energy required to vaporize a substance.  </li> <li>Specific Heat: Heat required to raise temperature per unit mass.  </li> <li>Thermal Conductivity: Heat conduction ability of a material.  </li> <li>Thermal Resistance: Resistance to heat transfer.</li> </ul>"},{"location":"user-guide/units/overview/#power-miscellaneous","title":"\u26a1 Power &amp; Miscellaneous","text":"<ul> <li>Power: Energy per unit time (W, kW, hp).  </li> <li>String: Utility unit for parsing and formatting symbolic/engineering values.</li> </ul>"},{"location":"user-guide/units/overview/#why-use-the-units-module","title":"\ud83c\udf10 Why Use the Units Module?","text":"<ul> <li>Reliable unit conversions across multiple engineering systems (SI, Imperial, CGS).  </li> <li>Consistent integration with Process PI calculations.  </li> <li>Ready-to-use engineering constants and formulas.  </li> <li>Supports piping, heat transfer, and equipment design workflows.</li> </ul> <p>\u27a1\ufe0f Continue with individual unit pages for detailed usage examples and conversion tables.</p>"},{"location":"user-guide/units/power/","title":"Class: <code>Power</code>","text":"<p>The <code>Power</code> class is a subclass of <code>Variable</code> designed to represent the rate at which work is done or energy is transferred. It ensures accurate calculations by storing all values internally in its base SI unit, Watts (W).</p>"},{"location":"user-guide/units/power/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Watts (W) Watts W 1 kilowatts kW 103 megawatts MW 106 mechanical horsepower hp 745.7 British Thermal Units per hour BTU/h 0.29307107"},{"location":"user-guide/units/power/#class-reference","title":"Class Reference","text":"<p><code>class Power(value, units='W')</code></p> <p>A class for handling power measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the power. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'W'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a Power object of 1000 Watts  \n&gt;&gt;&gt; p1 = Power(1000)\n\n# Create a Power object of 1 kilowatt  \n&gt;&gt;&gt; p2 = Power(1, \"kW\")\n\n# Create a Power object of 1.34 horsepower  \n&gt;&gt;&gt; p4 = Power(1.34, \"hp\")\n</code></pre></p>"},{"location":"user-guide/units/power/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the power, always in Watts (W). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/power/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Power</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Power</code>   A new <code>Power</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a power of 1000 W  \n&gt;&gt;&gt; power_W = Power(1000)\n\n# Convert to kilowatts  \n&gt;&gt;&gt; power_kW = power_W.to(\"kW\")\n\n&gt;&gt;&gt; print(power_kW)  \n1.0 kW\n</code></pre></p>"},{"location":"user-guide/units/power/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the power, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/pressure/","title":"Class: <code>Pressure</code>","text":"<p>The <code>Pressure</code> class is a subclass of <code>Variable</code> designed to represent a force per unit area. It ensures accurate calculations by storing all values internally in its base SI unit, Pascals (Pa).</p>"},{"location":"user-guide/units/pressure/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Pascals (Pa) Pascals Pa 1 kilopascals kPa 103 megapascals MPa 106 bar bar 105 atmospheres atm 101325 pounds per square inch psi 6894.76 millimeters of mercury mmHg 133.322 torr torr 133.322"},{"location":"user-guide/units/pressure/#class-reference","title":"Class Reference","text":"<p><code>class Pressure(value, units='Pa')</code></p> <p>A class for handling pressure measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the pressure. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'Pa'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a Pressure object of 1 atmosphere  \n&gt;&gt;&gt; p1 = Pressure(1, \"atm\")\n\n# Create a Pressure object of 101325 Pascals  \n&gt;&gt;&gt; p2 = Pressure(101325, \"Pa\")\n</code></pre></p>"},{"location":"user-guide/units/pressure/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the pressure as provided during initialization. This is inherited from the Variable base class. <code>.units</code> <code>str</code> The string representation of the variable's units, as provided during initialization. Inherited from the Variable base class. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/pressure/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Pressure</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Pressure</code>   A new <code>Pressure</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Initialize a pressure of 1 atm  \n&gt;&gt;&gt; atm_pressure = Pressure(1, \"atm\")\n\n# Convert to psi  \n&gt;&gt;&gt; psi_pressure = atm_pressure.to(\"psi\")\n\n&gt;&gt;&gt; print(psi_pressure)  \n14.695949 psi\n</code></pre></p>"},{"location":"user-guide/units/pressure/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the pressure, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging, showing the internal values.</li> </ul>"},{"location":"user-guide/units/specific_heat/","title":"Class: <code>SpecificHeat</code>","text":"<p>The <code>SpecificHeat</code> class is a subclass of <code>Variable</code> designed to represent the amount of energy required to raise the temperature of a unit mass of a substance by one degree. It stores all values internally in its base unit, kilojoules per kilogram-Kelvin (kJ/kg.K).</p>"},{"location":"user-guide/units/specific_heat/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit <code>str</code> Conversion Factor to Kilojoules per Kilogram-Kelvin (kJ/kg.K) kilojoules per kilogram-Kelvin kJ/kgK 1 Joules per kilogram-Kelvin J/kgK 0.001 calories per gram-Kelvin cal/gK 4.1868 British Thermal Units per pound-degree Fahrenheit BTU/lbF 9.7423 kilocalories per kilogram-Kelvin kcal/kgK 4.1868"},{"location":"user-guide/units/specific_heat/#class-reference","title":"Class Reference","text":"<p><code>class SpecificHeat(value, units='kJ/kgK')</code></p> <p>A class for handling specific heat capacity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the specific heat. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'kJ/kgK'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a SpecificHeat object of 4.186 kJ/kgK  \n&gt;&gt;&gt; cp1 = SpecificHeat(4.186, \"kJ/kgK\")\n\n# Create a SpecificHeat object of 1.0 cal/gK  \n&gt;&gt;&gt; cp2 = SpecificHeat(1.0, \"cal/gK\")\n</code></pre></p>"},{"location":"user-guide/units/specific_heat/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the specific heat, always in kilojoules per kilogram-Kelvin (kJ/kg.K). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/specific_heat/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>SpecificHeat</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>SpecificHeat</code>   A new <code>SpecificHeat</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a specific heat of 4.186 kJ/kgK  \n&gt;&gt;&gt; water_cp = SpecificHeat(4.186, \"kJ/kgK\")\n\n# Convert to BTU/lbF  \n&gt;&gt;&gt; water_cp_btu = water_cp.to(\"BTU/lbF\")\n\n&gt;&gt;&gt; print(water_cp_btu)  \n1.79159 BTU/lbF\n</code></pre></p>"},{"location":"user-guide/units/specific_heat/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the specific heat, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/string/","title":"Class: <code>StringUnit</code>","text":"<p>The <code>StringUnit</code> class is a subclass of <code>Variable</code> designed to represent quantities that are categorical or string-based, rather than numeric. Examples include a material's phase, a flow type, or a component's status. It provides a simple way to handle these non-numeric values within a consistent framework.</p>"},{"location":"user-guide/units/string/#supported-units","title":"Supported Units","text":"<p>By definition, this class does not have physical units. The category attribute is used to provide context for the string value.</p>"},{"location":"user-guide/units/string/#class-reference","title":"Class Reference","text":"<p><code>class StringUnit(value, category='string')</code></p> <p>A class for handling string-based quantities.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>str</code>   The string value of the quantity.  </li> <li><code>category</code> : <code>str</code>, default=<code>'string'</code>   The descriptive category for the quantity (e.g., 'flow_type', 'phase_state').</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>value</code> is not a <code>string</code>.</li> </ul> <p>Examples: <pre><code># Create a StringUnit object for a flow type  \n&gt;&gt;&gt; flow = StringUnit(\"Laminar\", \"flow_type\")\n\n# Create a StringUnit object for a phase state  \n&gt;&gt;&gt; phase = StringUnit(\"Gas\", \"phase_state\")\n</code></pre></p>"},{"location":"user-guide/units/string/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>str</code> The string value of the quantity. <code>.original_value</code> <code>str</code> The value as provided during initialization. Identical to .value. <code>.category</code> <code>str</code> The category name for the string value."},{"location":"user-guide/units/string/#string-representation","title":"String Representation","text":"<ul> <li><code>__repr__(self)</code>   Returns a string representation of the object in the format \"<code>{value} ({category})</code>\", which is also used for the <code>__str__</code> method.</li> </ul>"},{"location":"user-guide/units/temperature/","title":"Class: <code>Temperature</code>","text":"<p>The <code>Temperature</code> class is a subclass of <code>Variable</code> designed to represent a temperature quantity. It ensures accurate conversions and calculations by storing all values internally in its base SI unit, Kelvin (K).</p>"},{"location":"user-guide/units/temperature/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary formula-based conversions to and from the base unit.</p> Unit <code>str</code> Conversion Formula to Kelvin (K) Kelvin K T_K=T_K Celsius C T_K=T_C+273.15 Fahrenheit F T_K=(T_F\u221232)times5/9+273.15"},{"location":"user-guide/units/temperature/#class-reference","title":"Class Reference","text":"<p><code>class Temperature(value, units='K')</code></p> <p>A class for handling temperature measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the temperature.  </li> <li><code>units</code> : <code>str</code>, default=<code>'K'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If units is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Temperature object of 100\u00b0C  \n&gt;&gt;&gt; t1 = Temperature(100, \"C\")\n\n# Create a Temperature object of 373.15 K  \n&gt;&gt;&gt; t2 = Temperature(373.15)\n</code></pre></p>"},{"location":"user-guide/units/temperature/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the temperature, always in Kelvin (K). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/temperature/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Temperature</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Temperature</code>   A new <code>Temperature</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a temperature of 25\u00b0C  \n&gt;&gt;&gt; temp_C = Temperature(25, \"C\")\n\n# Convert to Fahrenheit  \n&gt;&gt;&gt; temp_F = temp_C.to(\"F\")\n\n&gt;&gt;&gt; print(temp_F)  \n77.0 F\n</code></pre></p>"},{"location":"user-guide/units/temperature/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the temperature, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/thermal_conductivity/","title":"Class: <code>ThermalConductivity</code>","text":"<p>The <code>ThermalConductivity</code> class is a subclass of <code>Variable</code> designed to represent a material's ability to conduct heat. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per meter-Kelvin (W/m.K).</p>"},{"location":"user-guide/units/thermal_conductivity/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary formula-based conversions to and from the base unit.</p> Unit <code>str</code> Conversion Factor to Watts per Meter-Kelvin (W/m.K) Watts per meter-Kelvin W/mK 1 kilowatts per meter-Kelvin kW/mK 1000 calories per second-centimeter-degree Celsius cal/scmC 418.4 British Thermal Units per hour-foot-degree Fahrenheit BTU/hftF 1.730735"},{"location":"user-guide/units/thermal_conductivity/#class-reference","title":"Class Reference","text":"<p><code>class ThermalConductivity(value, units='W/mK')</code></p> <p>A class for handling thermal conductivity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the thermal conductivity. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'W/mK'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a ThermalConductivity object for a value of 0.5 W/mK  \n&gt;&gt;&gt; k1 = ThermalConductivity(0.5, \"W/mK\")\n\n# Create a ThermalConductivity object of 1 kW/mK  \n&gt;&gt;&gt; k2 = ThermalConductivity(1, \"kW/mK\")\n</code></pre></p>"},{"location":"user-guide/units/thermal_conductivity/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the thermal conductivity, always in Watts per meter-Kelvin (W/m.K). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/thermal_conductivity/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>ThermalConductivity</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>ThermalConductivity</code>   A new <code>ThermalConductivity</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a thermal conductivity of 0.5 W/mK  \n&gt;&gt;&gt; k_W = ThermalConductivity(0.5)\n\n# Convert to BTU/hftF  \n&gt;&gt;&gt; k_BTU = k_W.to(\"BTU/hftF\")\n\n&gt;&gt;&gt; print(k_BTU)  \n0.289356 BTU/hftF\n</code></pre></p>"},{"location":"user-guide/units/thermal_conductivity/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the thermal conductivity, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/thermal_resistance/","title":"Class: <code>ThermalResistance</code>","text":"<p>The <code>ThermalResistance</code> class is a subclass of <code>Variable</code> designed to represent a material's resistance to heat flow. It simplifies calculations by internally storing all values in its base SI unit, Kelvin per Watt (K/W).</p>"},{"location":"user-guide/units/thermal_resistance/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. Note that some units, like degrees Celsius per Watt (K/W), are numerically equivalent to the base SI unit.</p> Unit <code>str</code> Conversion Factor to Kelvin per Watt (K/W) Kelvin per Watt K/W 1 Celsius per Watt C/W 1 hour-foot\u00b2-degree Fahrenheit per British Thermal Unit hft2F/BTU 0.1761 meter\u00b2-Kelvin per Watt m2K/W 1"},{"location":"user-guide/units/thermal_resistance/#class-reference","title":"Class Reference","text":"<p><code>class ThermalResistance(value, units='K/W')</code></p> <p>A class for handling thermal resistance measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the thermal resistance. Must be a positive number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'K/W'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is not a positive number.  </li> <li><code>TypeError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a ThermalResistance object for a value of 0.5 K/W  \n&gt;&gt;&gt; r1 = ThermalResistance(0.5, \"K/W\")\n\n# Create a ThermalResistance object of 2 C/W (numerically equivalent to 2 K/W)  \n&gt;&gt;&gt; r2 = ThermalResistance(2, \"C/W\")\n</code></pre></p>"},{"location":"user-guide/units/thermal_resistance/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the thermal resistance, always in Kelvin per Watt (K/W). This is the internal representation used for all calculations. <code>.original\\value</code> <code>float</code> The numeric value as provided during initialization. <code>.original\\unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/thermal_resistance/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>ThermalResistance</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>ThermalResistance</code>   A new <code>ThermalResistance</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Initialize a thermal resistance of 2 K/W  \n&gt;&gt;&gt; r_K = ThermalResistance(2)\n\n# Convert to hrft2F/BTU  \n&gt;&gt;&gt; r_BTU = r_K.to(\"hrft2F/BTU\")\n\n&gt;&gt;&gt; print(r_BTU)  \n11.353457 hrft2F/BTU\n</code></pre></p>"},{"location":"user-guide/units/thermal_resistance/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the thermal resistance, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/units/","title":"\ud83d\udcd0 Units Module","text":"<p>The <code>processpi.units</code> module provides a consistent framework to handle unit conversions across SI, CGS, and Imperial systems. Every physical property is represented as a Python class with built-in <code>.to()</code> methods for easy conversion.</p>"},{"location":"user-guide/units/units/#usage-pattern","title":"\ud83d\udd27 Usage Pattern","text":""},{"location":"user-guide/units/units/#from-processpiunits-import-length-length-length10-m-define-length-in-meters-printlengthtoft-convert-to-feet","title":"<pre><code>from processpi.units import Length\n\nlength = Length(10, \"m\")     # define length in meters\nprint(length.to(\"ft\"))  # convert to feet\n</code></pre>","text":""},{"location":"user-guide/units/units/#examples","title":"\ud83d\ude80 Examples","text":"<p>Below are some examples covering the most common engineering quantities.</p>"},{"location":"user-guide/units/units/#1-velocity","title":"1. Velocity","text":"<pre><code>from processpi.units import Velocity\n\nv = Velocity(1.55, \"m/s\")\nprint(v.to(\"ft/s\"))\n# Output: 5.085 ft/s\n</code></pre>"},{"location":"user-guide/units/units/#2-diameter","title":"2. Diameter","text":"<pre><code>from processpi.units import Diameter\n\nd = Diameter(10, \"in\")\nprint(d.to(\"cm\"))\n# Output: 25.4 cm\n</code></pre>"},{"location":"user-guide/units/units/#3-density","title":"3. Density","text":"<pre><code>from processpi.units import Density\nden = Density(1000, \"kg/m3\")\nprint(den.to(\"g/cm3\"))\n# Output: 1.0 g/cm3\n</code></pre>"},{"location":"user-guide/units/units/#4-heat-flux","title":"4. Heat Flux","text":"<pre><code>from processpi.units import HeatFlux\nq = HeatFlux(5000, \"W/m2\")\nprint(q.to(\"BTU/hft2\"))\n</code></pre>"},{"location":"user-guide/units/units/#5-heat-of-vaporization","title":"5. Heat of Vaporization","text":"<pre><code>from processpi.units import HeatOfVaporization\nhv = HeatOfVaporization(2260, \"J/kg\")\nprint(hv.to(\"BTU/lb\"))\n</code></pre>"},{"location":"user-guide/units/units/#6-heat-transfer-coefficient","title":"6. Heat Transfer Coefficient","text":"<pre><code>from processpi.units import HeatTransferCoefficient\n\nhtc = HeatTransferCoefficient(1000, \"W/m2K\")\nprint(htc.to(\"BTU/hft2F\"))\n</code></pre>"},{"location":"user-guide/units/units/#7-length","title":"7. Length","text":"<pre><code>from processpi.units import Length\n\nL = Length(5, \"m\")\nprint(L.to(\"ft\"))\n</code></pre>"},{"location":"user-guide/units/units/#8-mass-flow-rate","title":"8. Mass Flow Rate","text":"<pre><code>from processpi.units import MassFlowRate\n\nmf = MassFlowRate(100, \"kg/s\")\nprint(mf.to(\"lb/min\"))\n</code></pre>"},{"location":"user-guide/units/units/#9-mass","title":"9. Mass","text":"<pre><code>from processpi.units import Mass\n\nm = Mass(10, \"kg\")\nprint(m.to(\"lb\"))\n</code></pre>"},{"location":"user-guide/units/units/#10-power","title":"10. Power","text":"<pre><code>from processpi.units import Power\n\nP = Power(1000, \"W\")\nprint(P.to(\"BTU/h\"))\n</code></pre>"},{"location":"user-guide/units/units/#11-pressure","title":"11. Pressure","text":"<pre><code>from processpi.units import Pressure\n\np = Pressure(101325, \"Pa\")\nprint(p.to(\"psi\"))\n</code></pre>"},{"location":"user-guide/units/units/#12-specific-heat","title":"12. Specific Heat","text":"<pre><code>from processpi.units import SpecificHeat\n\ncp = SpecificHeat(4184, \"J/kgK\")\nprint(cp.to(\"BTU/lbF\"))\n</code></pre>"},{"location":"user-guide/units/units/#13-temperature","title":"13. Temperature","text":"<pre><code>from processpi.units import Temperature\n\nT = Temperature(100, \"C\")\nprint(T.to(\"F\"))\n</code></pre>"},{"location":"user-guide/units/units/#14-thermal-conductivity","title":"14. Thermal Conductivity","text":"<pre><code>from processpi.units import ThermalConductivity\n\nk = ThermalConductivity(200, \"W/mK\")\nprint(k.to(\"BTU/hftF\"))\n</code></pre>"},{"location":"user-guide/units/units/#15-viscosity","title":"15. Viscosity","text":"<pre><code>from processpi.units import Viscosity\n\nmu = Viscosity(1.55, \"Pa\u00b7s\")\nprint(mu.to(\"cP\"))\n</code></pre>"},{"location":"user-guide/units/units/#16-volume","title":"16. Volume","text":"<pre><code>from processpi.units import Volume\n\nV = Volume(1, \"L\")\nprint(V.to(\"m3\"))\n</code></pre>"},{"location":"user-guide/units/units/#17-volumetric-flow-rate","title":"17. Volumetric Flow Rate","text":"<pre><code>from processpi.units import VolumetricFlowRate\n\nQ = VolumetricFlowRate(3000, \"gal/min\")\nprint(Q.to(\"m3/s\"))\n</code></pre>"},{"location":"user-guide/units/units/#bonus-examples","title":"\u2728 Bonus Examples","text":""},{"location":"user-guide/units/units/#18-time","title":"18. Time","text":"<pre><code>from processpi.units import Time\n\nt = Time(3600, \"s\")\nprint(t.to(\"h\"))\n# Output: 1 h\n</code></pre>"},{"location":"user-guide/units/units/#19-molar-flow-rate","title":"19. Molar Flow Rate","text":"<pre><code>from processpi.units import MolarFlowRate\n\nn_dot = MolarFlowRate(100, \"mol/s\")\nprint(n_dot.to(\"kmol/h\"))\n</code></pre>"},{"location":"user-guide/units/units/#summary","title":"\u2705 Summary","text":"<p>Every unit is a class (e.g., Length, Pressure, Viscosity).</p> <p>Values can be converted with .to(\"\"). <p>The system supports engineering-friendly units across SI, Imperial, and practical process units.</p> <p>Use this module as the foundation for all your chemical/process engineering calculations in ProcessPI.</p>"},{"location":"user-guide/units/variable/","title":"Variable Class","text":"<p>The Variable class is a generic base class for physical quantities. It provides a foundation for handling a value and its associated units, and defines common methods for comparison and arithmetic operations. This class is designed to be subclassed; specific physical types (like Length or Area) must implement the necessary unit conversion logic.</p>"},{"location":"user-guide/units/variable/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/variable/#class-variablevalue-float-units-str","title":"class Variable(value: float, units: str)","text":"<p>A generic physical variable with a numeric value and string-based units. It provides a base for all unit-aware quantity classes.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the variable.  </li> <li>units : str   The string representation of the variable's units.</li> </ul> <p>Examples:</p> <p># Create a generic variable &gt;&gt;&gt; my_var \\= Variable(10, \"unit\")</p>"},{"location":"user-guide/units/variable/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the variable. .units str The string representation of the variable's units."},{"location":"user-guide/units/variable/#methods","title":"Methods","text":""},{"location":"user-guide/units/variable/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Variable class supports addition (+) and subtraction (-) for instances of the same subclass. These operations are performed on the base unit values, ensuring correct results regardless of the original units.</p> <ul> <li>__add__(self, other)   Adds two variables of the same subclass.   Raises: TypeError if other is not an instance of the same subclass.  </li> <li>__sub__(self, other)   Subtracts two variables of the same subclass.   Raises: TypeError if other is not an instance of the same subclass.</li> </ul>"},{"location":"user-guide/units/variable/#comparison-operations","title":"Comparison Operations","text":"<p>All comparison operations (==, !=, \\&lt;, &gt;, \\&lt;=, &gt;=) are defined for instances of the same subclass. They work by comparing the objects' internal base unit values.</p> <ul> <li>__eq__(self, other)   Compares two variables for equality.  </li> <li>__ne__(self, other)   Compares two variables for inequality.  </li> <li>__lt__(self, other), __le__(self, other), __gt__(self, other), __ge__(self, other)   Standard less-than, less-than-or-equal-to, greater-than, and greater-than-or-equal-to comparisons.</li> </ul>"},{"location":"user-guide/units/variable/#formatting-representation","title":"Formatting &amp; Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the variable in the format: \"{value} {units}\".  </li> <li>__repr__(self)   Returns an unambiguous string representation suitable for developers, like \"\\&lt;Variable: 10 unit&gt;\".  </li> <li>__format__(self, format_spec)   Allows for custom string formatting of the numeric value, such as with f-strings.  </li> <li>__hash__(self)   Enables Variable objects to be used in sets or as dictionary keys by providing a hash based on the class name and the base unit value.</li> </ul>"},{"location":"user-guide/units/variable/#abstract-methods","title":"Abstract Methods","text":"<p>The following methods are abstract and must be overridden by subclasses to handle specific unit conversions. Attempting to call these methods on the Variable base class will result in a NotImplementedError.</p> <ul> <li>to(self, target_units: str)   Converts the variable to a specified target_units.  </li> <li>to_base(self)   Converts the variable's value to its base unit.  </li> <li>from_base(self, base_value: float, target_units: str)   Creates a new instance from a given base unit value.</li> </ul>"},{"location":"user-guide/units/velocity/","title":"Class: <code>Velocity</code>","text":"<p>The <code>Velocity</code> class is a subclass of <code>Variable</code> designed to represent a quantity of velocity. It handles automatic unit conversion by storing all internal values in the base SI unit, meters per second (m/s).</p>"},{"location":"user-guide/units/velocity/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary conversions to and from the base unit.</p> Unit <code>str</code> Conversion Factor to Meters per Second (m/s) meters per second m/s 1 kilometers per hour km/h 1/3.6 centimeters per second cm/s 0.01 feet per second ft/s 0.3048 miles per hour mph 0.44704"},{"location":"user-guide/units/velocity/#class-reference","title":"Class Reference","text":"<p><code>class Velocity(value, units='m/s')</code></p> <p>A class for handling velocity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the velocity.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m/s'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a Velocity object for a value of 25 m/s  \n&gt;&gt;&gt; v1 = Velocity(25, \"m/s\")\n\n# Create a Velocity object for 100 km/h  \n&gt;&gt;&gt; v2 = Velocity(100, \"km/h\")\n</code></pre></p>"},{"location":"user-guide/units/velocity/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the velocity, always in meters per second (m/s). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/velocity/#methods","title":"Methods","text":"<p><code>to(target\\_unit)</code></p> <p>Returns a new <code>Velocity</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Velocity</code>   A new <code>Velocity</code> object with the same <code>value</code>, represented in the target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueErro</code>r : If <code>target_unit</code> is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Initialize a velocity of 25 m/s  \n&gt;&gt;&gt; v_ms = Velocity(25)\n\n# Convert to km/h  \n&gt;&gt;&gt; v_kmh = v_ms.to(\"km/h\")\n\n&gt;&gt;&gt; print(v_kmh)  \n90.0 km/h\n</code></pre></p>"},{"location":"user-guide/units/velocity/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>    Returns a human-readable string representation of the velocity, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/viscosity/","title":"Class: <code>Viscosity</code>","text":"<p>The <code>Viscosity</code> class is a subclass of <code>Variable</code> designed to represent a quantity of viscosity. It uniquely handles two different types of viscosity: dynamic and kinematic. The class automatically determines the viscosity type based on the provided units and performs conversions only within that type.</p>"},{"location":"user-guide/units/viscosity/#supported-units","title":"Supported Units","text":"<p>The class distinguishes between two sets of units for dynamic and kinematic viscosity.</p>"},{"location":"user-guide/units/viscosity/#dynamic-viscosity-units","title":"Dynamic Viscosity Units","text":"<p>The base SI unit for dynamic viscosity is Pascal-second (P.s).</p> Unit <code>str</code> Conversion Factor to Pascal-second (Pa.s) Pascal-second Pa\u00b7s 1 milliPascal-second mPa\u00b7s 10\u22123 centipoise cP 10\u22123 poise P 0.1"},{"location":"user-guide/units/viscosity/#kinematic-viscosity-units","title":"Kinematic Viscosity Units","text":"<p>The base SI unit for kinematic viscosity is meters-squared per second (m<sup>2</sup>/s).</p> Unit <code>str</code> Conversion Factor to meter-squared per second (m<sup>2</sup>/s) meter-squared per second m2/s 1 centimeter-squared per second cm2/s 10\u22124 millimeter-squared per second mm2/s 10\u22126 centistoke cSt 10\u22126 stoke St 10\u22124"},{"location":"user-guide/units/viscosity/#class-reference","title":"Class Reference","text":"<p><code>class Viscosity(value, units='Pa\u00b7s')</code></p> <p>A class for handling viscosity measurements. The type of viscosity (dynamic or kinematic) is determined automatically based on the units argument.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the viscosity. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'Pa\u00b7s'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or if units is not a valid <code>unit</code>.</li> </ul> <p>Examples: <pre><code># Create a Viscosity object for a dynamic viscosity of 1e-3 Pa\u00b7s  \n&gt;&gt;&gt; v1 = Viscosity(1e-3, units=\"Pa\u00b7s\")\n\n# Create a Viscosity object for a kinematic viscosity of 1 cSt  \n&gt;&gt;&gt; v2 = Viscosity(1, units=\"cSt\")\n</code></pre></p>"},{"location":"user-guide/units/viscosity/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the viscosity, always stored in its base SI unit (Pacdots for dynamic, m2/s for kinematic). <code>.original\\value</code> <code>float</code> The numeric value as provided during initialization. <code>.original\\unit</code> <code>str</code> The unit as provided during initialization. <code>.viscosity\\type</code> <code>str</code> Indicates the type of viscosity, either \"dynamic\" or \"kinematic\"."},{"location":"user-guide/units/viscosity/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Viscosity</code> object converted to the <code>target_unit</code>. This method can only convert between units of the same viscosity type (e.g., dynamic to dynamic). The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be a valid unit for the object's viscosity type.</li> </ul> <p>Returns:</p> <ul> <li><code>Viscosity</code>   A new <code>Viscosity</code> object with the converted <code>value</code> and target <code>unit</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid <code>unit</code> for the viscosity type.</li> </ul> <p>Examples: <pre><code># Initialize a dynamic viscosity of 1 Pa\u00b7s  \n&gt;&gt;&gt; v_Pa = Viscosity(1)\n\n# Convert to centipoise (cP)  \n&gt;&gt;&gt; v_cP = v_Pa.to(\"cP\")\n\n&gt;&gt;&gt; print(v_cP)  \n1000.0 cP (dynamic)\n</code></pre></p>"},{"location":"user-guide/units/viscosity/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the viscosity, rounded to six decimal places, using its original value, unit, and type.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging, showing the original value, unit, and viscosity type.</li> </ul>"},{"location":"user-guide/units/volume/","title":"Class: <code>Volume</code>","text":"<p>The <code>Volume</code> class is a subclass of <code>Variable</code> designed to represent a quantity of volume. It handles automatic unit conversion by storing all internal values in the base SI unit, cubic meters (m<sup>3</sup>).</p>"},{"location":"user-guide/units/volume/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary conversions to and from the base unit.</p> Unit <code>str</code> Conversion Factor to Cubic Meters (m<sup>3</sup>) cubic meter m3 1 liter L 0.001 milliliter mL 10\u22126 cubic centimeter cm3 10\u22126 cubic foot ft3 0.0283168 cubic inch in3 1.63871times10\u22125 US gallon gal 0.00378541 oil barrel bbl 0.158987"},{"location":"user-guide/units/volume/#class-reference","title":"Class Reference","text":"<p><code>class Volume(value, units='m3')</code></p> <p>A class for handling volume measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the volume. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m3'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If value is negative.  </li> <li><code>TypeError</code> : If units is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Volume object for 100 liters  \n&gt;&gt;&gt; v1 = Volume(100, \"L\")\n\n# Create a Volume object for 1 cubic meter  \n&gt;&gt;&gt; v2 = Volume(1, \"m3\")\n</code></pre></p>"},{"location":"user-guide/units/volume/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the volume, always in cubic meters (m<sup>3</sup>). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/volume/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Volume</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>Volume</code>   A new <code>Volume</code> object with the converted <code>value</code> and target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a volume of 5 gallons  \n&gt;&gt;&gt; v_gal = Volume(5, \"gal\")\n\n# Convert to liters  \n&gt;&gt;&gt; v_L = v_gal.to(\"L\")\n\n&gt;&gt;&gt; print(v_L)  \n18.92705 L\n</code></pre></p>"},{"location":"user-guide/units/volume/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the volume, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging, showing the original value and unit.</li> </ul>"},{"location":"user-guide/units/volumetric_flowrate/","title":"Class: <code>VolumetricFlowRate</code>","text":"<p>The <code>VolumetricFlowRate</code> class is a subclass of <code>Variable</code> that represents the volume of fluid passing a point per unit of time. The base SI unit for volumetric flow rate is cubic meters per second (m<sup>3</sup>/s).</p>"},{"location":"user-guide/units/volumetric_flowrate/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class automatically converts all internal values to the base unit (m3/s).</p> Unit <code>str</code> Conversion Factor to Cubic Meters per Second (m<sup>3</sup>/s) cubic meter per second m3/s 1 cubic meter per hour m3/h 13600 liter per second L/s 11000 liter per minute L/min 160000 liter per hour L/h 13600000 cubic foot per second ft3/s 0.0283168 cubic foot per minute ft3/min 0.028316860 cubic foot per hour ft3/h 0.02831683600 US gallon per minute gal/min 0.0037854160 US gallon per hour gal/h 0.003785413600"},{"location":"user-guide/units/volumetric_flowrate/#class-reference","title":"Class Reference","text":"<p><code>class VolumetricFlowRate(value, units='m3/s')</code></p> <p>A class for handling volumetric flow rate measurements.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the flow rate. Must be a non-negative number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m3/s'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative.  </li> <li><code>TypeError</code> : If <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a VolumetricFlowRate object for 2 m3/h  \n&gt;&gt;&gt; v1 = VolumetricFlowRate(2, \"m3/h\")\n\n# Create a VolumetricFlowRate object for 500 L/min  \n&gt;&gt;&gt; v2 = VolumetricFlowRate(500, \"L/min\")\n</code></pre></p>"},{"location":"user-guide/units/volumetric_flowrate/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the flow rate, always in cubic meters per second (m<sup>3</sup>/s). <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/volumetric_flowrate/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>VolumetricFlowRate</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li><code>VolumetricFlowRate</code>   A new <code>VolumetricFlowRate</code> object with the converted value and target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a flow rate of 100 L/s  \n&gt;&gt;&gt; flow_L = VolumetricFlowRate(100, \"L/s\")\n\n# Convert to cubic meters per hour  \n&gt;&gt;&gt; flow_m3h = flow_L.to(\"m3/h\")\n\n&gt;&gt;&gt; print(flow\\_m3h)  \n360.0 m3/h\n</code></pre></p>"},{"location":"user-guide/units/volumetric_flowrate/#class-methods","title":"Class Methods","text":"<p><code>from_mass_flow(cls, mass_flow: \"MassFlowRate\", density: \"Density\")</code></p> <p>A class method that converts a  <code>MassFlowRate</code> and <code>Density</code> into a <code>VolumetricFlowRate</code>. The conversion formula is:</p> <p>Q<sub>vol</sub>\u200b=\u03c1m\u02d9\u200b</p> <p>where `Q<sub>vol</sub> is volumetric flow rate, m is mass flow rate, and \u03c1 is density. Parameters:</p> <ul> <li><code>mass_flow</code> : <code>MassFlowRate</code>   An instance of the <code>MassFlowRate</code> class.  </li> <li><code>density</code> : <code>Density</code>   An instance of the <code>Density</code> class.</li> </ul> <p>Returns:</p> <ul> <li><code>VolumetricFlowRate</code>   A new <code>VolumetricFlowRate</code> object with the calculated <code>value</code> in the base unit (m3/s).</li> </ul> <p>Example: <pre><code># Assuming MassFlowRate and Density classes are available  \n&gt;&gt;&gt; m_dot = MassFlowRate(100, \"kg/s\")  \n&gt;&gt;&gt; rho = Density(1000, \"kg/m3\")\n\n&gt;&gt;&gt; q_vol = VolumetricFlowRate.from_mass_flow(m_dot, rho)\n\n&gt;&gt;&gt; print(q_vol)  \n0.1 m3/s  \n</code></pre></p>"},{"location":"user-guide/units/volumetric_flowrate/#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the viscosity, rounded to six decimal places, using its original value, unit, and type.  </li> <li><code>__repr__(self)</code>   Returns a string representation suitable for developers and debugging, showing the original value, unit, and viscosity type.</li> </ul>"}]}