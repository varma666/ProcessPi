{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Process PI","text":"Process Modeling &amp; Simulation in Python             Build, simulate, and analyze chemical process systems with an open-source Python toolkit.       From pipelines and pumps to heat exchangers and mixers, Process PI provides engineers        with the tools to model, optimize, and visualize complex process networks with precision and ease.               Get Started                 Learn More"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Pipeline Networks <p>Design, simulate, and analyze fluid flow through pipes, valves, pumps, and splitters.     Optimize your process network with precise pressure drop and flow calculations.</p></p> </li> <li> <p> Heat Transfer <p>Compute heat flux, energy balances, and heat exchanger performance.     Supports a wide range of unit operations for chemical process engineering.</p></p> </li> <li> <p> Components Library <p>Access a curated database of chemicals, mixtures, and equipment properties.     Retrieve physical and thermodynamic data for accurate simulations.</p></p> </li> <li> <p> Visualization &amp; Analysis <p>Generate schematics, performance plots, and interactive charts for process optimization.     Visualize flows, temperatures, and equipment networks in a single interface.</p></p> </li> <li> <p> Process Optimization <p>Run simulations to optimize process parameters, energy efficiency, and system performance.     Explore multiple scenarios with Python scripting.</p></p> </li> <li> <p> Documentation &amp; Examples <p>Follow tutorials, examples, and API reference to get started quickly.     Step-by-step guides help engineers implement Process PI in real projects.</p></p> </li> </ul>"},{"location":"#explore","title":"Explore","text":"<ul> <li> <p> Installation     Quick setup guide to install Process PI and get started with Python.</p> </li> <li> <p> User Guide     Step-by-step tutorials and detailed documentation for all features.</p> </li> <li> <p> API Reference     Comprehensive documentation of modules, classes, and functions.</p> </li> <li> <p> Examples     Real-world pipelines, heat transfer, and component simulations you can try immediately.</p> </li> </ul>"},{"location":"#latest-tutorials-examples","title":"Latest Tutorials &amp; Examples","text":"<ul> <li> <p> Pipeline Simulation 101 Try it now \u2014 Build and analyze a sample process network.</p> </li> <li> <p> Heat Exchanger Design Step-by-step guide \u2014 Learn to model energy transfer and optimize exchangers.</p> </li> <li> <p> Pump &amp; Mixer Analysis Hands-on example \u2014 Simulate pumps, mixers, and flow performance.</p> </li> </ul>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section documents the main classes and functions in ProcessPI.</p>"},{"location":"api_reference/#units","title":"Units","text":"<ul> <li><code>Velocity(value, unit)</code></li> <li><code>Diameter(value, unit)</code></li> <li><code>Density(value, unit)</code></li> <li><code>Viscosity(value, unit)</code></li> <li><code>Temperature(value, unit)</code></li> <li><code>Pressure(value, unit)</code></li> <li><code>SpecificHeat(value, unit)</code></li> <li><code>ThermalConductivity(value, unit)</code></li> <li><code>HeatFlux(value, unit)</code></li> <li><code>HeatTransferCoefficient(value, unit)</code></li> <li><code>HeatOfVaporization(value, unit)</code></li> <li><code>Time(value, unit)</code></li> <li><code>Mass(value, unit)</code></li> <li><code>MassFlowRate(value, unit)</code></li> <li><code>MolarFlowRate(value, unit)</code></li> <li><code>Volume(value, unit)</code></li> <li><code>VolumetricFlowRate(value, unit)</code></li> </ul>"},{"location":"api_reference/#components","title":"Components","text":"<ul> <li><code>Acetone(temperature=Temperature(...))</code></li> <li><code>Water(temperature=Temperature(...))</code></li> <li><code>Toluene(temperature=Temperature(...))</code></li> <li><code>Methanol(temperature=Temperature(...))</code></li> <li><code>OrganicLiquid(...)</code></li> <li><code>InorganicLiquid(...)</code></li> <li><code>Gas(...)</code></li> <li><code>Oil(...)</code></li> <li><code>Vapor(...)</code></li> </ul>"},{"location":"api_reference/#calculations","title":"Calculations","text":"<ul> <li><code>CalculationEngine()</code></li> <li><code>.calculate(\"fluid_velocity\", volumetric_flow_rate, diameter)</code></li> <li><code>.calculate(\"reynolds_number\", density, velocity, diameter, viscosity)</code></li> <li><code>.calculate(\"friction_factor_colebrookwhite\", diameter, roughness, reynolds_number)</code></li> <li><code>.calculate(\"pressure_drop_darcy\", friction_factor, length, diameter, density, velocity)</code></li> <li><code>.calculate(\"pressure_drop_hazen_williams\", length, flow_rate, diameter, density, coefficient)</code></li> </ul>"},{"location":"api_reference/#pipelines","title":"Pipelines","text":"<ul> <li><code>PipelineNetwork(...)</code></li> <li><code>.add_pipe(start, end, diameter, length, roughness)</code></li> <li><code>.describe()</code></li> <li><code>.schematic()</code></li> <li><code>.visualize_network()</code></li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>ProcessPI can be installed from PyPI, set up in a development environment, or used directly in Jupyter Notebooks and Google Colab.</p>"},{"location":"installation/#install-from-pypi","title":"\ud83d\udce6 Install from PyPI","text":"<p>The simplest way to install ProcessPI:</p> <pre><code>pip install processpi\n</code></pre>"},{"location":"installation/#development-setup","title":"\ud83d\udee0 Development Setup","text":"<p>If you want to work on the source code:</p> <pre><code>git clone https://github.com/varma666/ProcessPi.git\ncd ProcessPi\npip install -e .\n</code></pre>"},{"location":"installation/#using-a-virtual-environment-recommended","title":"\ud83d\udc0d Using a Virtual Environment (Recommended)","text":"<p>To avoid conflicts with other Python packages, use a virtual environment.</p> <p>Create and activate with venv:</p> <p><pre><code>python -m venv .venv\n# Linux / macOS\nsource .venv/bin/activate\n# Windows \n.venv\\Scripts\\activate      \n</code></pre> Install ProcessPI inside it:</p> <pre><code>pip install processpi\n</code></pre>"},{"location":"installation/#using-in-jupyter-notebook","title":"\ud83d\udcd3 Using in Jupyter Notebook","text":"<p>ProcessPI works inside Jupyter Notebooks. First, install Jupyter:</p> <p><pre><code>pip install jupyter\n</code></pre> Launch</p> <p><pre><code>jupyter notebook\n</code></pre> Inside a notebook, you can import ProcessPI:</p> <pre><code>from processpi.units import Length, Pressure\nprint(Length(1, \"m\").to(\"ft\"))\n</code></pre>"},{"location":"installation/#using-in-google-colab","title":"\ud83c\udf10 Using in Google Colab","text":"<p>You can use ProcessPI directly in Colab notebooks.</p> <p>At the top of your Colab notebook, run:</p> <pre><code>!pip install processpi\n</code></pre> <p>Then import as usual: <pre><code>from processpi.components import Water\nprint(Water().density())\n</code></pre></p>"},{"location":"installation/#verification","title":"\u2705 Verification","text":"<p>After installation, verify ProcessPI is available: <pre><code>import processpi\nprint(\"ProcessPI version:\", processpi.__version__)\n</code></pre></p>"},{"location":"about/contributing/","title":"Contributing to ProcessPI","text":"<p>We welcome contributions from the community! \ud83c\udf89</p>"},{"location":"about/contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally.</li> <li>Create a new branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and add tests if applicable.</li> <li>Run tests to ensure everything is working.</li> <li>Commit your changes and push:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Open a Pull Request (PR) on the main repository.</li> </ol>"},{"location":"about/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP8 guidelines.</li> <li>Use type hints where possible.</li> <li>Document public functions and classes with docstrings.</li> </ul>"},{"location":"about/contributing/#issues","title":"Issues","text":"<ul> <li>Found a bug? Open an issue with a clear description and steps to reproduce.</li> <li>Have a feature request? Suggest it via a GitHub issue.</li> </ul> <p>Thank you for helping improve ProcessPI!</p>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Raviteja Varma Nadimpalli</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/roadmap/","title":"Roadmap","text":""},{"location":"about/roadmap/#v020-next-release","title":"v0.2.0 (Next Release)","text":"<ul> <li>[ ] Expand unit conversions (add missing Imperial/engineering units)</li> <li>[ ] Add more built-in components (Ethanol, Benzene, Ammonia, etc.)</li> <li>[ ] Extend CalculationEngine with heat transfer correlations</li> <li>[ ] Visualization: Add P&amp;ID-style symbols to network plots</li> <li>[ ] Improve documentation with tutorials and Colab notebooks</li> </ul>"},{"location":"about/roadmap/#v030","title":"v0.3.0","text":"<ul> <li>[ ] Equipment library (pumps, compressors, heat exchangers)</li> <li>[ ] Advanced multiphase calculations</li> <li>[ ] Integration with CoolProp for thermophysical properties</li> </ul>"},{"location":"about/roadmap/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li>[ ] Full-fledged process simulation toolkit (open-source alternative to Aspen/HYSYS)</li> <li>[ ] Web-based GUI dashboard</li> <li>[ ] Plugin ecosystem for custom methods</li> </ul>"},{"location":"user-guide/calculations/calculations/","title":"Calculations Examples","text":"<p>This document shows how to use the ProcessPI <code>CalculationEngine</code> with different unit systems and equations.</p>"},{"location":"user-guide/calculations/calculations/#examples-covered","title":"Examples Covered","text":"<ol> <li>Basic fluid velocity (US units)</li> <li>Basic fluid velocity (Metric units)</li> <li>Velocity and Reynolds number (US units)</li> <li>Velocity and Reynolds number (Metric units)</li> <li>Friction factor using Colebrook-White (US units)</li> <li>Darcy pressure drop (US units)</li> <li>Long pipeline pressure drop (Metric units)</li> <li>Pressure drop using Hazen-Williams (US units)</li> </ol>"},{"location":"user-guide/calculations/calculations/#1-basic-fluid-velocity-us-units","title":"1. Basic fluid velocity (US Units)","text":"<pre><code>from processpi.calculations import CalculationEngine\nfrom processpi.units import VolumetricFlowRate, Diameter\n\nengine = CalculationEngine()\n\nvolumetric_flow_rate = VolumetricFlowRate(3000, 'gal/min')\ndiameter = Diameter(15.5, 'in')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#2-basic-fluid-velocity-metric-units","title":"2. Basic fluid velocity (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(75, 'L/s')\ndiameter = Diameter(180, 'mm')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\nprint(f\"Velocity: {velocity}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#3-velocity-and-reynolds-number-us-units","title":"3. Velocity and Reynolds number (US Units)","text":"<pre><code>from processpi.units import Density, Viscosity\n\nvolumetric_flow_rate = VolumetricFlowRate(6000, 'gal/min')\ndiameter = Diameter(19.25, 'in')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\ndensity = Density(998, 'kg/m3')\nviscosity = Viscosity(1.0, 'cSt')\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\nprint(f\"Velocity: {velocity.to('ft/s')}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#4-velocity-and-reynolds-number-metric-units","title":"4. Velocity and Reynolds number (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(640, 'm3/h')\ndiameter = Diameter(380, 'mm')\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\n\ndensity = Density(998, 'kg/m3')\nviscosity = Viscosity(1.0, 'cSt')\nnre = engine.calculate(\"reynolds_number\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#5-friction-factor-using-colebrook-white-us-units","title":"5. Friction Factor using Colebrook-White (US Units)","text":"<pre><code>from processpi.units import Length\n\nvolumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\nroughness = Length(0.002, \"in\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\nnre = engine.calculate(\"nre\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\nfriction_factor = engine.calculate(\"friction_factor_colebrookwhite\", diameter=diameter, roughness=roughness, reynolds_number=nre)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#6-darcy-pressure-drop-us-units","title":"6. Darcy Pressure Drop (US Units)","text":"<pre><code>length = Length(1000, \"ft\")\npressure_drop = engine.calculate(\"pressure_drop_darcy\", friction_factor=friction_factor, length=length,\n                                 diameter=diameter, density=density, velocity=velocity)\n\nprint(f\"Pressure Drop: {pressure_drop.to('psi')}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#7-long-pipeline-pressure-drop-metric-units","title":"7. Long Pipeline Pressure Drop (Metric Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(34000, \"m3/h\")\ndiameter = Diameter(2, \"m\")\nroughness = Length(0.05, \"mm\")\ndensity = Density(998, \"kg/m3\")\nviscosity = Viscosity(1.0, \"cP\")\n\nvelocity = engine.calculate(\"fluid_velocity\", volumetric_flow_rate=volumetric_flow_rate, diameter=diameter)\nnre = engine.calculate(\"nre\", density=density, velocity=velocity, diameter=diameter, viscosity=viscosity)\nfriction_factor = engine.calculate(\"friction_factor_colebrookwhite\", diameter=diameter, roughness=roughness, reynolds_number=nre)\nlength = Length(5, \"km\")\npressure_drop = engine.calculate(\"pressure_drop_darcy\", friction_factor=friction_factor, length=length,\n                                 diameter=diameter, density=density, velocity=velocity)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Reynolds Number: {nre}\")\nprint(f\"Friction Factor: {friction_factor}\")\nprint(f\"Pressure Drop: {pressure_drop.to('kPa')}\")\n</code></pre>"},{"location":"user-guide/calculations/calculations/#8-pressure-drop-using-hazen-williams-us-units","title":"8. Pressure Drop using Hazen-Williams (US Units)","text":"<pre><code>volumetric_flow_rate = VolumetricFlowRate(3000, \"gal/min\")\ndiameter = Diameter(15.25, \"in\")\ndensity = Density(998, \"kg/m3\")\nlength = Length(1000, \"ft\")\n\npressure_drop = engine.calculate(\"pressure_drop_hazen_williams\", length=length, flow_rate=volumetric_flow_rate,\n                                 diameter=diameter, density=density, coefficient=120)\n\nprint(f\"Pressure Drop: {pressure_drop.to('psi')}\")\n</code></pre> <p>\u2705 These examples demonstrate how to use the <code>CalculationEngine</code> for fluid mechanics problems in US and Metric units.</p>"},{"location":"user-guide/components/acetic_acid/","title":"Class: <code>AceticAcid</code>","text":""},{"location":"user-guide/components/acetic_acid/#description","title":"Description","text":"<p>The <code>AceticAcid</code> class represents the properties and constants for Acetic Acid (CH<sub>3</sub>\u200bCOOH).</p> <p>This class provides a comprehensive set of physical and thermodynamic properties for Acetic Acid, which are essential for various process engineering calculations. These properties are stored as class attributes and are available for use by other calculation modules within the ProcessPI library.</p>"},{"location":"user-guide/components/acetic_acid/#properties","title":"Properties","text":"<ul> <li><code>name</code> (string): The common name of the compound.  </li> <li><code>formula</code> (string): The chemical formula (CH<sub>3</sub>\u200bCOOH).  </li> <li><code>molecular_weight</code> (float): The molar mass in g/mol.</li> </ul>"},{"location":"user-guide/components/acetic_acid/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/components/acetic_acid/#class-aecticacid","title":"<code>class AecticAcid()</code>","text":"<p>A class for handling Acetic Acid properties.</p> <p>Parameters:</p> <ul> <li><code>temperature</code> : <code>Temperature</code>, default = <code>Temperature(35,\"C\")</code></li> <li><code>pressure</code> : <code>Pressure</code>, default = <code>Pressure(1,\"atm\")</code></li> <li><code>density</code> : <code>Density</code>, default = <code>None</code></li> <li><code>specific_heat</code> : <code>SpecificHeat</code>, default = <code>None</code></li> <li><code>viscosity</code> : <code>Viscosity</code>, default = <code>None</code> </li> <li><code>thermal_conductivity</code> : <code>ThermalConductivity</code>, default = <code>None</code></li> <li><code>vapor_pressure</code> : <code>Pressure</code>, default = <code>None</code> </li> <li><code>enthalpy</code> : <code>HeatOfVaporization</code>, default = <code>None</code> </li> </ul> <p>Examples:</p>"},{"location":"user-guide/components/acetic_acid/#1-acetone-at-35-c","title":"1. Acetone at 35 \u00b0C","text":"<pre><code>from processpi.components.acetone import Acetone\nfrom processpi.units import *\n\nacetone = Acetone(temperature=Temperature(35, \"C\"))\nprint(acetone.density().to(\"kg/m3\"))\nprint(acetone.viscosity().to(\"Pa\u00b7s\"))\nprint(acetone.specific_heat().to(\"J/kgK\"))\nprint(acetone.thermal_conductivity().to(\"W/mK\"))\nprint(acetone.vapor_pressure().to(\"Pa\"))\nprint(acetone.enthalpy().to(\"J/kg\"))\n</code></pre>"},{"location":"user-guide/components/acetic_acid/#2-acetone-at-higher-temperature-60-c-with-unit-conversion","title":"2. Acetone at higher temperature (60 \u00b0C) with unit conversion","text":"<pre><code>acetone_high = Acetone(temperature=Temperature(60, \"C\"))\nprint(acetone_high.density().to(\"lb/ft3\"))\nprint(acetone_high.viscosity().to(\"cP\"))\n</code></pre>"},{"location":"user-guide/components/acetic_acid/#methods","title":"Methods","text":"<p>The properties of the <code>AceticAcid</code> class are calculated using the following methods, which are inherited from the base <code>Component</code> class.</p> <ul> <li><code>phase()</code>: Detects the phase of the substance (<code>\"gas\"</code> or <code>\"liquid\"</code>) by comparing the system pressure to the calculated vapor pressure. The rule is: <code>\"gas\"</code> if P \\&lt; P<sub>vap</sub>,\u200b otherwise <code>\"liquid\"</code>.  </li> <li><code>density()</code>:  </li> <li> <p>Gas Phase: Calculates density using the Ideal Gas Law:</p> <p></p> </li> <li> <p>Liquid Phase: Calculates density using the DIPPR correlation:     \u03c1=B(1+(1\u2212Tc\u200bT\u200b)n)A\u200b\u22c5MWg/mol\u200b</p> </li> <li> <p><code>specific_heat()</code>: Calculates specific heat capacity (Cp\u200b) as a polynomial function of temperature:   Cp\u200b=i=0\u22114\u200bCi\u200b\u22c5Ti\u22c5MWg/mol\u200b</p> </li> <li> <p><code>viscosity()</code>:  </p> </li> <li> <p>Liquid Phase: Calculates viscosity (\u03bc) using the DIPPR correlation:     ln(\u03bc)=A+TB\u200b+Cln(T)+DTE</p> </li> <li> <p>Gas Phase: Calculates viscosity using Sutherland's Law.  </p> </li> <li> <p><code>thermal_conductivity()</code>: Calculates thermal conductivity (k) as a polynomial function of temperature:   k=i=0\u22114\u200bCi\u200b\u22c5Ti</p> </li> <li> <p><code>vapor_pressure()</code>: Calculates vapor pressure (Pvap\u200b) using the Antoine-style equation:   ln(Pvap\u200b)=A+TB\u200b+Cln(T)+DTE</p> </li> <li> <p><code>enthalpy()</code>: Calculates the enthalpy of vaporization (\u0394Hvap\u200b) using a correlation based on reduced temperature (Tr\u200b=Tc\u200bT\u200b):   \u0394Hvap\u200b=A\u22c5(1\u2212Tr\u200b)B+C(1\u2212Tr\u200b)+D(1\u2212Tr\u200b)2+E(1\u2212Tr\u200b)3\u22c5MWg/mol\u200b</p> </li> </ul>"},{"location":"user-guide/components/components/","title":"Components","text":"<p>Example usage of the ProcessPI <code>Component</code> interface.</p> <p>This guide covers:</p> <ol> <li>Acetone at 35 \u00b0C  </li> <li>Acetone at 60 \u00b0C (unit conversion demo)  </li> <li>Generic Organic Liquid  </li> <li>Generic Inorganic Liquid  </li> <li>Generic Gas  </li> <li>Oil at elevated temperature  </li> <li>Vapor with custom properties override  </li> <li>Quick comparison between two fluids  </li> <li>Water at room temperature  </li> <li>Toluene at 50 \u00b0C  </li> <li>Methanol at 30 \u00b0C  </li> </ol>"},{"location":"user-guide/components/components/#1-acetone-at-35-c","title":"1. Acetone at 35 \u00b0C","text":""},{"location":"user-guide/components/components/#from-processpicomponentsacetone-import-acetone-from-processpiunits-import-acetone-acetonetemperaturetemperature35-c-printacetonedensitytokgm3-printacetoneviscositytopas-printacetonespecific_heattojkgk-printacetonethermal_conductivitytowmk-printacetonevapor_pressuretopa-printacetoneenthalpytojkg","title":"<pre><code>from processpi.components.acetone import Acetone\nfrom processpi.units import *\n\nacetone = Acetone(temperature=Temperature(35, \"C\"))\nprint(acetone.density().to(\"kg/m3\"))\nprint(acetone.viscosity().to(\"Pa\u00b7s\"))\nprint(acetone.specific_heat().to(\"J/kgK\"))\nprint(acetone.thermal_conductivity().to(\"W/mK\"))\nprint(acetone.vapor_pressure().to(\"Pa\"))\nprint(acetone.enthalpy().to(\"J/kg\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#2-acetone-at-higher-temperature-60-c-with-unit-conversion","title":"2. Acetone at higher temperature (60 \u00b0C) with unit conversion","text":""},{"location":"user-guide/components/components/#acetone_high-acetonetemperaturetemperature60-c-printacetone_highdensitytolbft3-printacetone_highviscositytocp","title":"<pre><code>acetone_high = Acetone(temperature=Temperature(60, \"C\"))\nprint(acetone_high.density().to(\"lb/ft3\"))\nprint(acetone_high.viscosity().to(\"cP\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#3-generic-organic-liquid","title":"3. Generic Organic Liquid","text":""},{"location":"user-guide/components/components/#from-processpicomponentsorganic_liquid-import-organicliquid-organic-organicliquidtemperaturetemperature40-c-printorganicdensitytokgm3-printorganicviscositytopas-printorganicspecific_heattojkgk","title":"<pre><code>from processpi.components.organic_liquid import OrganicLiquid\n\norganic = OrganicLiquid(temperature=Temperature(40, \"C\"))\nprint(organic.density().to(\"kg/m3\"))\nprint(organic.viscosity().to(\"Pa\u00b7s\"))\nprint(organic.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#4-generic-inorganic-liquid","title":"4. Generic Inorganic Liquid","text":""},{"location":"user-guide/components/components/#from-processpicomponentsinorganic_liquid-import-inorganicliquid-inorganic-inorganicliquidtemperaturetemperature50-c-printinorganicdensitytokgm3-printinorganicviscositytopas-printinorganicspecific_heattojkgk","title":"<pre><code>from processpi.components.inorganic_liquid import InorganicLiquid\n\ninorganic = InorganicLiquid(temperature=Temperature(50, \"C\"))\nprint(inorganic.density().to(\"kg/m3\"))\nprint(inorganic.viscosity().to(\"Pa\u00b7s\"))\nprint(inorganic.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#5-generic-gas","title":"5. Generic Gas","text":""},{"location":"user-guide/components/components/#from-processpicomponentsgas-import-gas-gas-gastemperaturetemperature100-c-printgasdensitytokgm3-printgasviscositytopas-printgasspecific_heattojkgk","title":"<pre><code>from processpi.components.gas import Gas\n\ngas = Gas(temperature=Temperature(100, \"C\"))\nprint(gas.density().to(\"kg/m3\"))\nprint(gas.viscosity().to(\"Pa\u00b7s\"))\nprint(gas.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#6-oil-at-elevated-temperature","title":"6. Oil at elevated temperature","text":""},{"location":"user-guide/components/components/#from-processpicomponentsoil-import-oil-oil-oiltemperaturetemperature150-c-printoildensitytokgm3-printoilviscositytocp-printoilspecific_heattojkgk","title":"<pre><code>from processpi.components.oil import Oil\n\noil = Oil(temperature=Temperature(150, \"C\"))\nprint(oil.density().to(\"kg/m3\"))\nprint(oil.viscosity().to(\"cP\"))\nprint(oil.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#7-vapor-with-custom-overrides","title":"7. Vapor with custom overrides","text":""},{"location":"user-guide/components/components/#from-processpicomponentsvapor-import-vapor-from-processpiunits-import-density-viscosity-specificheat-custom_vapor-vapor-temperaturetemperature120-c-densitydensity07-kgm3-viscosityviscosity000002-pas-specific_heatspecificheat1900-jkgk-printcustom_vapordensitytokgm3-printcustom_vaporviscositytopas-printcustom_vaporspecific_heattojkgk","title":"<pre><code>from processpi.components.vapor import Vapor\nfrom processpi.units import Density, Viscosity, SpecificHeat\n\ncustom_vapor = Vapor(\n    temperature=Temperature(120, \"C\"),\n    density=Density(0.7, \"kg/m3\"),\n    viscosity=Viscosity(0.00002, \"Pa\u00b7s\"),\n    specific_heat=SpecificHeat(1900, \"J/kgK\"),\n)\nprint(custom_vapor.density().to(\"kg/m3\"))\nprint(custom_vapor.viscosity().to(\"Pa\u00b7s\"))\nprint(custom_vapor.specific_heat().to(\"J/kgK\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#8-quick-comparison-organic-vs-inorganic-liquid","title":"8. Quick comparison: Organic vs. Inorganic Liquid","text":""},{"location":"user-guide/components/components/#organic_50-organicliquidtemperaturetemperature50-c-inorganic_50-inorganicliquidtemperaturetemperature50-c-printorganic_50densitytokgm3-printinorganic_50densitytokgm3-printorganic_50viscositytopas-printinorganic_50viscositytopas","title":"<pre><code>organic_50 = OrganicLiquid(temperature=Temperature(50, \"C\"))\ninorganic_50 = InorganicLiquid(temperature=Temperature(50, \"C\"))\n\nprint(organic_50.density().to(\"kg/m3\"))\nprint(inorganic_50.density().to(\"kg/m3\"))\nprint(organic_50.viscosity().to(\"Pa\u00b7s\"))\nprint(inorganic_50.viscosity().to(\"Pa\u00b7s\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#9-water-at-room-temperature","title":"9. Water at room temperature","text":""},{"location":"user-guide/components/components/#from-processpicomponentswater-import-water-water-watertemperaturetemperature25-c-printwaterdensitytokgm3-printwaterviscositytopas-printwaterspecific_heattojkgk-printwaterthermal_conductivitytowmk-printwatervapor_pressuretopa","title":"<pre><code>from processpi.components.water import Water\n\nwater = Water(temperature=Temperature(25, \"C\"))\nprint(water.density().to(\"kg/m3\"))\nprint(water.viscosity().to(\"Pa\u00b7s\"))\nprint(water.specific_heat().to(\"J/kgK\"))\nprint(water.thermal_conductivity().to(\"W/mK\"))\nprint(water.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#10-toluene-at-50-c","title":"10. Toluene at 50 \u00b0C","text":""},{"location":"user-guide/components/components/#from-processpicomponentstoluene-import-toluene-toluene-toluenetemperaturetemperature50-c-printtoluenedensitytokgm3-printtolueneviscositytopas-printtoluenespecific_heattojkgk-printtoluenevapor_pressuretopa","title":"<pre><code>from processpi.components.toluene import Toluene\n\ntoluene = Toluene(temperature=Temperature(50, \"C\"))\nprint(toluene.density().to(\"kg/m3\"))\nprint(toluene.viscosity().to(\"Pa\u00b7s\"))\nprint(toluene.specific_heat().to(\"J/kgK\"))\nprint(toluene.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#11-methanol-at-30-c","title":"11. Methanol at 30 \u00b0C","text":""},{"location":"user-guide/components/components/#from-processpicomponentsmethanol-import-methanol-methanol-methanoltemperaturetemperature30-c-printmethanoldensitytokgm3-printmethanolviscositytopas-printmethanolspecific_heattojkgk-printmethanolthermal_conductivitytowmk-printmethanolvapor_pressuretopa","title":"<pre><code>from processpi.components.methanol import Methanol\n\nmethanol = Methanol(temperature=Temperature(30, \"C\"))\nprint(methanol.density().to(\"kg/m3\"))\nprint(methanol.viscosity().to(\"Pa\u00b7s\"))\nprint(methanol.specific_heat().to(\"J/kgK\"))\nprint(methanol.thermal_conductivity().to(\"W/mK\"))\nprint(methanol.vapor_pressure().to(\"Pa\"))\n</code></pre>","text":""},{"location":"user-guide/components/components/#summary","title":"\u2705 Summary","text":"<p>Every fluid is represented as a class (e.g., Water, Acetone, Oil, Gas).</p> <p>Properties available: density(), viscosity(), specific_heat(), thermal_conductivity(), vapor_pressure(), enthalpy().</p> <p>Values can be converted to engineering units via .to(\"\"). <p>Custom overrides are supported for flexibility.</p> <p>This system supports realistic chemical &amp; process engineering workflows.</p>"},{"location":"user-guide/pipe-lines/pipelines/","title":"ProcessPI - Pipeline Examples","text":"<p>This document contains worked examples using the ProcessPI pipeline engine and network module.</p>"},{"location":"user-guide/pipe-lines/pipelines/#example-1-chlorine-gas-pipeline","title":"Example 1: Chlorine Gas Pipeline","text":"<p>Estimate the optimum pipe diameter for a flow of dry chlorine gas of 10 000 kg/h at 6 atm and 20\u00b0C through carbon steel pipe.</p> <pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\n\n# Define fluid and mass flow\nfluid = Chlorine(temperature=Temperature(20, \"C\"), pressure=Pressure(6, \"atm\"))\nmass_flow = MassFlowRate(10000, \"kg/h\")\n\nprint(fluid.density())\n\n# Create engine without an explicit network\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow\n)\nresults = model.run()  # auto diameter sizing\nresults.summary()\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>17.685884 kg/m3\n\u2705 Found optimal diameter based on recommended velocity.\n   Selected Diameter: 8.0 in \n   Calculated Pressure Drop: 15.43 Pa\n\u26a0\ufe0f Warning: Final velocity 4.87 m/s outside recommended range (5.00-10.00 m/s) for Chlorine.\n</code></pre>"},{"location":"user-guide/pipe-lines/pipelines/#example-2-co2-transfer-pipeline","title":"Example 2: CO\u2082 Transfer Pipeline","text":"<p>Carbon dioxide is to be conveyed from the top of the stripper of ammonia plant to urea plant.</p> <pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = Carbondioxide(temperature=Temperature(60, \"C\"))\nprint(fluid.density(), fluid.viscosity().to(\"cP\"))\n\nmass_flow = MassFlowRate(1000, \"t/day\")\npipe = Pipe(name=\"Main Pipe\", length=Length(800, \"m\"), material=\"CS\")\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=8)\nvalve = Fitting(fitting_type=\"gate_valve\", quantity=1)\nnozzle = Fitting(fitting_type=\"exit\", quantity=1)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbow, valve, nozzle],\n    available_dp=Pressure(24, \"kPa\")\n)\nresults = model.run()\nmodel.summary()\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>1.609882 kg/m3 0.019523 cP (dynamic)\n\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 22.0 in (0.559 m)\n   Calculated Pressure Drop: 18414.26 Pa (allowed: 24000.00 Pa)\n\u26a0\ufe0f Warning: Final velocity 31.41 m/s outside recommended range (8.00-15.00 m/s) for Carbon Dioxide.\n</code></pre>"},{"location":"user-guide/pipe-lines/pipelines/#example-3-carbon-monoxide-pipeline","title":"Example 3: Carbon Monoxide Pipeline","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = CarbonMonoxide(temperature=Temperature(50, \"C\"))\n\nmass_flow = MassFlowRate(1500, \"kg/h\")\npipe = Pipe(name=\"Main Pipe\", length=Length(4, \"km\"), material=\"CS\")\nvalves = Fitting(fitting_type=\"gate_valve\", quantity=2)\nelbows_45 = Fitting(fitting_type=\"standard_elbow_45_deg\", quantity=3)\nelbows_90 = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=6)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbows_45, elbows_90, valves],\n    available_dp=Pressure(50, \"kPa\"),\n)\nresults = model.run()\nmodel.summary()\nprint(results.total_pressure_drop.to(\"atm\"))\nresults.detailed_summary()\n</code></pre> <p>Output</p> <pre><code>\u2705 Found optimal diameter for available pressure drop.\n   Selected Diameter: 8.0 in (0.203 m)\n   Calculated Pressure Drop: 28658.34 Pa (allowed: 50000.00 Pa)\n</code></pre>"},{"location":"user-guide/pipe-lines/pipelines/#example-4-water-transfer-steel-vs-concrete","title":"Example 4: Water Transfer (Steel vs Concrete)","text":"<pre><code>from processpi.components import *\nfrom processpi.units import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\n\nfluid = Water(temperature=Temperature(40, \"C\"))\nlength = Length(3200, \"m\")\npipe = Pipe(name=\"Main Water Pipe\", length=length, material=\"Concrete\")\npipe2 = Pipe(name=\"Main Water Pipe\", length=length, material=\"CS\")\nallowable_dp = Pressure(0.58, \"atm\")\nflow_rate = MassFlowRate(100000, \"kg/h\")\n\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, pipe=pipe, mass_flow=flow_rate, available_dp=allowable_dp)\n\nmodel2 = PipelineEngine()\nmodel2.fit(fluid=fluid, pipe=pipe2, mass_flow=flow_rate, available_dp=allowable_dp)\n\nresults = model.run()\nresults2 = model2.run()\n\nmodel.summary()\nresults.detailed_summary()\nmodel2.summary()\nresults2.detailed_summary()\n</code></pre>"},{"location":"user-guide/pipe-lines/pipelines/#example-5-organic-liquid-with-valves","title":"Example 5: Organic Liquid with Valves","text":"<pre><code>from processpi.units import *\nfrom processpi.components import *\nfrom processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.fittings import Fitting\n\nfluid = OrganicLiquid(density=Density(930, \"kg/m3\"), viscosity=Viscosity(0.91, \"cP\"))\nmass_flow = MassFlowRate(5000, \"kg/h\")\n\npipe = Pipe(name=\"Main Organic Liquid Pipe\", length=Length(50, \"m\"))\nelbow = Fitting(fitting_type=\"standard_elbow_90_deg\", quantity=6)\ntees = Fitting(fitting_type=\"standard_tee_through_flow\", quantity=2)\ngate_valves = Fitting(fitting_type=\"gate_valve\", quantity=2)\nglobe_valves = Fitting(fitting_type=\"globe_valve\", quantity=2)\norifice = Fitting(fitting_type=\"sudden_contraction\", quantity=1)\n\nmodel = PipelineEngine()\nmodel.fit(\n    fluid=fluid,\n    mass_flow=mass_flow,\n    pipe=pipe,\n    fittings=[elbow, tees, gate_valves, globe_valves, orifice],\n)\nresults = model.run()\nmodel.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"user-guide/pipe-lines/pipelines/#example-6-complex-network-chilled-water-loop","title":"Example 6: Complex Network (Chilled Water Loop)","text":"<pre><code>from processpi.pipelines.engine import PipelineEngine\nfrom processpi.pipelines.pipes import Pipe\nfrom processpi.pipelines.network import PipelineNetwork\nfrom processpi.pipelines.pumps import Pump\nfrom processpi.pipelines.vessel import Vessel\nfrom processpi.pipelines.equipment import Equipment\nfrom processpi.units import *\nfrom processpi.components import Water\n\n# Build network\nnet = PipelineNetwork(\"Chilled Water Loop\")\n\n# Nodes\nnet.add_node(\"Tank\", elevation=0)\nnet.add_node(\"Pump_In\", elevation=0)\nnet.add_node(\"Pump_Out\", elevation=1)\nnet.add_node(\"Main_In\", elevation=1)\nnet.add_node(\"Main_Out\", elevation=1)\nnet.add_node(\"Return_Tank\", elevation=0)\n\npump = Pump(\"Pump1\", pump_type=\"Centrifugal\", inlet_pressure=Pressure(101325, \"Pa\"), outlet_pressure=Pressure(201325, \"Pa\"))\nvessel = Vessel(\"ExpansionTank\")\nchiller = Equipment(\"Chiller\", pressure_drop=0.2)\n\n# Tank \u2192 Pump\nnet.add_edge(Pipe(\"TankPipe\", length=5), \"Tank\", \"Pump_In\")\nnet.add_edge(pump, \"Pump_In\", \"Pump_Out\")\n\n# Pump \u2192 Main header\nnet.add_edge(Pipe(\"MainPipe\", length=15), \"Pump_Out\", \"Main_In\")\nnet.add_edge(Pipe(\"MainPipe_Out\", length=5), \"Main_In\", \"Main_Out\")\n\n# Returns \u2192 Tank\nnet.add_edge(vessel, \"Main_Out\", \"Return_Tank\")\nnet.add_edge(chiller, \"Return_Tank\", \"Pump_In\")\n\nfluid = Water(temperature=Temperature(10, \"C\"), pressure=Pressure(101325, \"Pa\"))\nflow_rate = VolumetricFlowRate(300, \"m3/h\")\n\nmodel = PipelineEngine()\nmodel.fit(fluid=fluid, flow_rate=flow_rate, network=net)\nresults = model.run()\n\nresults.summary()\nresults.detailed_summary()\n</code></pre>"},{"location":"user-guide/units/area/","title":"Area Class","text":"<p>The Area class is a subclass of Variable designed to represent a two-dimensional quantity with unit-aware capabilities. It ensures accurate calculations by storing all values internally in its base SI unit, square meters (m2).</p>"},{"location":"user-guide/units/area/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Square Meters (m2) square meters m2 1 square centimeters cm2 0.0001 square millimeters mm2 0.000001 square kilometers km2 1,000,000 square inches in2 0.00064516 square feet ft2 0.092903 square yards yd2 0.836127 acres acre 4046.86 hectares ha 10000"},{"location":"user-guide/units/area/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/area/#class-areavalue-unitsm2","title":"class Area(value, units='m2')","text":"<p>A class for handling area measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the area. Must be a non-negative number.  </li> <li>units : str, default='m2'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create an Area object of 100 square centimeters &gt;&gt;&gt; a1 \\= Area(100, \"cm2\")</p> <p># Create an Area object of 0.5 square meters &gt;&gt;&gt; a2 \\= Area(0.5, \"m2\")</p>"},{"location":"user-guide/units/area/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the area, always in square meters (m2). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/area/#methods","title":"Methods","text":""},{"location":"user-guide/units/area/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Area object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Area   A new Area object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize an area of 100 square meters &gt;&gt;&gt; house_area_m2 \\= Area(100)</p> <p># Convert to square feet &gt;&gt;&gt; house_area_ft2 \\= house_area_m2.to(\"ft2\")</p> <p>&gt;&gt;&gt; print(house_area_ft2) 1076.391 ft2</p>"},{"location":"user-guide/units/area/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Area class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Area objects. The result is a new Area object with the unit of the first operand.  </li> <li>__eq__(self, other)   Compares two Area objects for equality based on their internal meter values.</li> </ul> <p>Examples:</p> <p># Create two Area objects &gt;&gt;&gt; area1 \\= Area(1, \"m2\") &gt;&gt;&gt; area2 \\= Area(500, \"cm2\")</p> <p># Add them together &gt;&gt;&gt; total_area \\= area1 + area2</p> <p>&gt;&gt;&gt; print(total_area) 1.05 m2</p>"},{"location":"user-guide/units/area/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the area, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/density/","title":"Density Class","text":"<p>The Density class is a subclass of Variable designed to represent the mass per unit volume of a substance. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms per cubic meter (kg/m3).</p>"},{"location":"user-guide/units/density/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Kilograms per Cubic Meter (kg/m3) kilograms per cubic meter kg/m3 1 grams per cubic centimeter g/cm3 1000 grams per milliliter g/mL 1000 pounds per cubic foot lb/ft3 16.0185 pounds per cubic inch lb/in3 27679.9"},{"location":"user-guide/units/density/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/density/#class-densityvalue-unitskgm3","title":"class Density(value, units='kg/m3')","text":"<p>A class for handling density measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the density. Must be a non-negative number.  </li> <li>units : str, default='kg/m3'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative or units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Density object of 1000 kg/m^3 (the density of water) &gt;&gt;&gt; d1 \\= Density(1000)</p> <p># Create a Density object of 1 g/cm^3 &gt;&gt;&gt; d2 \\= Density(1, \"g/cm3\")</p>"},{"location":"user-guide/units/density/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the density, always in kilograms per cubic meter (kg/m3). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/density/#methods","title":"Methods","text":""},{"location":"user-guide/units/density/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Density object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Density   A new Density object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a density of 1000 kg/m^3 &gt;&gt;&gt; water_density_kg \\= Density(1000)</p> <p># Convert to g/cm^3 &gt;&gt;&gt; water_density_g \\= water_density_kg.to(\"g/cm3\")</p> <p>&gt;&gt;&gt; print(water_density_g) 1.0 g/cm3</p>"},{"location":"user-guide/units/density/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Density class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Density objects. The result is a new Density object with the unit of the first operand.  </li> <li>__eq__(self, other)   Compares two Density objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two Density objects &gt;&gt;&gt; d1 \\= Density(1, \"g/cm3\") &gt;&gt;&gt; d2 \\= Density(200, \"kg/m3\")</p> <p># Add them together &gt;&gt;&gt; total_density \\= d1 + d2</p> <p>&gt;&gt;&gt; print(total_density) 1.2 g/cm3</p>"},{"location":"user-guide/units/density/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the density, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/diameter/","title":"Diameter Class","text":"<p>The Diameter class is a subclass of Variable designed to represent the length of a diameter. It ensures accurate calculations by storing all values internally in its base SI unit, meters (m).</p>"},{"location":"user-guide/units/diameter/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Meters (m) meters m 1 centimeters cm 0.01 millimeters mm 0.001 inches in 0.0254 feet ft 0.3048"},{"location":"user-guide/units/diameter/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/diameter/#class-diametervalue-unitsm","title":"class Diameter(value, units='m')","text":"<p>A class for handling diameter measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the diameter. Must be a non-negative number.  </li> <li>units : str, default='m'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Diameter object of 10 meters &gt;&gt;&gt; d1 \\= Diameter(10)</p> <p># Create a Diameter object of 12 inches &gt;&gt;&gt; d2 \\= Diameter(12, \"in\")</p>"},{"location":"user-guide/units/diameter/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the diameter, always in meters (m). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/diameter/#methods","title":"Methods","text":""},{"location":"user-guide/units/diameter/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Diameter object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Diameter   A new Diameter object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a diameter of 5 meters &gt;&gt;&gt; pipe_diameter_m \\= Diameter(5)</p> <p># Convert to feet &gt;&gt;&gt; pipe_diameter_ft \\= pipe_diameter_m.to(\"ft\")</p> <p>&gt;&gt;&gt; print(pipe_diameter_ft) 16.4042 ft</p>"},{"location":"user-guide/units/diameter/#to_base","title":"to_base()","text":"<p>Returns the internal numeric value of the diameter in its base SI unit, meters (m).</p> <p>Returns:</p> <ul> <li>float   The value of the diameter in meters.</li> </ul>"},{"location":"user-guide/units/diameter/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Diameter class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Diameter objects. The result is a new Diameter object with the unit of the first operand.  </li> <li>__eq__(self, other)   Compares two Diameter objects for equality based on their internal meter values.</li> </ul> <p>Examples:</p> <p># Create two Diameter objects &gt;&gt;&gt; d1 \\= Diameter(1, \"m\") &gt;&gt;&gt; d2 \\= Diameter(10, \"cm\")</p> <p># Add them together &gt;&gt;&gt; total_diameter \\= d1 + d2</p> <p>&gt;&gt;&gt; print(total_diameter) 1.1 m</p>"},{"location":"user-guide/units/diameter/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the diameter, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation of the object, suitable for debugging.</li> </ul>"},{"location":"user-guide/units/dimensionless/","title":"Dimensionless Class","text":"<p>The Dimensionless class is a subclass of Variable designed to represent quantities that do not have physical units. These are often ratios of other quantities, such as Reynolds number, friction factor, or efficiency. The class provides a foundation for performing arithmetic operations on these numbers while maintaining clarity about their unitless nature.</p>"},{"location":"user-guide/units/dimensionless/#supported-units","title":"Supported Units","text":"<p>By definition, dimensionless quantities are unitless. No units are supported for this class.</p>"},{"location":"user-guide/units/dimensionless/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/dimensionless/#class-dimensionlessvalue","title":"class Dimensionless(value)","text":"<p>A class for handling dimensionless quantities. It ensures that the value is a number and provides standard arithmetic operations.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the dimensionless quantity.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If value is not a numeric type (int or float).</li> </ul> <p>Examples:</p> <p># Create a Dimensionless object for Reynolds number &gt;&gt;&gt; Re \\= Dimensionless(5000)</p> <p># Create a Dimensionless object for friction factor &gt;&gt;&gt; f \\= Dimensionless(0.02)</p>"},{"location":"user-guide/units/dimensionless/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the dimensionless quantity. This is the internal representation. .original_value float The numeric value as provided during initialization."},{"location":"user-guide/units/dimensionless/#methods","title":"Methods","text":""},{"location":"user-guide/units/dimensionless/#totarget_unitnone","title":"to(target_unit=None)","text":"<p>For dimensionless quantities, unit conversion is not applicable. This method is provided for interface consistency with other Variable subclasses. It returns a new Dimensionless object with the same value.</p> <p>Parameters:</p> <ul> <li>target_unit : None   This parameter is ignored for this class.</li> </ul> <p>Returns:</p> <ul> <li>Dimensionless   A new Dimensionless object with the same value.</li> </ul> <p>Examples:</p> <p># The to() method simply returns a copy &gt;&gt;&gt; Re \\= Dimensionless(5000) &gt;&gt;&gt; Re_copy \\= Re.to()</p> <p>&gt;&gt;&gt; print(Re \\== Re_copy) True</p>"},{"location":"user-guide/units/dimensionless/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Dimensionless class supports addition (+) and multiplication (*) with other Dimensionless objects or standard numeric types.</p> <ul> <li>__add__(self, other)   Adds two Dimensionless objects. The result is a new Dimensionless object.   Raises: TypeError if other is not a Dimensionless instance.  </li> <li>__mul__(self, other)   Multiplies a Dimensionless object by another Dimensionless object or a standard numeric type (int, float).   Raises: TypeError if other is an unsupported type.  </li> <li>__eq__(self, other)   Compares two Dimensionless objects for equality based on their values.</li> </ul> <p>Examples:</p> <p># Addition with another dimensionless quantity &gt;&gt;&gt; d1 \\= Dimensionless(0.5) &gt;&gt;&gt; d2 \\= Dimensionless(1.5) &gt;&gt;&gt; d_total \\= d1 + d2 &gt;&gt;&gt; print(d_total) 2.0 (dimensionless)</p> <p># Multiplication with a numeric type &gt;&gt;&gt; Re \\= Dimensionless(5000) &gt;&gt;&gt; Re_doubled \\= Re * 2 &gt;&gt;&gt; print(Re_doubled) 10000.0 (dimensionless)</p>"},{"location":"user-guide/units/dimensionless/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the dimensionless quantity, rounded to six decimal places, followed by (dimensionless).  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging, such as 5000 (dimensionless).  </li> <li>__format__(self, format_spec)   Allows for custom string formatting of the numeric value, such as with f-strings.</li> </ul>"},{"location":"user-guide/units/heat_flow/","title":"HeatFlow Class","text":"<p>The HeatFlow class is a subclass of Variable designed to represent the total heat transfer rate. It ensures accurate calculations by storing all values internally in its base SI unit, Watts (W).</p>"},{"location":"user-guide/units/heat_flow/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Watts (W) Watts W 1 kilowatts kW 1000 megawatts MW 106 British Thermal Units per hour BTU/h 0.293071 calories per second cal/s 4.184 kilocalories per hour kcal/h 1.163"},{"location":"user-guide/units/heat_flow/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/heat_flow/#class-heatflowvalue-unitsw","title":"class HeatFlow(value, units='W')","text":"<p>A class for handling heat flow measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the heat flow. Must be a non-negative number.  </li> <li>units : str, default='W'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a HeatFlow object of 5000 Watts &gt;&gt;&gt; Q1 \\= HeatFlow(5000, \"W\")</p> <p># Create a HeatFlow object of 5 kilowatts &gt;&gt;&gt; Q2 \\= HeatFlow(5, \"kW\")</p>"},{"location":"user-guide/units/heat_flow/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the heat flow, always in Watts (W). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/heat_flow/#methods","title":"Methods","text":""},{"location":"user-guide/units/heat_flow/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new HeatFlow object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>HeatFlow   A new HeatFlow object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a heat flow of 5000 Watts &gt;&gt;&gt; heat_flow_W \\= HeatFlow(5000)</p> <p># Convert to kilowatts &gt;&gt;&gt; heat_flow_kW \\= heat_flow_W.to(\"kW\")</p> <p>&gt;&gt;&gt; print(heat_flow_kW) 5.0 kW</p>"},{"location":"user-guide/units/heat_flow/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The HeatFlow class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two HeatFlow objects. The result is a new HeatFlow object in the base unit (W).  </li> <li>__eq__(self, other)   Compares two HeatFlow objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two HeatFlow objects &gt;&gt;&gt; Q1 \\= HeatFlow(1000, \"W\") &gt;&gt;&gt; Q2 \\= HeatFlow(1, \"kW\")</p> <p># Add them together &gt;&gt;&gt; total_heat_flow \\= Q1 + Q2</p> <p>&gt;&gt;&gt; print(total_heat_flow) 2000.0 W</p>"},{"location":"user-guide/units/heat_flow/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the heat flow, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_flux/","title":"HeatFlux Class","text":"<p>The HeatFlux class is a subclass of Variable designed to represent heat transfer rate per unit area. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per square meter (W/m2).</p>"},{"location":"user-guide/units/heat_flux/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Watts per Square Meter (W/m2) Watts per square meter W/m2 1 kilowatts per square meter kW/m2 1000 Watts per square centimeter W/cm2 10000 British Thermal Units per hour per square foot BTU/hft2 3.1546 calories per second per square centimeter cal/scm2 41840"},{"location":"user-guide/units/heat_flux/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/heat_flux/#class-heatfluxvalue-unitswm2","title":"class HeatFlux(value, units='W/m2')","text":"<p>A class for handling heat flux measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the heat flux. Must be a non-negative number.  </li> <li>units : str, default='W/m2'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a HeatFlux object of 300 W/m\u00b2 &gt;&gt;&gt; q1 \\= HeatFlux(300)</p> <p># Create a HeatFlux object of 0.3 kW/m\u00b2 &gt;&gt;&gt; q2 \\= HeatFlux(0.3, \"kW/m2\")</p>"},{"location":"user-guide/units/heat_flux/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the heat flux, always in Watts per square meter (W/m2). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/heat_flux/#methods","title":"Methods","text":""},{"location":"user-guide/units/heat_flux/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new HeatFlux object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>HeatFlux   A new HeatFlux object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a heat flux of 1000 W/m\u00b2 &gt;&gt;&gt; heat_flux_W \\= HeatFlux(1000)</p> <p># Convert to kW/m\u00b2 &gt;&gt;&gt; heat_flux_kW \\= heat_flux_W.to(\"kW/m2\")</p> <p>&gt;&gt;&gt; print(heat_flux_kW) 1.0 kW/m2</p>"},{"location":"user-guide/units/heat_flux/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The HeatFlux class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two HeatFlux objects. The result is a new HeatFlux object in the base unit (W/m2).  </li> <li>__eq__(self, other)   Compares two HeatFlux objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two HeatFlux objects &gt;&gt;&gt; q1 \\= HeatFlux(100, \"W/m2\") &gt;&gt;&gt; q2 \\= HeatFlux(0.01, \"W/cm2\")</p> <p># Add them together &gt;&gt;&gt; total_heat_flux \\= q1 + q2</p> <p>&gt;&gt;&gt; print(total_heat_flux) 200.0 W/m2</p>"},{"location":"user-guide/units/heat_flux/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the heat flux, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_of_vapouraization/","title":"HeatOfVaporization Class","text":"<p>The HeatOfVaporization class is a subclass of Variable designed to represent the heat required to change a unit mass of a substance from liquid to gas at a given pressure. It ensures accurate calculations by storing all values internally in its base SI unit, Joules per kilogram (J/kg).</p>"},{"location":"user-guide/units/heat_of_vapouraization/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Joules per Kilogram (J/kg) Joules per kilogram J/kg 1 kilojoules per kilogram kJ/kg 103 megajoules per kilogram MJ/kg 106 calories per gram cal/g 4184 British Thermal Units per pound BTU/lb 2326"},{"location":"user-guide/units/heat_of_vapouraization/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/heat_of_vapouraization/#class-heatofvaporizationvalue-unitsjkg","title":"class HeatOfVaporization(value, units='J/kg')","text":"<p>A class for handling heat of vaporization measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the heat of vaporization. Must be a non-negative number.  </li> <li>units : str, default='J/kg'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative or units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a HeatOfVaporization object of 2.257 MJ/kg &gt;&gt;&gt; hv1 \\= HeatOfVaporization(2257000)</p> <p># Create a HeatOfVaporization object of 540 cal/g &gt;&gt;&gt; hv2 \\= HeatOfVaporization(540, \"cal/g\")</p>"},{"location":"user-guide/units/heat_of_vapouraization/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the heat of vaporization, always in Joules per kilogram (J/kg). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/heat_of_vapouraization/#methods","title":"Methods","text":""},{"location":"user-guide/units/heat_of_vapouraization/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new HeatOfVaporization object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>HeatOfVaporization   A new HeatOfVaporization object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a heat of vaporization of 2257000 J/kg &gt;&gt;&gt; water_hv \\= HeatOfVaporization(2257000, \"J/kg\")</p> <p># Convert to cal/g &gt;&gt;&gt; water_hv_cal \\= water_hv.to(\"cal/g\")</p> <p>&gt;&gt;&gt; print(water_hv_cal) 540.057352 cal/g</p>"},{"location":"user-guide/units/heat_of_vapouraization/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The HeatOfVaporization class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two HeatOfVaporization objects. The result is a new HeatOfVaporization object with the unit of the first operand.  </li> <li>__eq__(self, other)   Compares two HeatOfVaporization objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two HeatOfVaporization objects &gt;&gt;&gt; hv1 \\= HeatOfVaporization(100, \"kJ/kg\") &gt;&gt;&gt; hv2 \\= HeatOfVaporization(20, \"kJ/kg\")</p> <p># Add them together &gt;&gt;&gt; total_hv \\= hv1 + hv2</p> <p>&gt;&gt;&gt; print(total_hv) 120.0 kJ/kg</p>"},{"location":"user-guide/units/heat_of_vapouraization/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the heat of vaporization, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/heat_transfer_coefficient/","title":"HeatTransferCoefficient Class","text":"<p>The HeatTransferCoefficient class is a subclass of Variable designed to represent the heat transfer rate per unit area per unit temperature difference. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per square meter-Kelvin (W/m2cdotK).</p>"},{"location":"user-guide/units/heat_transfer_coefficient/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Watts per Square Meter-Kelvin (W/m2cdotK) Watts per square meter-Kelvin W/m2K 1 kilowatts per square meter-Kelvin kW/m2K 1000 calories per second per square centimeter-degree Celsius cal/scm2C 41840 British Thermal Units per hour per square foot-degree Fahrenheit BTU/hft2F 5.678263"},{"location":"user-guide/units/heat_transfer_coefficient/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/heat_transfer_coefficient/#class-heattransfercoefficientvalue-unitswm2k","title":"class HeatTransferCoefficient(value, units='W/m2K')","text":"<p>A class for handling heat transfer coefficient measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the heat transfer coefficient. Must be a non-negative number.  </li> <li>units : str, default='W/m2K'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a HeatTransferCoefficient object of 200 W/m\u00b2K &gt;&gt;&gt; h1 \\= HeatTransferCoefficient(200)</p> <p># Create a HeatTransferCoefficient object of 0.2 kW/m\u00b2K &gt;&gt;&gt; h2 \\= HeatTransferCoefficient(0.2, \"kW/m2K\")</p>"},{"location":"user-guide/units/heat_transfer_coefficient/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the heat transfer coefficient, always in Watts per square meter-Kelvin (W/m2cdotK). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/heat_transfer_coefficient/#methods","title":"Methods","text":""},{"location":"user-guide/units/heat_transfer_coefficient/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new HeatTransferCoefficient object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>HeatTransferCoefficient   A new HeatTransferCoefficient object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a heat transfer coefficient of 500 W/m\u00b2K &gt;&gt;&gt; h_W \\= HeatTransferCoefficient(500)</p> <p># Convert to BTU/hft\u00b2F &gt;&gt;&gt; h_BTU \\= h_W.to(\"BTU/hft2F\")</p> <p>&gt;&gt;&gt; print(h_BTU) 88.058309 BTU/hft2F</p>"},{"location":"user-guide/units/heat_transfer_coefficient/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The HeatTransferCoefficient class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two HeatTransferCoefficient objects. The result is a new HeatTransferCoefficient object in the base unit (W/m2cdotK).  </li> <li>__eq__(self, other)   Compares two HeatTransferCoefficient objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two HeatTransferCoefficient objects &gt;&gt;&gt; h1 \\= HeatTransferCoefficient(100, \"W/m2K\") &gt;&gt;&gt; h2 \\= HeatTransferCoefficient(0.1, \"kW/m2K\")</p> <p># Add them together &gt;&gt;&gt; total_h \\= h1 + h2</p> <p>&gt;&gt;&gt; print(total_h) 200.0 W/m2K</p>"},{"location":"user-guide/units/heat_transfer_coefficient/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the heat transfer coefficient, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/length/","title":"<code>Length</code>Class","text":"<p>The <code>Length</code> class is a subclass of <code>Variable</code> designed to represent a one-dimensional quantity with unit-aware capabilities. It ensures accurate calculations by storing all values internally in its base unit, meters (m).</p>"},{"location":"user-guide/units/length/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Meters (m) meters m 1 centimeters cm 0.01 millimeters mm 0.001 inches in 0.0254 feet ft 0.3048 kilometers km 1000"},{"location":"user-guide/units/length/#class-reference","title":"Class Reference","text":"<p><code>class Length(value, units='m')</code></p> <p>A class for handling length measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li><code>value</code> : <code>float</code> or <code>int</code>   The numeric value of the length. Must be a positive number.  </li> <li><code>units</code> : <code>str</code>, default=<code>'m'</code>   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>value</code> is negative or <code>units</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Create a Length object of 30 meters  \n&gt;&gt;&gt; length1 = Length(30)\n\n# Create a Length object of 30 inches  \n&gt;&gt;&gt; length2 = Length(30, \"in\")\n</code></pre></p>"},{"location":"user-guide/units/length/#properties","title":"Properties","text":"Property Type Description <code>.value</code> <code>float</code> The numeric value of the length, always in meters (m). This is the internal representation used for all calculations. <code>.original_value</code> <code>float</code> The numeric value as provided during initialization. <code>.original_unit</code> <code>str</code> The unit as provided during initialization."},{"location":"user-guide/units/length/#methods","title":"Methods","text":"<p><code>to(target_unit)</code></p> <p>Returns a new <code>Length</code> object converted to the <code>target_unit</code>. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li><code>target_unit</code> : <code>str</code>   The unit to convert to. Must be one of the [supported units]</li> </ul> <p>Returns:</p> <ul> <li><code>Length</code>   A new <code>Length</code> object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> : If <code>target_unit</code> is not a valid unit.</li> </ul> <p>Examples: <pre><code># Initialize a length of 5 meters  \n&gt;&gt;&gt; distance_m = Length(5)\n\n# Convert to feet  \n&gt;&gt;&gt; distance_ft = distance_m.to(\"ft\")\n\n&gt;&gt;&gt; print(distance_ft)  \n16.4042 ft\n</code></pre> Arithmetic Operations</p> <p>The <code>Length</code> class supports addition (<code>+</code>) and comparison (<code>==</code>).</p> <ul> <li><code>__add__(self, other)</code>   Adds two Length objects. The result is a new Length object with the unit of the first operand.  </li> <li><code>__eq__(self, other)</code>   Compares two Length objects for equality based on their internal meter values.</li> </ul> <p>Examples: <pre><code># Create two Length objects  \n&gt;&gt;&gt; length1 = Length(1, \"m\")  \n&gt;&gt;&gt; length2 = Length(10, \"cm\")\n\n# Add them together  \n&gt;&gt;&gt; total_length = length1 + length2\n\n&gt;&gt;&gt; print(total_length)  \n1.1 m\n</code></pre> String Representation</p> <ul> <li><code>__str__(self)</code>   Returns a human-readable string representation of the length, rounded to six decimal places, using its original value and unit.  </li> <li><code>__repr__(self)</code>   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/mass/","title":"Mass Class","text":"<p>The Mass class is a subclass of Variable designed to represent a quantity of mass. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms (kg).</p>"},{"location":"user-guide/units/mass/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Kilograms (kg) kilograms kg 1 grams g 0.001 milligrams mg 0.000001 ton ton 1000 pounds lb 0.453592 ounces oz 0.0283495 metric tons mt 1000 micrograms ug 10\u22129"},{"location":"user-guide/units/mass/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/mass/#class-massvalue-unitskg","title":"class Mass(value, units='kg')","text":"<p>A class for handling mass measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the mass. Must be a non-negative number.  </li> <li>units : str, default='kg'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Mass object of 500 grams &gt;&gt;&gt; m1 \\= Mass(500, \"g\")</p> <p># Create a Mass object of 2 kilograms &gt;&gt;&gt; m2 \\= Mass(2, \"kg\")</p>"},{"location":"user-guide/units/mass/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the mass, always in kilograms (kg). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/mass/#methods","title":"Methods","text":""},{"location":"user-guide/units/mass/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Mass object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Mass   A new Mass object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a mass of 500 grams &gt;&gt;&gt; mass_g \\= Mass(500, \"g\")</p> <p># Convert to pounds &gt;&gt;&gt; mass_lb \\= mass_g.to(\"lb\")</p> <p>&gt;&gt;&gt; print(mass_lb) 1.102312 lb</p>"},{"location":"user-guide/units/mass/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Mass class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Mass objects. The result is a new Mass object in the base unit (kg).  </li> <li>__eq__(self, other)   Compares two Mass objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two Mass objects &gt;&gt;&gt; m1 \\= Mass(1, \"kg\") &gt;&gt;&gt; m2 \\= Mass(500, \"g\")</p> <p># Add them together &gt;&gt;&gt; total_mass \\= m1 + m2</p> <p>&gt;&gt;&gt; print(total_mass) 1.5 kg</p>"},{"location":"user-guide/units/mass/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the mass, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/mass_flowrate/","title":"MassFlowRate Class","text":"<p>The MassFlowRate class is a subclass of Variable designed to represent the mass of a substance passing per unit of time. It ensures accurate calculations by storing all values internally in its base SI unit, kilograms per second (kg/s).</p>"},{"location":"user-guide/units/mass_flowrate/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Kilograms per Second (kg/s) kilograms per second kg/s 1 kilograms per hour kg/h 1/3600 grams per second g/s 0.001 grams per minute g/min 0.001/60 grams per hour g/h 0.001/3600 pounds per second lb/s 0.453592 pounds per minute lb/min 0.453592/60 pounds per hour lb/h 0.453592/3600 kilograms per day kg/day 1/86400 tons per day t/day 0.0115740741"},{"location":"user-guide/units/mass_flowrate/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/mass_flowrate/#class-massflowratevalue-unitskgs","title":"class MassFlowRate(value, units='kg/s')","text":"<p>A class for handling mass flow rate measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the mass flow rate. Must be a non-negative number.  </li> <li>units : str, default='kg/s'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a MassFlowRate object of 100 kg/h &gt;&gt;&gt; mfr1 \\= MassFlowRate(100, \"kg/h\")</p> <p># Create a MassFlowRate object of 0.5 lb/s &gt;&gt;&gt; mfr2 \\= MassFlowRate(0.5, \"lb/s\")</p>"},{"location":"user-guide/units/mass_flowrate/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the mass flow rate, always in kilograms per second (kg/s). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/mass_flowrate/#methods","title":"Methods","text":""},{"location":"user-guide/units/mass_flowrate/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new MassFlowRate object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>MassFlowRate   A new MassFlowRate object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a mass flow rate of 100 kg/h &gt;&gt;&gt; flow_kg_h \\= MassFlowRate(100, \"kg/h\")</p> <p># Convert to kg/s &gt;&gt;&gt; flow_kg_s \\= flow_kg_h.to(\"kg/s\")</p> <p>&gt;&gt;&gt; print(flow_kg_s) 0.027778 kg/s</p>"},{"location":"user-guide/units/mass_flowrate/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The MassFlowRate class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two MassFlowRate objects. The result is a new MassFlowRate object in the base unit (kg/s).  </li> <li>__eq__(self, other)   Compares two MassFlowRate objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two MassFlowRate objects &gt;&gt;&gt; mfr1 \\= MassFlowRate(10, \"kg/s\") &gt;&gt;&gt; mfr2 \\= MassFlowRate(3600, \"kg/h\")</p> <p># Add them together &gt;&gt;&gt; total_mfr \\= mfr1 + mfr2</p> <p>&gt;&gt;&gt; print(total_mfr) 11.0 kg/s</p>"},{"location":"user-guide/units/mass_flowrate/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the mass flow rate, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/power/","title":"Power Class","text":"<p>The Power class is a subclass of Variable designed to represent the rate at which work is done or energy is transferred. It ensures accurate calculations by storing all values internally in its base SI unit, Watts (W).</p>"},{"location":"user-guide/units/power/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Watts (W) Watts W 1 kilowatts kW 103 megawatts MW 106 mechanical horsepower hp 745.7 British Thermal Units per hour BTU/h 0.29307107"},{"location":"user-guide/units/power/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/power/#class-powervalue-unitsw","title":"class Power(value, units='W')","text":"<p>A class for handling power measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the power. Must be a non-negative number.  </li> <li>units : str, default='W'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative or units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Power object of 1000 Watts &gt;&gt;&gt; p1 \\= Power(1000)</p> <p># Create a Power object of 1 kilowatt &gt;&gt;&gt; p2 \\= Power(1, \"kW\")</p> <p># Create a Power object of 1.34 horsepower &gt;&gt;&gt; p4 \\= Power(1.34, \"hp\")</p>"},{"location":"user-guide/units/power/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the power, always in Watts (W). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/power/#methods","title":"Methods","text":""},{"location":"user-guide/units/power/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Power object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Power   A new Power object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a power of 1000 W &gt;&gt;&gt; power_W \\= Power(1000)</p> <p># Convert to kilowatts &gt;&gt;&gt; power_kW \\= power_W.to(\"kW\")</p> <p>&gt;&gt;&gt; print(power_kW) 1.0 kW</p>"},{"location":"user-guide/units/power/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Power class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Power objects. The result is a new Power object in the unit of the first operand.  </li> <li>__eq__(self, other)   Compares two Power objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two Power objects &gt;&gt;&gt; p1 \\= Power(1, \"kW\") &gt;&gt;&gt; p2 \\= Power(500, \"W\")</p> <p># Add them together &gt;&gt;&gt; total_power \\= p1 + p2</p> <p>&gt;&gt;&gt; print(total_power) 1.5 kW</p>"},{"location":"user-guide/units/power/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the power, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns an unambiguous string representation of the object.</li> </ul>"},{"location":"user-guide/units/pressure/","title":"Pressure Class","text":"<p>The Pressure class is a subclass of Variable designed to represent a force per unit area. It ensures accurate calculations by storing all values internally in its base SI unit, Pascals (Pa).</p>"},{"location":"user-guide/units/pressure/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Pascals (Pa) Pascals Pa 1 kilopascals kPa 103 megapascals MPa 106 bar bar 105 atmospheres atm 101325 pounds per square inch psi 6894.76 millimeters of mercury mmHg 133.322 torr torr 133.322"},{"location":"user-guide/units/pressure/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/pressure/#class-pressurevalue-unitspa","title":"class Pressure(value, units='Pa')","text":"<p>A class for handling pressure measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the pressure. Must be a non-negative number.  </li> <li>units : str, default='Pa'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Pressure object of 1 atmosphere &gt;&gt;&gt; p1 \\= Pressure(1, \"atm\")</p> <p># Create a Pressure object of 101325 Pascals &gt;&gt;&gt; p2 \\= Pressure(101325, \"Pa\")</p>"},{"location":"user-guide/units/pressure/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the pressure as provided during initialization. This is inherited from the Variable base class. .units str The string representation of the variable's units, as provided during initialization. Inherited from the Variable base class. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/pressure/#methods","title":"Methods","text":""},{"location":"user-guide/units/pressure/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Pressure object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Pressure   A new Pressure object with the same value, represented in the target unit.</li> </ul> <p>Examples:</p> <p># Initialize a pressure of 1 atm &gt;&gt;&gt; atm_pressure \\= Pressure(1, \"atm\")</p> <p># Convert to psi &gt;&gt;&gt; psi_pressure \\= atm_pressure.to(\"psi\")</p> <p>&gt;&gt;&gt; print(psi_pressure) 14.695949 psi</p>"},{"location":"user-guide/units/pressure/#to_base","title":"to_base()","text":"<p>Converts the pressure to the base SI unit, Pascals (Pa), and returns the numeric value.</p> <p>Returns:</p> <ul> <li>float   The value of the pressure in Pascals (Pa).</li> </ul>"},{"location":"user-guide/units/pressure/#from_basebase_value-target_units","title":"from_base(base_value, target_units)","text":"<p>Creates a new Pressure object from a given base unit value.</p> <p>Parameters:</p> <ul> <li>base_value : float   The value in the base unit (Pa).  </li> <li>target_units : str   The units for the new object.</li> </ul> <p>Returns:</p> <ul> <li>Pressure   A new Pressure object with the converted value.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_units is not a valid unit.</li> </ul>"},{"location":"user-guide/units/pressure/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the pressure, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging, showing the internal values.</li> </ul>"},{"location":"user-guide/units/specific_heat/","title":"SpecificHeat Class","text":"<p>The SpecificHeat class is a subclass of Variable designed to represent the amount of energy required to raise the temperature of a unit mass of a substance by one degree. It stores all values internally in its base unit, kilojoules per kilogram-Kelvin (kJ/kgcdotK).</p>"},{"location":"user-guide/units/specific_heat/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion.</p> Unit Symbol Conversion Factor to Kilojoules per Kilogram-Kelvin (kJ/kgcdotK) kilojoules per kilogram-Kelvin kJ/kgK 1 Joules per kilogram-Kelvin J/kgK 0.001 calories per gram-Kelvin cal/gK 4.1868 British Thermal Units per pound-degree Fahrenheit BTU/lbF 9.7423 kilocalories per kilogram-Kelvin kcal/kgK 4.1868"},{"location":"user-guide/units/specific_heat/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/specific_heat/#class-specificheatvalue-unitskjkgk","title":"class SpecificHeat(value, units='kJ/kgK')","text":"<p>A class for handling specific heat capacity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the specific heat. Must be a non-negative number.  </li> <li>units : str, default='kJ/kgK'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a SpecificHeat object of 4.186 kJ/kgK &gt;&gt;&gt; cp1 \\= SpecificHeat(4.186, \"kJ/kgK\")</p> <p># Create a SpecificHeat object of 1.0 cal/gK &gt;&gt;&gt; cp2 \\= SpecificHeat(1.0, \"cal/gK\")</p>"},{"location":"user-guide/units/specific_heat/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the specific heat, always in kilojoules per kilogram-Kelvin (kJ/kgcdotK). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/specific_heat/#methods","title":"Methods","text":""},{"location":"user-guide/units/specific_heat/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new SpecificHeat object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>SpecificHeat   A new SpecificHeat object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a specific heat of 4.186 kJ/kgK &gt;&gt;&gt; water_cp \\= SpecificHeat(4.186, \"kJ/kgK\")</p> <p># Convert to BTU/lbF &gt;&gt;&gt; water_cp_btu \\= water_cp.to(\"BTU/lbF\")</p> <p>&gt;&gt;&gt; print(water_cp_btu) 1.79159 BTU/lbF</p>"},{"location":"user-guide/units/specific_heat/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The SpecificHeat class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two SpecificHeat objects. The result is a new SpecificHeat object in the base unit (kJ/kgcdotK).  </li> <li>__eq__(self, other)   Compares two SpecificHeat objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two SpecificHeat objects &gt;&gt;&gt; cp1 \\= SpecificHeat(1, \"kJ/kgK\") &gt;&gt;&gt; cp2 \\= SpecificHeat(1, \"kJ/kgK\")</p> <p># Add them together &gt;&gt;&gt; total_cp \\= cp1 + cp2</p> <p>&gt;&gt;&gt; print(total_cp) 2.0 kJ/kgK</p>"},{"location":"user-guide/units/specific_heat/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the specific heat, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/string/","title":"StringUnit Class","text":"<p>The StringUnit class is a subclass of Variable designed to represent quantities that are categorical or string-based, rather than numeric. Examples include a material's phase, a flow type, or a component's status. It provides a simple way to handle these non-numeric values within a consistent framework.</p>"},{"location":"user-guide/units/string/#supported-units","title":"Supported Units","text":"<p>By definition, this class does not have physical units. The category attribute is used to provide context for the string value.</p>"},{"location":"user-guide/units/string/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/string/#class-stringunitvalue-categorystring","title":"class StringUnit(value, category='string')","text":"<p>A class for handling string-based quantities.</p> <p>Parameters:</p> <ul> <li>value : str   The string value of the quantity.  </li> <li>category : str, default='string'   The descriptive category for the quantity (e.g., 'flow_type', 'phase_state').</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If value is not a string.</li> </ul> <p>Examples:</p> <p># Create a StringUnit object for a flow type &gt;&gt;&gt; flow \\= StringUnit(\"Laminar\", \"flow_type\")</p> <p># Create a StringUnit object for a phase state &gt;&gt;&gt; phase \\= StringUnit(\"Gas\", \"phase_state\")</p>"},{"location":"user-guide/units/string/#properties","title":"Properties","text":"Property Type Description .value str The string value of the quantity. .original_value str The value as provided during initialization. Identical to .value. .category str The category name for the string value."},{"location":"user-guide/units/string/#methods","title":"Methods","text":""},{"location":"user-guide/units/string/#totarget_unitnone","title":"to(target_unit=None)","text":"<p>For string-based quantities, unit conversion is not applicable. This method is provided for interface consistency with other Variable subclasses. It returns a new StringUnit object with the same value and category.</p> <p>Parameters:</p> <ul> <li>target_unit : None   This parameter is ignored for this class.</li> </ul> <p>Returns:</p> <ul> <li>StringUnit   A new StringUnit object with the same value.</li> </ul> <p>Examples:</p> <p># The to() method simply returns a copy &gt;&gt;&gt; flow \\= StringUnit(\"Laminar\") &gt;&gt;&gt; flow_copy \\= flow.to()</p> <p>&gt;&gt;&gt; print(flow \\== flow_copy) True</p>"},{"location":"user-guide/units/string/#comparison-operations","title":"Comparison Operations","text":"<p>The StringUnit class supports equality (==) comparison.</p> <ul> <li>__eq__(self, other)   Compares two StringUnit objects for equality based on their string values.</li> </ul>"},{"location":"user-guide/units/string/#string-representation","title":"String Representation","text":"<ul> <li>__repr__(self)   Returns a string representation of the object in the format \"{value} ({category})\", which is also used for the __str__ method.</li> </ul>"},{"location":"user-guide/units/temperature/","title":"Temperature Class","text":"<p>The Temperature class is a subclass of Variable designed to represent a temperature quantity. It ensures accurate conversions and calculations by storing all values internally in its base SI unit, Kelvin (K).</p>"},{"location":"user-guide/units/temperature/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary formula-based conversions to and from the base unit.</p> Unit Symbol Conversion Formula to Kelvin (K) Kelvin K T_K=T_K Celsius C T_K=T_C+273.15 Fahrenheit F T_K=(T_F\u221232)times5/9+273.15"},{"location":"user-guide/units/temperature/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/temperature/#class-temperaturevalue-unitsk","title":"class Temperature(value, units='K')","text":"<p>A class for handling temperature measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the temperature.  </li> <li>units : str, default='K'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Temperature object of 100\u00b0C &gt;&gt;&gt; t1 \\= Temperature(100, \"C\")</p> <p># Create a Temperature object of 373.15 K &gt;&gt;&gt; t2 \\= Temperature(373.15)</p>"},{"location":"user-guide/units/temperature/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the temperature, always in Kelvin (K). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/temperature/#methods","title":"Methods","text":""},{"location":"user-guide/units/temperature/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Temperature object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Temperature   A new Temperature object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a temperature of 25\u00b0C &gt;&gt;&gt; temp_C \\= Temperature(25, \"C\")</p> <p># Convert to Fahrenheit &gt;&gt;&gt; temp_F \\= temp_C.to(\"F\")</p> <p>&gt;&gt;&gt; print(temp_F) 77.0 F</p>"},{"location":"user-guide/units/temperature/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Temperature class handles addition and subtraction differently from other quantities due to the physical nature of temperature scales.</p> <ul> <li>__add__(self, other)   Raises a TypeError. Direct addition of two temperatures is not supported as it is not physically meaningful.  </li> <li>__sub__(self, other)   Subtracts a Temperature object from another. The result is a numeric value representing the temperature difference in Kelvin.   Raises: TypeError if other is not a Temperature instance.  </li> <li>__eq__(self, other)   Compares two Temperature objects for equality based on their internal Kelvin values.</li> </ul> <p>Examples:</p> <p># Create two Temperature objects &gt;&gt;&gt; t1 \\= Temperature(20, \"C\") &gt;&gt;&gt; t2 \\= Temperature(10, \"C\")</p> <p># Subtract them to get the temperature difference &gt;&gt;&gt; diff \\= t1 - t2</p> <p>&gt;&gt;&gt; print(f\"{diff} K\") 10.0 K</p>"},{"location":"user-guide/units/temperature/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the temperature, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/thermal_conductivity/","title":"ThermalConductivity Class","text":"<p>The ThermalConductivity class is a subclass of Variable designed to represent a material's ability to conduct heat. It ensures accurate calculations by storing all values internally in its base SI unit, Watts per meter-Kelvin (W/mcdotK).</p>"},{"location":"user-guide/units/thermal_conductivity/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary formula-based conversions to and from the base unit.</p> Unit Symbol Conversion Factor to Watts per Meter-Kelvin (W/mcdotK) Watts per meter-Kelvin W/mK 1 kilowatts per meter-Kelvin kW/mK 1000 calories per second-centimeter-degree Celsius cal/scmC 418.4 British Thermal Units per hour-foot-degree Fahrenheit BTU/hftF 1.730735"},{"location":"user-guide/units/thermal_conductivity/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/thermal_conductivity/#class-thermalconductivityvalue-unitswmk","title":"class ThermalConductivity(value, units='W/mK')","text":"<p>A class for handling thermal conductivity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the thermal conductivity. Must be a non-negative number.  </li> <li>units : str, default='W/mK'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a ThermalConductivity object for a value of 0.5 W/mK &gt;&gt;&gt; k1 \\= ThermalConductivity(0.5, \"W/mK\")</p> <p># Create a ThermalConductivity object of 1 kW/mK &gt;&gt;&gt; k2 \\= ThermalConductivity(1, \"kW/mK\")</p>"},{"location":"user-guide/units/thermal_conductivity/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the thermal conductivity, always in Watts per meter-Kelvin (W/mcdotK). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/thermal_conductivity/#methods","title":"Methods","text":""},{"location":"user-guide/units/thermal_conductivity/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new ThermalConductivity object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>ThermalConductivity   A new ThermalConductivity object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a thermal conductivity of 0.5 W/mK &gt;&gt;&gt; k_W \\= ThermalConductivity(0.5)</p> <p># Convert to BTU/hftF &gt;&gt;&gt; k_BTU \\= k_W.to(\"BTU/hftF\")</p> <p>&gt;&gt;&gt; print(k_BTU) 0.289356 BTU/hftF</p>"},{"location":"user-guide/units/thermal_conductivity/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The ThermalConductivity class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two ThermalConductivity objects. The result is a new ThermalConductivity object in the base unit (W/mcdotK).  </li> <li>__eq__(self, other)   Compares two ThermalConductivity objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two ThermalConductivity objects &gt;&gt;&gt; k1 \\= ThermalConductivity(10, \"W/mK\") &gt;&gt;&gt; k2 \\= ThermalConductivity(0.01, \"kW/mK\")</p> <p># Add them together &gt;&gt;&gt; total_k \\= k1 + k2</p> <p>&gt;&gt;&gt; print(total_k) 20.0 W/mK</p>"},{"location":"user-guide/units/thermal_conductivity/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the thermal conductivity, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/thermal_resistance/","title":"ThermalResistance Class","text":"<p>The ThermalResistance class is a subclass of Variable designed to represent a material's resistance to heat flow. It simplifies calculations by internally storing all values in its base SI unit, Kelvin per Watt (K/W).</p>"},{"location":"user-guide/units/thermal_resistance/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. Note that some units, like degrees Celsius per Watt (^\\\\circ C/W), are numerically equivalent to the base SI unit.</p> Unit Symbol Conversion Factor to Kelvin per Watt (K/W) Kelvin per Watt K/W 1 Celsius per Watt C/W 1 hour-foot\u00b2-degree Fahrenheit per British Thermal Unit hrft2F/BTU 0.1761 meter\u00b2-Kelvin per Watt m2K/W 1"},{"location":"user-guide/units/thermal_resistance/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/thermal_resistance/#class-thermalresistancevalue-unitskw","title":"class ThermalResistance(value, units='K/W')","text":"<p>A class for handling thermal resistance measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the thermal resistance. Must be a positive number.  </li> <li>units : str, default='K/W'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is not a positive number.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a ThermalResistance object for a value of 0.5 K/W &gt;&gt;&gt; r1 \\= ThermalResistance(0.5, \"K/W\")</p> <p># Create a ThermalResistance object of 2 C/W (numerically equivalent to 2 K/W) &gt;&gt;&gt; r2 \\= ThermalResistance(2, \"C/W\")</p>"},{"location":"user-guide/units/thermal_resistance/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the thermal resistance, always in Kelvin per Watt (K/W). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/thermal_resistance/#methods","title":"Methods","text":""},{"location":"user-guide/units/thermal_resistance/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new ThermalResistance object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>ThermalResistance   A new ThermalResistance object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a thermal resistance of 2 K/W &gt;&gt;&gt; r_K \\= ThermalResistance(2)</p> <p># Convert to hrft2F/BTU &gt;&gt;&gt; r_BTU \\= r_K.to(\"hrft2F/BTU\")</p> <p>&gt;&gt;&gt; print(r_BTU) 11.353457 hrft2F/BTU</p>"},{"location":"user-guide/units/thermal_resistance/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The ThermalResistance class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two ThermalResistance objects. The result is a new ThermalResistance object in the base unit (K/W).  </li> <li>__eq__(self, other)   Compares two ThermalResistance objects for equality based on their internal base unit values.</li> </ul> <p>Examples:</p> <p># Create two ThermalResistance objects &gt;&gt;&gt; r1 \\= ThermalResistance(10, \"K/W\") &gt;&gt;&gt; r2 \\= ThermalResistance(5, \"C/W\")</p> <p># Add them together &gt;&gt;&gt; total_r \\= r1 + r2</p> <p>&gt;&gt;&gt; print(total_r) 15.0 K/W</p>"},{"location":"user-guide/units/thermal_resistance/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the thermal resistance, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/units/","title":"\ud83d\udcd0 Units Module","text":"<p>The <code>processpi.units</code> module provides a consistent framework to handle unit conversions across SI, CGS, and Imperial systems. Every physical property is represented as a Python class with built-in <code>.to()</code> methods for easy conversion.</p>"},{"location":"user-guide/units/units/#usage-pattern","title":"\ud83d\udd27 Usage Pattern","text":""},{"location":"user-guide/units/units/#from-processpiunits-import-length-length-length10-m-define-length-in-meters-printlengthtoft-convert-to-feet","title":"<pre><code>from processpi.units import Length\n\nlength = Length(10, \"m\")     # define length in meters\nprint(length.to(\"ft\"))  # convert to feet\n</code></pre>","text":""},{"location":"user-guide/units/units/#examples","title":"\ud83d\ude80 Examples","text":"<p>Below are some examples covering the most common engineering quantities.</p>"},{"location":"user-guide/units/units/#1-velocity","title":"1. Velocity","text":"<pre><code>from processpi.units import Velocity\n\nv = Velocity(1.55, \"m/s\")\nprint(v.to(\"ft/s\"))\n# Output: 5.085 ft/s\n</code></pre>"},{"location":"user-guide/units/units/#2-diameter","title":"2. Diameter","text":"<pre><code>from processpi.units import Diameter\n\nd = Diameter(10, \"in\")\nprint(d.to(\"cm\"))\n# Output: 25.4 cm\n</code></pre>"},{"location":"user-guide/units/units/#3-density","title":"3. Density","text":"<pre><code>from processpi.units import Density\nden = Density(1000, \"kg/m3\")\nprint(den.to(\"g/cm3\"))\n# Output: 1.0 g/cm3\n</code></pre>"},{"location":"user-guide/units/units/#4-heat-flux","title":"4. Heat Flux","text":"<pre><code>from processpi.units import HeatFlux\nq = HeatFlux(5000, \"W/m2\")\nprint(q.to(\"BTU/hft2\"))\n</code></pre>"},{"location":"user-guide/units/units/#5-heat-of-vaporization","title":"5. Heat of Vaporization","text":"<pre><code>from processpi.units import HeatOfVaporization\nhv = HeatOfVaporization(2260, \"J/kg\")\nprint(hv.to(\"BTU/lb\"))\n</code></pre>"},{"location":"user-guide/units/units/#6-heat-transfer-coefficient","title":"6. Heat Transfer Coefficient","text":"<pre><code>from processpi.units import HeatTransferCoefficient\n\nhtc = HeatTransferCoefficient(1000, \"W/m2K\")\nprint(htc.to(\"BTU/hft2F\"))\n</code></pre>"},{"location":"user-guide/units/units/#7-length","title":"7. Length","text":"<pre><code>from processpi.units import Length\n\nL = Length(5, \"m\")\nprint(L.to(\"ft\"))\n</code></pre>"},{"location":"user-guide/units/units/#8-mass-flow-rate","title":"8. Mass Flow Rate","text":"<pre><code>from processpi.units import MassFlowRate\n\nmf = MassFlowRate(100, \"kg/s\")\nprint(mf.to(\"lb/min\"))\n</code></pre>"},{"location":"user-guide/units/units/#9-mass","title":"9. Mass","text":"<pre><code>from processpi.units import Mass\n\nm = Mass(10, \"kg\")\nprint(m.to(\"lb\"))\n</code></pre>"},{"location":"user-guide/units/units/#10-power","title":"10. Power","text":"<pre><code>from processpi.units import Power\n\nP = Power(1000, \"W\")\nprint(P.to(\"BTU/h\"))\n</code></pre>"},{"location":"user-guide/units/units/#11-pressure","title":"11. Pressure","text":"<pre><code>from processpi.units import Pressure\n\np = Pressure(101325, \"Pa\")\nprint(p.to(\"psi\"))\n</code></pre>"},{"location":"user-guide/units/units/#12-specific-heat","title":"12. Specific Heat","text":"<pre><code>from processpi.units import SpecificHeat\n\ncp = SpecificHeat(4184, \"J/kgK\")\nprint(cp.to(\"BTU/lbF\"))\n</code></pre>"},{"location":"user-guide/units/units/#13-temperature","title":"13. Temperature","text":"<pre><code>from processpi.units import Temperature\n\nT = Temperature(100, \"C\")\nprint(T.to(\"F\"))\n</code></pre>"},{"location":"user-guide/units/units/#14-thermal-conductivity","title":"14. Thermal Conductivity","text":"<pre><code>from processpi.units import ThermalConductivity\n\nk = ThermalConductivity(200, \"W/mK\")\nprint(k.to(\"BTU/hftF\"))\n</code></pre>"},{"location":"user-guide/units/units/#15-viscosity","title":"15. Viscosity","text":"<pre><code>from processpi.units import Viscosity\n\nmu = Viscosity(1.55, \"Pa\u00b7s\")\nprint(mu.to(\"cP\"))\n</code></pre>"},{"location":"user-guide/units/units/#16-volume","title":"16. Volume","text":"<pre><code>from processpi.units import Volume\n\nV = Volume(1, \"L\")\nprint(V.to(\"m3\"))\n</code></pre>"},{"location":"user-guide/units/units/#17-volumetric-flow-rate","title":"17. Volumetric Flow Rate","text":"<pre><code>from processpi.units import VolumetricFlowRate\n\nQ = VolumetricFlowRate(3000, \"gal/min\")\nprint(Q.to(\"m3/s\"))\n</code></pre>"},{"location":"user-guide/units/units/#bonus-examples","title":"\u2728 Bonus Examples","text":""},{"location":"user-guide/units/units/#18-time","title":"18. Time","text":"<pre><code>from processpi.units import Time\n\nt = Time(3600, \"s\")\nprint(t.to(\"h\"))\n# Output: 1 h\n</code></pre>"},{"location":"user-guide/units/units/#19-molar-flow-rate","title":"19. Molar Flow Rate","text":"<pre><code>from processpi.units import MolarFlowRate\n\nn_dot = MolarFlowRate(100, \"mol/s\")\nprint(n_dot.to(\"kmol/h\"))\n</code></pre>"},{"location":"user-guide/units/units/#summary","title":"\u2705 Summary","text":"<p>Every unit is a class (e.g., Length, Pressure, Viscosity).</p> <p>Values can be converted with .to(\"\"). <p>The system supports engineering-friendly units across SI, Imperial, and practical process units.</p> <p>Use this module as the foundation for all your chemical/process engineering calculations in ProcessPI.</p>"},{"location":"user-guide/units/variable/","title":"Variable Class","text":"<p>The Variable class is a generic base class for physical quantities. It provides a foundation for handling a value and its associated units, and defines common methods for comparison and arithmetic operations. This class is designed to be subclassed; specific physical types (like Length or Area) must implement the necessary unit conversion logic.</p>"},{"location":"user-guide/units/variable/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/variable/#class-variablevalue-float-units-str","title":"class Variable(value: float, units: str)","text":"<p>A generic physical variable with a numeric value and string-based units. It provides a base for all unit-aware quantity classes.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the variable.  </li> <li>units : str   The string representation of the variable's units.</li> </ul> <p>Examples:</p> <p># Create a generic variable &gt;&gt;&gt; my_var \\= Variable(10, \"unit\")</p>"},{"location":"user-guide/units/variable/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the variable. .units str The string representation of the variable's units."},{"location":"user-guide/units/variable/#methods","title":"Methods","text":""},{"location":"user-guide/units/variable/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Variable class supports addition (+) and subtraction (-) for instances of the same subclass. These operations are performed on the base unit values, ensuring correct results regardless of the original units.</p> <ul> <li>__add__(self, other)   Adds two variables of the same subclass.   Raises: TypeError if other is not an instance of the same subclass.  </li> <li>__sub__(self, other)   Subtracts two variables of the same subclass.   Raises: TypeError if other is not an instance of the same subclass.</li> </ul>"},{"location":"user-guide/units/variable/#comparison-operations","title":"Comparison Operations","text":"<p>All comparison operations (==, !=, \\&lt;, &gt;, \\&lt;=, &gt;=) are defined for instances of the same subclass. They work by comparing the objects' internal base unit values.</p> <ul> <li>__eq__(self, other)   Compares two variables for equality.  </li> <li>__ne__(self, other)   Compares two variables for inequality.  </li> <li>__lt__(self, other), __le__(self, other), __gt__(self, other), __ge__(self, other)   Standard less-than, less-than-or-equal-to, greater-than, and greater-than-or-equal-to comparisons.</li> </ul>"},{"location":"user-guide/units/variable/#formatting-representation","title":"Formatting &amp; Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the variable in the format: \"{value} {units}\".  </li> <li>__repr__(self)   Returns an unambiguous string representation suitable for developers, like \"\\&lt;Variable: 10 unit&gt;\".  </li> <li>__format__(self, format_spec)   Allows for custom string formatting of the numeric value, such as with f-strings.  </li> <li>__hash__(self)   Enables Variable objects to be used in sets or as dictionary keys by providing a hash based on the class name and the base unit value.</li> </ul>"},{"location":"user-guide/units/variable/#abstract-methods","title":"Abstract Methods","text":"<p>The following methods are abstract and must be overridden by subclasses to handle specific unit conversions. Attempting to call these methods on the Variable base class will result in a NotImplementedError.</p> <ul> <li>to(self, target_units: str)   Converts the variable to a specified target_units.  </li> <li>to_base(self)   Converts the variable's value to its base unit.  </li> <li>from_base(self, base_value: float, target_units: str)   Creates a new instance from a given base unit value.</li> </ul>"},{"location":"user-guide/units/velocity/","title":"Velocity Class","text":"<p>The Velocity class is a subclass of Variable designed to represent a quantity of velocity. It handles automatic unit conversion by storing all internal values in the base SI unit, meters per second (m/s).</p>"},{"location":"user-guide/units/velocity/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary conversions to and from the base unit.</p> Unit Symbol Conversion Factor to Meters per Second (m/s) meters per second m/s 1 kilometers per hour km/h 1/3.6 centimeters per second cm/s 0.01 feet per second ft/s 0.3048 miles per hour mph 0.44704"},{"location":"user-guide/units/velocity/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/velocity/#class-velocityvalue-unitsms","title":"class Velocity(value, units='m/s')","text":"<p>A class for handling velocity measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the velocity.  </li> <li>units : str, default='m/s'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Velocity object for a value of 25 m/s &gt;&gt;&gt; v1 \\= Velocity(25, \"m/s\")</p> <p># Create a Velocity object for 100 km/h &gt;&gt;&gt; v2 \\= Velocity(100, \"km/h\")</p>"},{"location":"user-guide/units/velocity/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the velocity, always in meters per second (m/s). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/velocity/#methods","title":"Methods","text":""},{"location":"user-guide/units/velocity/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Velocity object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Velocity   A new Velocity object with the same value, represented in the target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a velocity of 25 m/s &gt;&gt;&gt; v_ms \\= Velocity(25)</p> <p># Convert to km/h &gt;&gt;&gt; v_kmh \\= v_ms.to(\"km/h\")</p> <p>&gt;&gt;&gt; print(v_kmh) 90.0 km/h</p>"},{"location":"user-guide/units/velocity/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the velocity, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging.</li> </ul>"},{"location":"user-guide/units/viscosity/","title":"Viscosity Class","text":"<p>The Viscosity class is a subclass of Variable designed to represent a quantity of viscosity. It uniquely handles two different types of viscosity: dynamic and kinematic. The class automatically determines the viscosity type based on the provided units and performs conversions only within that type.</p>"},{"location":"user-guide/units/viscosity/#supported-units","title":"Supported Units","text":"<p>The class distinguishes between two sets of units for dynamic and kinematic viscosity.</p>"},{"location":"user-guide/units/viscosity/#dynamic-viscosity-units","title":"Dynamic Viscosity Units","text":"<p>The base SI unit for dynamic viscosity is Pascal-second (Pacdots).</p> Unit Symbol Conversion Factor to Pascal-second (Pacdots) Pascal-second Pa\u00b7s 1 milliPascal-second mPa\u00b7s 10\u22123 centipoise cP 10\u22123 poise P 0.1"},{"location":"user-guide/units/viscosity/#kinematic-viscosity-units","title":"Kinematic Viscosity Units","text":"<p>The base SI unit for kinematic viscosity is meters-squared per second (m2/s).</p> Unit Symbol Conversion Factor to meter-squared per second (m2/s) meter-squared per second m2/s 1 centimeter-squared per second cm2/s 10\u22124 millimeter-squared per second mm2/s 10\u22126 centistoke cSt 10\u22126 stoke St 10\u22124"},{"location":"user-guide/units/viscosity/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/viscosity/#class-viscosityvalue-unitspas","title":"class Viscosity(value, units='Pa\u00b7s')","text":"<p>A class for handling viscosity measurements. The type of viscosity (dynamic or kinematic) is determined automatically based on the units argument.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the viscosity. Must be a non-negative number.  </li> <li>units : str, default='Pa\u00b7s'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative or if units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Viscosity object for a dynamic viscosity of 1e-3 Pa\u00b7s &gt;&gt;&gt; v1 \\= Viscosity(1e-3, units=\"Pa\u00b7s\")</p> <p># Create a Viscosity object for a kinematic viscosity of 1 cSt &gt;&gt;&gt; v2 \\= Viscosity(1, units=\"cSt\")</p>"},{"location":"user-guide/units/viscosity/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the viscosity, always stored in its base SI unit (Pacdots for dynamic, m2/s for kinematic). .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization. .viscosity_type str Indicates the type of viscosity, either \"dynamic\" or \"kinematic\"."},{"location":"user-guide/units/viscosity/#methods","title":"Methods","text":""},{"location":"user-guide/units/viscosity/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Viscosity object converted to the target_unit. This method can only convert between units of the same viscosity type (e.g., dynamic to dynamic). The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be a valid unit for the object's viscosity type.</li> </ul> <p>Returns:</p> <ul> <li>Viscosity   A new Viscosity object with the converted value and target unit.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If target_unit is not a valid unit for the viscosity type.</li> </ul> <p>Examples:</p> <p># Initialize a dynamic viscosity of 1 Pa\u00b7s &gt;&gt;&gt; v_Pa \\= Viscosity(1)</p> <p># Convert to centipoise (cP) &gt;&gt;&gt; v_cP \\= v_Pa.to(\"cP\")</p> <p>&gt;&gt;&gt; print(v_cP) 1000.0 cP (dynamic)</p>"},{"location":"user-guide/units/viscosity/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Viscosity class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Viscosity objects. Both objects must be of the same viscosity type. The result is a new Viscosity object in the original units of the first operand.  </li> <li>__eq__(self, other)   Compares two Viscosity objects for equality. It checks if they are both Viscosity instances, have the same internal value, and the same viscosity type.</li> </ul> <p>Examples:</p> <p># Create two dynamic viscosity objects &gt;&gt;&gt; v1 \\= Viscosity(10, \"Pa\u00b7s\") &gt;&gt;&gt; v2 \\= Viscosity(5000, \"mPa\u00b7s\")</p> <p># Add them together (5000 mPa\u00b7s \\= 5 Pa\u00b7s) &gt;&gt;&gt; total_v \\= v1 + v2</p> <p>&gt;&gt;&gt; print(total_v) 15.0 Pa\u00b7s (dynamic)</p>"},{"location":"user-guide/units/viscosity/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the viscosity, rounded to six decimal places, using its original value, unit, and type.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging, showing the original value, unit, and viscosity type.</li> </ul>"},{"location":"user-guide/units/vollumetric_flowrate/","title":"VolumetricFlowRate Class","text":"<p>The VolumetricFlowRate class is a subclass of Variable that represents the volume of fluid passing a point per unit of time. The base SI unit for volumetric flow rate is cubic meters per second (m3/s).</p>"},{"location":"user-guide/units/vollumetric_flowrate/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class automatically converts all internal values to the base unit (m3/s).</p> Unit Symbol Conversion Factor to Cubic Meters per Second (m3/s) cubic meter per second m3/s 1 cubic meter per hour m3/h frac13600 liter per second L/s frac11000 liter per minute L/min frac160000 liter per hour L/h frac13600000 cubic foot per second ft3/s 0.0283168 cubic foot per minute ft3/min frac0.028316860 cubic foot per hour ft3/h frac0.02831683600 US gallon per minute gal/min frac0.0037854160 US gallon per hour gal/h frac0.003785413600"},{"location":"user-guide/units/vollumetric_flowrate/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/vollumetric_flowrate/#class-volumetricflowratevalue-unitsm3s","title":"class VolumetricFlowRate(value, units='m3/s')","text":"<p>A class for handling volumetric flow rate measurements.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the flow rate. Must be a non-negative number.  </li> <li>units : str, default='m3/s'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a VolumetricFlowRate object for 2 m3/h &gt;&gt;&gt; v1 \\= VolumetricFlowRate(2, \"m3/h\")</p> <p># Create a VolumetricFlowRate object for 500 L/min &gt;&gt;&gt; v2 \\= VolumetricFlowRate(500, \"L/min\")</p>"},{"location":"user-guide/units/vollumetric_flowrate/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the flow rate, always in cubic meters per second (m3/s). .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/vollumetric_flowrate/#methods","title":"Methods","text":""},{"location":"user-guide/units/vollumetric_flowrate/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new VolumetricFlowRate object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>VolumetricFlowRate   A new VolumetricFlowRate object with the converted value and target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a flow rate of 100 L/s &gt;&gt;&gt; flow_L \\= VolumetricFlowRate(100, \"L/s\")</p> <p># Convert to cubic meters per hour &gt;&gt;&gt; flow_m3h \\= flow_L.to(\"m3/h\")</p> <p>&gt;&gt;&gt; print(flow_m3h) 360.0 m3/h</p>"},{"location":"user-guide/units/vollumetric_flowrate/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The VolumetricFlowRate class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two VolumetricFlowRate objects. The result is a new VolumetricFlowRate object in cubic meters per second. The original objects remain unchanged.  </li> <li>__eq__(self, other)   Compares two VolumetricFlowRate objects for equality. It checks if they are both VolumetricFlowRate instances and have the same internal value.</li> </ul> <p>Examples:</p> <p># Create two flow rate objects &gt;&gt;&gt; v1 \\= VolumetricFlowRate(10, \"L/s\") &gt;&gt;&gt; v2 \\= VolumetricFlowRate(10, \"L/min\")</p> <p># Add them together (10 L/s \\= 600 L/min) &gt;&gt;&gt; total_v \\= v1 + v2</p> <p>&gt;&gt;&gt; print(total_v) 0.010167 m3/s</p>"},{"location":"user-guide/units/vollumetric_flowrate/#class-methods","title":"Class Methods","text":""},{"location":"user-guide/units/vollumetric_flowrate/#from_mass_flowcls-mass_flow-massflowrate-density-density","title":"from_mass_flow(cls, mass_flow: \"MassFlowRate\", density: \"Density\")","text":"<p>A class method that converts a MassFlowRate and Density into a VolumetricFlowRate. The conversion formula is:</p> <p>Qvol\u200b=\u03c1m\u02d9\u200b</p> <p>where Q_vol is volumetric flow rate, dotm is mass flow rate, and rho is density. Parameters:</p> <ul> <li>mass_flow : MassFlowRate   An instance of the MassFlowRate class.  </li> <li>density : Density   An instance of the Density class.</li> </ul> <p>Returns:</p> <ul> <li>VolumetricFlowRate   A new VolumetricFlowRate object with the calculated value in the base unit (m3/s).</li> </ul> <p>Example:</p> <p># Assuming MassFlowRate and Density classes are available &gt;&gt;&gt; m_dot \\= MassFlowRate(100, \"kg/s\") &gt;&gt;&gt; rho \\= Density(1000, \"kg/m3\")</p> <p>&gt;&gt;&gt; q_vol \\= VolumetricFlowRate.from_mass_flow(m_dot, rho)</p> <p>&gt;&gt;&gt; print(q_vol) 0.1 m3/s  </p>"},{"location":"user-guide/units/volume/","title":"Volume Class","text":"<p>The Volume class is a subclass of Variable designed to represent a quantity of volume. It handles automatic unit conversion by storing all internal values in the base SI unit, cubic meters (m3).</p>"},{"location":"user-guide/units/volume/#supported-units","title":"Supported Units","text":"<p>The following units are supported for initialization and conversion. The class handles the necessary conversions to and from the base unit.</p> Unit Symbol Conversion Factor to Cubic Meters (m3) cubic meter m3 1 liter L 0.001 milliliter mL 10\u22126 cubic centimeter cm3 10\u22126 cubic foot ft3 0.0283168 cubic inch in3 1.63871times10\u22125 US gallon gal 0.00378541 oil barrel bbl 0.158987"},{"location":"user-guide/units/volume/#class-reference","title":"Class Reference","text":""},{"location":"user-guide/units/volume/#class-volumevalue-unitsm3","title":"class Volume(value, units='m3')","text":"<p>A class for handling volume measurements with automatic unit conversion.</p> <p>Parameters:</p> <ul> <li>value : float or int   The numeric value of the volume. Must be a non-negative number.  </li> <li>units : str, default='m3'   The unit of the provided value. Must be one of the supported units.</li> </ul> <p>Raises:</p> <ul> <li>ValueError : If value is negative.  </li> <li>TypeError : If units is not a valid unit.</li> </ul> <p>Examples:</p> <p># Create a Volume object for 100 liters &gt;&gt;&gt; v1 \\= Volume(100, \"L\")</p> <p># Create a Volume object for 1 cubic meter &gt;&gt;&gt; v2 \\= Volume(1, \"m3\")</p>"},{"location":"user-guide/units/volume/#properties","title":"Properties","text":"Property Type Description .value float The numeric value of the volume, always in cubic meters (m3). This is the internal representation used for all calculations. .original_value float The numeric value as provided during initialization. .original_unit str The unit as provided during initialization."},{"location":"user-guide/units/volume/#methods","title":"Methods","text":""},{"location":"user-guide/units/volume/#totarget_unit","title":"to(target_unit)","text":"<p>Returns a new Volume object converted to the target_unit. The original object remains unchanged.</p> <p>Parameters:</p> <ul> <li>target_unit : str   The unit to convert to. Must be one of the supported units.</li> </ul> <p>Returns:</p> <ul> <li>Volume   A new Volume object with the converted value and target unit.</li> </ul> <p>Raises:</p> <ul> <li>TypeError : If target_unit is not a valid unit.</li> </ul> <p>Examples:</p> <p># Initialize a volume of 5 gallons &gt;&gt;&gt; v_gal \\= Volume(5, \"gal\")</p> <p># Convert to liters &gt;&gt;&gt; v_L \\= v_gal.to(\"L\")</p> <p>&gt;&gt;&gt; print(v_L) 18.92705 L</p>"},{"location":"user-guide/units/volume/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The Volume class supports addition (+) and comparison (==).</p> <ul> <li>__add__(self, other)   Adds two Volume objects. The result is a new Volume object in cubic meters. The original objects remain unchanged.  </li> <li>__eq__(self, other)   Compares two Volume objects for equality. It checks if they are both Volume instances and have the same internal value.</li> </ul> <p>Examples:</p> <p># Create two volume objects &gt;&gt;&gt; v1 \\= Volume(10, \"L\") &gt;&gt;&gt; v2 \\= Volume(1, \"m3\")</p> <p># Add them together (1 m3 \\= 1000 L) &gt;&gt;&gt; total_v \\= v1 + v2</p> <p>&gt;&gt;&gt; print(total_v) 1010.0 L</p>"},{"location":"user-guide/units/volume/#string-representation","title":"String Representation","text":"<ul> <li>__str__(self)   Returns a human-readable string representation of the volume, rounded to six decimal places, using its original value and unit.  </li> <li>__repr__(self)   Returns a string representation suitable for developers and debugging, showing the original value and unit.</li> </ul>"}]}